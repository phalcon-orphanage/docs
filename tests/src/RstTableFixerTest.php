<?php

namespace Phalcon\Docs;

class RstTableFixerTest extends TestCase
{
    function setUp()
    {
        $this->fixer = new RstTableFixer();
    }
    
    function test_fix()
    {
        $rstString = <<<'EOL'
+------------------------+------------+----------+----------+
| Header row, column 1   | Header 2   | Header 3 | Header 4 |
+========================+============+==========+==========+
| body row 1, column 1   | column 2   | column 3 | column 4 |
+------------------------+------------+----------+----------+
| body row 2             | ...        | ...      |          |
+------------------------+------------+----------+----------+

EOL;

        $test = $this->fixer->fix($rstString);
        $expected = <<<'EOL'
+----------------------+----------+----------+----------+
| Header row, column 1 | Header 2 | Header 3 | Header 4 |
+======================+==========+==========+==========+
| body row 1, column 1 | column 2 | column 3 | column 4 |
+----------------------+----------+----------+----------+
| body row 2           | ...      | ...      |          |
+----------------------+----------+----------+----------+


EOL;
        $this->assertEquals($expected, $test);
    }
    
    public function test_fixWithEscapedString()
    {
        $rstString = <<<'EOL'
+----------------------+----------------------------------------------------------------------------------------------+
| Operator             | Description                                                                                  |
+======================+==============================================================================================+
| \~                   | Concatenates both operands {{ "hello " \~ "world" }}                                         |
+----------------------+----------------------------------------------------------------------------------------------+
| \|                   | Applies a filter in the right operand to the left {{ "hello"\|uppercase }}                   |
+----------------------+----------------------------------------------------------------------------------------------+
| \.\.                 | Creates a range {{ 'a'..'z' }} {{ 1..10 }}                                                   |
+----------------------+----------------------------------------------------------------------------------------------+
| is                   | Same as == (equals), also performs tests                                                     |
+----------------------+----------------------------------------------------------------------------------------------+
| in                   | To check if an expression is contained into other expressions if "a" in "abc"                |
+----------------------+----------------------------------------------------------------------------------------------+
| is not               | Same as != (not equals)                                                                      |
+----------------------+----------------------------------------------------------------------------------------------+
| 'a' ? 'b' : 'c'      | Ternary operator. The same as the PHP ternary operator                                       |
+----------------------+----------------------------------------------------------------------------------------------+
| ++                   | Increments a value                                                                           |
+----------------------+----------------------------------------------------------------------------------------------+
| --                   | Decrements a value                                                                           |
+----------------------+----------------------------------------------------------------------------------------------+

EOL;
        
        $test = $this->fixer->fix($rstString);
        $expected = <<<'EOL'
+-----------------+-------------------------------------------------------------------------------+
| Operator        | Description                                                                   |
+=================+===============================================================================+
| \~              | Concatenates both operands {{ "hello " \~ "world" }}                          |
+-----------------+-------------------------------------------------------------------------------+
| \|              | Applies a filter in the right operand to the left {{ "hello"\|uppercase }}    |
+-----------------+-------------------------------------------------------------------------------+
| \.\.            | Creates a range {{ 'a'..'z' }} {{ 1..10 }}                                    |
+-----------------+-------------------------------------------------------------------------------+
| is              | Same as == (equals), also performs tests                                      |
+-----------------+-------------------------------------------------------------------------------+
| in              | To check if an expression is contained into other expressions if "a" in "abc" |
+-----------------+-------------------------------------------------------------------------------+
| is not          | Same as != (not equals)                                                       |
+-----------------+-------------------------------------------------------------------------------+
| 'a' ? 'b' : 'c' | Ternary operator. The same as the PHP ternary operator                        |
+-----------------+-------------------------------------------------------------------------------+
| ++              | Increments a value                                                            |
+-----------------+-------------------------------------------------------------------------------+
| --              | Decrements a value                                                            |
+-----------------+-------------------------------------------------------------------------------+


EOL;
        $this->assertEquals($expected, $test);
    }
    
    public function test_fixWithMultibyteString()
    {
        $rstString = <<<'EOL'
+----------------------+------------------------------------------------------------------------------+
| Filter               | Description                                                                  |
+======================+==============================================================================+
| “this is a string” | Text between double quotes or single quotes are handled as strings           |
+----------------------+------------------------------------------------------------------------------+
| 100.25               | Numbers with a decimal part are handled as doubles/floats                    |
+----------------------+------------------------------------------------------------------------------+
| 100                  | Numbers without a decimal part are handled as integers                       |
+----------------------+------------------------------------------------------------------------------+
| false                | Constant "false" is the boolean false value                                  |
+----------------------+------------------------------------------------------------------------------+
| true                 | Constant "true" is the boolean true value                                    |
+----------------------+------------------------------------------------------------------------------+
| null                 | Constant "null" is the Null value                                            |
+----------------------+------------------------------------------------------------------------------+

EOL;
        
        $test = $this->fixer->fix($rstString);
        $expected = <<<'EOL'
+--------------------+--------------------------------------------------------------------+
| Filter             | Description                                                        |
+====================+====================================================================+
| “this is a string” | Text between double quotes or single quotes are handled as strings |
+--------------------+--------------------------------------------------------------------+
| 100.25             | Numbers with a decimal part are handled as doubles/floats          |
+--------------------+--------------------------------------------------------------------+
| 100                | Numbers without a decimal part are handled as integers             |
+--------------------+--------------------------------------------------------------------+
| false              | Constant "false" is the boolean false value                        |
+--------------------+--------------------------------------------------------------------+
| true               | Constant "true" is the boolean true value                          |
+--------------------+--------------------------------------------------------------------+
| null               | Constant "null" is the Null value                                  |
+--------------------+--------------------------------------------------------------------+


EOL;
        $this->assertEquals($expected, $test);
    }
}
