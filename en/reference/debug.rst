Debugging Applications
======================
PHP offers tools to debug applications with notices, warnings, errors and exceptions. The `Exception class`_ offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.

Despite being written in C, Phalcon runs methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.

Catching Exceptions
-------------------
Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block: 

.. code-block:: php

    <?php
    
    try {

        //... some phalcon code

    } catch(Phalcon_Exception $e) {
    
    }

Any exception thrown within the block is captured in the variable $e. A Phalcon_Exception_ extends the PHP `Exception class`_ and is used to understand whether the exception came from Phalcon or PHP itself. 

All exceptions generated by PHP are based on the `Exception class`_, and have at least the following elements:

.. code-block:: php

    <?php
    
    class Exception
    {
    
        /* Properties */
        protected string $message;
        protected int $code;
        protected string $file;
        protected int $line;

        /* Methods */
        public __construct ([ string $message = "" [, int $code = 0 [, Exception $previous = NULL ]]])
        final public string getMessage ( void )
        final public Exception getPrevious ( void )
        final public mixed getCode ( void )
        final public string getFile ( void )
        final public int getLine ( void )
        final public array getTrace ( void )
        final public string getTraceAsString ( void )
        public string __toString ( void )
        final private void __clone ( void )
    
    }

Retrieving information from Phalcon_Exception_ is the same as PHP's `Exception class`_: 

.. code-block:: php

    <?php
    
    try {
    
        //... app code ...
    
    } catch(Phalcon_Exception $e){
        echo get_class($e), ": ", $e->getMessage(), "\n"
        echo " File=", $e->getFile(), "\n";
        echo " Line=", $e->getLine(), "\n";
        echo $e->getTraceAsString();
    }

It's therefore easy to find which file and line of the application's code generated the exception, as well as the components involved in generating the exception.

.. code-block:: html

    Warning: mysqli_real_connect(): (28000/1045): Access denied for user 'test'@'localhost'
    (using password: YES)  in /var/www/test/app/controllers/SignupController.php on line 15
    
    Phalcon_Db_Exception: Connection to MySQL failed
    File=/var/www/test/app/controllers/SignupController.php
    Line=15
    #0 [internal function]: Phalcon_Db_Adapter_Mysql->connect(Object(Phalcon_Config))
    #1 [internal function]: Phalcon_Db_Adapter_Mysql->__construct(Object(Phalcon_Config))
    #2 [internal function]: Phalcon_Db::factory('Mysql', Object(Phalcon_Config))
    #3 [internal function]: Phalcon_Db_Pool::getConnection()
    #4 [internal function]: Phalcon_Model_Manager->getConnection()
    #5 [internal function]: Phalcon_Model_Manager->load('Users')
    #6 [internal function]: Phalcon_Model_Manager->isModel('Users')
    #7 [internal function]: Phalcon_Model_Manager->autoload('Users')
    #8 /var/www/test/app/controllers/SignupController.php(15): spl_autoload_call('Users')
    #9 [internal function]: SignupController->registerAction('')
    #10 [internal function]: call_user_func_array(Array, Array)
    #11 [internal function]: Phalcon_Dispatcher->dispatch(Object(Phalcon_Request),
     Object(Phalcon_Response), Object(Phalcon_View), Object(Phalcon_Model_Manager))
    #12 /var/www/test/public/index.php(22): Phalcon_Controller_Front->dispatchLoop()
    #13 {main}

As you can see from the above output the Phalcon's classes and methods are displayed just like any other component, and even show the parameters that were invoked in every call. The method `Exception::getTrace`_ provides additional information if needed.

Using XDebug
------------
XDebug_ is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects. 

Once you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages. The following example implements xdebug_print_function_stack to stop the execution and generate a backtrace: 

.. code-block:: php

    <?php
    
    class SignupController extends Phalcon_Controller
    {
    
        function indexAction()
        {

        }

        function registerAction()
        {

            // Request variables from html form
            $name  = $this->request->getPost("name", "string");
            $email = $this->request->getPost("email", "email");

            // Stop execution and show a backtrace
            return xdebug_print_function_stack("stop here!");

            $user        = new Users();
            $user->name  = $name;
            $user->email = $email;

            // Store and check for errors
            $user->save();
        }
    
    }

In this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:

.. code-block:: html

    Xdebug: stop here! in /var/www/test/app/controllers/SignupController.php on line 15
    
    Call Stack:
        0.0005     640344   1. {main}() /var/www/test/public/index.php:0
        0.0014     645952   2. Phalcon_Controller_Front->dispatchLoop()
     /var/www/test/public/index.php:26
        0.0044     709504   3. SignupController->registerAction('')
     /var/www/test/public/index.php:0
        0.0046     710224   4. xdebug_print_function_stack('stop here!')
     /var/www/test/app/controllers/SignupController.php:15
    
    
    Variables in local scope (#3):
      $email = 'thecure@hotmail.com'
      $name = 'robert smith'
      $user = *uninitialized*

Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the `XDebug documentation`_ for more information.

.. _Exception class: http://www.php.net/manual/en/language.exceptions.php
.. _Phalcon_Exception: ../api/Phalcon_Exception.html
.. _Exception::getTrace: http://www.php.net/manual/en/exception.gettrace.php
.. _XDebug: http://xdebug.org
.. _XDebug documentation: http://xdebug.org/docs