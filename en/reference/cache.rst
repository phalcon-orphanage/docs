Improving Performance with Cache
================================
Phalcon provides the Phalcon_Cache_ class allowing faster access to frequently used or already processed data. Phalcon_Cache_  is very similar to its Zend Framework counterpart but is written in C, achieving higher performance. This class uses an internal structure of frontend and backend components. Front-end components act as input sources or interfaces, while backend components offer storage options to the class.

When to implement cache?
------------------------
Although this component is very fast, implementing it in cases that is not needed could lead to loss of performance than gain. We recommend you check this cases before use cache: 

* You are making complex calculations that every time return the same result (changing infrequently)
* You are using a lot of helpers and the output generated is almost always the same
* You are accessing database data constantly and these data rarely change

*NOTE* Even after implementing the cache, you should check the hit ratio of your cache over a period of time. This can easily be done, especially in the case of Memcache or Apc, with the relevant tools that the backends provide.

Caching Output Fragments
------------------------
An output fragment is a piece of HTML or text that is cached as is and returned as is. The output is automatically captured from the ob_* functions or the PHP output so that it can be saved in the cache. The following example demonstrates such usage. It receives the output generated by PHP and stores it into a file. The contents of the file are refreshed every 172800 seconds (2 days). The implementation of this caching mechanism allows us to gain performance by not executing the helper Phalcon_Tag::linkTo call every time this piece of code is called. 

.. code-block:: php

    <?php
    
    // Cache the files for 2 days
    $frontendOptions = array(
        "lifetime" => 172800
    );
    
    // Set the cache file directory - important to keep the "/" at the end of
    // of the value for the folder
    $backendOptions = array(
        "cacheDir" => "../app/cache/"
    );
    
    // Create the component that will cache from the "Output" to a "File" backend
    $cache = Phalcon_Cache::factory(
        "Output", 
        "File",
        $frontendOptions, 
        $backendOptions
    );
    
    // Get/Set the cache file to ../app/cache/my-cache.html
    $content = $cache->start("my-cache.html");
    
    // If $content is null then the content will be generated for the cache
    if ($content === null) {
    
        //Print date and time
        echo date("r");

        //Generate a link to the sign-up action
        echo Phalcon_Tag::linkTo(
            array(
                "user/signup",
                "Sign Up",
                "class" => "signup-button"
            )
        );

        // Store the output into the cache file
        $cache->save();

    } else {
    
        // Echo the cached output
        echo $content;
    }

*NOTE* In the example above, our code remains the same, echoing output to the user as it has been doing before. Our cache component transparently captures that output and stores it in the cache file (when the cache is generated) or it sends it back to the user pre-compiled from a previous call, thus avoiding expensive operations.

Caching Arbitrary Data
----------------------
Caching just data is equally important for your application. Caching can reduce database load by reusing commonly used (but not updated) data, thus speeding up your application.

File Backend Example
^^^^^^^^^^^^^^^^^^^^
One of the caching adapters is 'File'. The only key area for this adapter is the location of where the cache files will be stored. This is controlled by the cacheDir option which *must* have a backslash at the end of it.

.. code-block:: php

    <?php
    
    // Cache the files for 2 days
    $frontendOptions = array(
        "lifetime" => 172800
    );
    
    // Set the cache file directory - important to keep the "/" at the end of
    // of the value for the folder
    $backendOptions = array(
        "cacheDir" => "../app/cache/"
    );
    
    // Create the component that will cache "Data" to a "File" backend
    $cache = Phalcon_Cache::factory(
        "Data", 
        "File",
        $frontendOptions, 
        $backendOptions
    );
    
    // Try to get cached records
    $cache_key = 'robots_order_id.cache';
    $robots    = $cache->get($cache_key);
    if ($robots === null) {
    
        // $robots is null due to cache expiration or data does not exist
        // Make the database call and populate the variable
        $robots = Robots::find(array("order" => "id"));
        
        // Store it in the cache
        $cache->save($cache_key, $robots);
    }
    
    // Use $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Memcached Backend Example
^^^^^^^^^^^^^^^^^^^^^^^^^
The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend. 

.. code-block:: php

    <?php
    
    //Cache data for one hour
    $frontendOptions = array(
        "lifetime" => 3600
    );
    
    // Memcached connection settings
    $backendOptions = array(
        "host" => "localhost",
        "port" => "11211"
    );
    
    // Create the component that will cache "Data" to a "Memcached" backend
    $cache = Phalcon_Cache::factory(
        "Data", 
        "Memcached",
        $frontendOptions, 
        $backendOptions
    );
    
    // Try to get cached records
    $cache_key = 'robots_order_id.cache';
    $robots    = $cache->get($cache_key);
    if ($robots === null) {
    
        // $robots is null due to cache expiration or data does not exist
        // Make the database call and populate the variable
        $robots = Robots::find(array("order" => "id"));
        
        // Store it in the cache
        $cache->save($cache_key, $robots);
    }
    
    // Use $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Querying the cache
------------------
The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null. 

.. code-block:: php

    <?php

    // Retrieve products by key "myProducts"
    $products = $cache->get("myProducts");

If you want to know which keys are stored in the cache you could call the queryKeys method:

.. code-block:: php

    <?php

    // Query all keys used in the cache
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
    	$data = $cache->get($key);
    	echo "Key=", $key, " Data=", $data;
    }
    
    //Query keys in the cache that begins with "my-prefix"
    $keys = $cache->queryKeys("my-prefix");


Deleting data from the cache
----------------------------
There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data has been stored with.

.. code-block:: php

    <?php

    // Delete an item with a specific key
    $cache->queryKeys("someKey");
    
    // Delete all items from the cache
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
    	$cache->delete($key);
    }


Frontend Adapters
-----------------
The available frontend adapters that are used as interfaces or input sources to the cache are:

+---------+--------------------------------------------------------------------------------------------------------------------------------+
| Adapter | Description                                                                                                                    | 
+=========+================================================================================================================================+
| Output  | Read input data from standard PHP output                                                                                       | 
+---------+--------------------------------------------------------------------------------------------------------------------------------+
| Data    | It's used to cache any kind of PHP data (big arrays, objects, text, etc). The data is serialized before stored in the backend. | 
+---------+--------------------------------------------------------------------------------------------------------------------------------+
| None    | It's used to cache any kind of PHP data without serializing them.                                                              | 
+---------+--------------------------------------------------------------------------------------------------------------------------------+


Backend Adapters
----------------
The backend adapters available to store cache data are:

+-----------+------------------------------------------------+-----------+---------------------+
| Adapter   | Description                                    | Info      | Required Extensions | 
+===========+================================================+===========+=====================+
| File      | Stores data to local plain files               |           |                     | 
+-----------+------------------------------------------------+-----------+---------------------+
| Memcached | Stores data to a memcached server              | Memcached | memcache            | 
+-----------+------------------------------------------------+-----------+---------------------+
| APC       | Stores data to the Alternative PHP Cache (APC) | APC       | APC                 | 
+-----------+------------------------------------------------+-----------+---------------------+


File Backend Options
^^^^^^^^^^^^^^^^^^^^
This backend will store cached content into files in the local server. The available options for this backend are: 

+----------+-----------------------------------------------------------+
| Option   | Description                                               | 
+==========+===========================================================+
| cacheDir | A writable directory on which cached files will be placed | 
+----------+-----------------------------------------------------------+


Memcached Backend Options
^^^^^^^^^^^^^^^^^^^^^^^^^
This backend will store cached content on a memcached server. The available options for this backend are: 

+------------+---------------------------------------------+
| Option     | Description                                 | 
+============+=============================================+
| host       | memcached host                              | 
+------------+---------------------------------------------+
| port       | memcached port                              | 
+------------+---------------------------------------------+
| persistent | create a persitent connection to memcached? | 
+------------+---------------------------------------------+


APC Backend Options
^^^^^^^^^^^^^^^^^^^
This backend will store cached content on Alternative PHP Cache (APC). This cache backend does not require any additional configuration options. 

.. _Phalcon_Cache: ../api/Phalcon_Cache.html