Models Meta-Data
================

Для ускорения разработки :doc:`Phalcon\\Mvc\\Model <../api/Phalcon_Mvc_Model>` позволяет запрашивать поля и ограничения из таблиц,
связанных с моделями. Для этого, :doc:`Phalcon\\Mvc\\Model\\MetaData <../api/Phalcon_Mvc_Model_MetaData>`
позволяет управлять и кэшировать метаданные таблицы.

Иногда это необходимо, чтобы получить атрибуты при работе с моделями.
Вы можете получить экземпляр мета-данных следующим образом:

.. code-block:: php

    <?php

    $robot      = new Robots();

    // Получить экземпляр Phalcon\Mvc\Model\Metadata
    $metaData   = $robot->getModelsMetaData();

    // Получить имена полей робота
    $attributes = $metaData->getAttributes($robot);
    print_r($attributes);

    // Получить типы данных полей робота
    $dataTypes = $metaData->getDataTypes($robot);
    print_r($dataTypes);

Кэширование мета-данных
-----------------------
После того как приложение переведено в рабочий режим, нет необходимости запрашивать мета-данные таблицы
из базы данных системы каждый раз, когда вы используете таблицу. Это может быть сделано кэшированием метаданных с использованием любого из следующих адаптеров:

+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
| Адаптер | Описание                                                                                                                                                                                                                                                                                                                                                         | API                                                                                       |
+=========+==================================================================================================================================================================================================================================================================================================================================================================+===========================================================================================+
| Memory  | Этот адаптер по умолчанию. В запросе кэшируются только мета-данные. Когда запрос выполнен, мета-данные будут представлены как часть обычной памяти запроса. Данный адаптер идеально подходит, когда приложение находится в стадии разработки, так как мета-данные обновляются в каждом запросе, содержащим новые и/или измененные поля.                          | :doc:`Phalcon\\Mvc\\Model\\MetaData\\Memory <../api/Phalcon_Mvc_Model_MetaData_Memory>`   |
+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
| Session | Этот адаптер сохраняет мета-данные в суперглобальной переменной $_SESSION. Данный адаптер рекомендуется использовать только тогда, когда приложение использует небольшое количество моделей. Мета-данные обновляются каждый раз, когда начинается новая сессия. Это требует использования session_start(), для начала сеанса перед использованием любых моделей. | :doc:`Phalcon\\Mvc\\Model\\MetaData\\Session <../api/Phalcon_Mvc_Model_MetaData_Session>` |
+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
| Apc     | Этот адаптер использует  `Alternative PHP Cache (APC)`_ , для хранения таблицы мета-данных. Вы можете задать время жизни мета-данных с параметрами. Это наиболее рекомендуемый способ хранения мета-данных, когда приложение находится в рабочем режиме.                                                                                                         | :doc:`Phalcon\\Mvc\\Model\\MetaData\\Apc <../api/Phalcon_Mvc_Model_MetaData_Apc>`         |
+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
| XCache  | Этот адаптер использует `XCache`_ для хранения таблицы мета-данных. Вы можете задать время жизни мета-данных с параметрами. Это наиболее рекомендуемый способ хранения мета-данных, когда приложение находится в рабочем режиме.                                                                                                                                 | :doc:`Phalcon\\Mvc\\Model\\MetaData\\Xcache <../api/Phalcon_Mvc_Model_MetaData_Xcache>`   |
+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
| Files   | Этот адаптер использует текстовые файлы для хранения мета-данных. При этом адаптере нагрузка на чтение диска увеличивается, но для доступа к базе данных снижается                                                                                                                                                                                               | :doc:`Phalcon\\Mvc\\Model\\MetaData\\Files <../api/Phalcon_Mvc_Model_MetaData_Files>`     |
+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+

Как и другие зависимости ORM, менеджер метаданных запрашивается из контейнера сервисов:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model\MetaData\Apc as ApcMetaData;

    $di['modelsMetadata'] = function () {

        // Создать менеджер мета-данных с APC
        $metaData = new ApcMetaData(
            array(
                "lifetime" => 86400,
                "prefix"   => "my-prefix"
            )
        );

        return $metaData;
    };

Стратегии мета-данных
---------------------
Как уже упоминалось выше, стратегией по умолчанию, для получения мета-данных модели является самоанализ базы данных.
В этой стратегии используется информационная схема, чтобы узнать поля таблицы, ее первичный ключ,
обнуляемые поля, типы данных и др.

Вы можете изменить самоанализ мета-данных по умолчанию следующим образом:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model\MetaData\Apc as ApcMetaData;

    $di['modelsMetadata'] = function () {

        // Создание экземпляра адаптера мета-данных
        $metaData = new ApcMetaData(
            array(
                "lifetime" => 86400,
                "prefix"   => "my-prefix"
            )
        );

        // Установка пользовательской стратегии интроспекции мета-данных
        $metaData->setStrategy(new MyIntrospectionStrategy());

        return $metaData;
    };

Стратегия самоанализа базы данных
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Эта стратегия не требует никакой настройки и неявно используется всеми адаптерами мета-данных.

Аннотации стратегии
^^^^^^^^^^^^^^^^^^^^
Эта стратегия позволяет использовать :doc:`аннотации <annotations>` для описания столбцов в модели:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model;

    class Robots extends Model
    {
        /**
         * @Primary
         * @Identity
         * @Column(type="integer", nullable=false)
         */
        public $id;

        /**
         * @Column(type="string", length=70, nullable=false)
         */
        public $name;

        /**
         * @Column(type="string", length=32, nullable=false)
         */
        public $type;

        /**
         * @Column(type="integer", nullable=false)
         */
        public $year;
    }

Аннотации должны быть помещены в свойствах, которые отображаются в колонках отображаемого источника.
Свойства без аннотации @Column обрабатываются как простые атрибуты класса.

Поддерживаются следующие аннотации:

+----------+-------------------------------------------------------+
| Имя      | Описание                                              |
+==========+=======================================================+
| Primary  | Отмечает поле как часть первичного ключа таблицы      |
+----------+-------------------------------------------------------+
| Identity | Поле как auto_increment/serial столбец                |
+----------+-------------------------------------------------------+
| Column   | Отмечает атрибут в качестве отображаемого столбца     |
+----------+-------------------------------------------------------+

Анотация @Column поддерживает следующие параметры:

+----------+-----------------------------------------------------------+
| Name     | Description                                               |
+==========+===========================================================+
| type     | Тип столбца (строки, целое число, десятичное, логический) |
+----------+-----------------------------------------------------------+
| length   | Длина столбца, если есть                                  |
+----------+-----------------------------------------------------------+
| nullable | Принимает ли столбец нулевые значения или нет             |
+----------+-----------------------------------------------------------+

Стратегии аннотации могут быть созданы таким образом:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model\MetaData\Apc as ApcMetaData;
    use Phalcon\Mvc\Model\MetaData\Strategy\Annotations as StrategyAnnotations;

    $di['modelsMetadata'] = function () {

        // Создание экземпляра адаптера мета-данных
        $metaData = new ApcMetaData(
            array(
                "lifetime" => 86400,
                "prefix"   => "my-prefix"
            )
        );

        // Установить пользовательский самоанализ мета-данных базы данных
        $metaData->setStrategy(new StrategyAnnotations());

        return $metaData;
    };

Установка Мета-Данных в ручную
------------------------------
Phalcon может получить метаданные для каждой модели автоматически, без того, чтобы разработчик установливал
их вручную, с помощью любой из стратегий самоанализа, представленных выше.

Разработчик также имеет возможность определить метаданные вручную. Эта стратегия перекрывает любые стратегии,
заданные в менеджере мета-данных. Новые колонки добавлены/изменены/удалены так же и в связанной таблице
должны быть добавлены/изменены/удалены, чтобы работать должным образом.

Следующий пример показывает, как определить мета-данные вручную:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model;
    use Phalcon\Db\Column;
    use Phalcon\Mvc\Model\MetaData;

    class Robots extends Model
    {
        public function metaData()
        {
            return array(
                // Столбцы в отображаемой таблице
                MetaData::MODELS_ATTRIBUTES => array(
                    'id', 'name', 'type', 'year'
                ),

                // Столбцы, являющиеся частью первичного ключа
                MetaData::MODELS_PRIMARY_KEY => array(
                    'id'
                ),

                // Столбцы, которые не являются частью первичного ключа
                MetaData::MODELS_NON_PRIMARY_KEY => array(
                    'name', 'type', 'year'
                ),

                // Столбцы, которые не позволяют нулевые значения
                MetaData::MODELS_NOT_NULL => array(
                    'id', 'name', 'type'
                ),

                // Все столбцы и их типы данных
                MetaData::MODELS_DATA_TYPES => array(
                    'id'   => Column::TYPE_INTEGER,
                    'name' => Column::TYPE_VARCHAR,
                    'type' => Column::TYPE_VARCHAR,
                    'year' => Column::TYPE_INTEGER
                ),

                // Стобцы, которые имеют числовые типы данных
                MetaData::MODELS_DATA_TYPES_NUMERIC => array(
                    'id'   => true,
                    'year' => true
                ),

                // Столбец идентификатора. Используйте логическое значение FALSE,
                // если модель не имеет столбца идентификации
                MetaData::MODELS_IDENTITY_COLUMN => 'id',

                // Как каждый столбец должен быть связан/слит
                MetaData::MODELS_DATA_TYPES_BIND => array(
                    'id'   => Column::BIND_PARAM_INT,
                    'name' => Column::BIND_PARAM_STR,
                    'type' => Column::BIND_PARAM_STR,
                    'year' => Column::BIND_PARAM_INT
                ),

                // Поля, которые должны быть проигнорированы в INSERT SQL инструкциях
                MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT => array(
                    'year' => true
                ),

                // Поля, которые должны быть проигнорированы в UPDATE SQL инструкциях
                MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE => array(
                    'year' => true
                ),

                // Значения по умолчанию для столбцов
                MetaData::MODELS_DEFAULT_VALUES => array(
                    'year' => '2015'
                ),

                // Поля, допускающие пустые строки
                MetaData::MODELS_EMPTY_STRING_VALUES => array(
                    'name' => true
                )
            );
        }
    }

.. _Alternative PHP Cache (APC): http://www.php.net/manual/en/book.apc.php
.. _XCache: http://xcache.lighttpd.net/
