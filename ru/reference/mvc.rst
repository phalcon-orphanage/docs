Архитектура MVC
===============

Phalcon поддерживает использование парадигмы объектно-ориентированного программирования и поддержку классов необходимых для разделения на Model, View,
Controller ( кратко MVC_).
Этот шаблон проектирования активно используется в других web и desktop платформах.

Преимущества MVC: 

* Отделение бизнес-логики от пользовательского интерфейса и работы с базой данных
* Позволяет распологать разные части в разных местах, что благоприятно сказывается на поддержке и обслуживании

Если вы выберите MVC, все запросы будут выполнятся по MVC_ архитектуре. Phalcon поддерживает MVC своими классами написаными на C, что позволяет работать с
повышенной производительностью. 


Модель ( Models )
-----------------
Модель отвечает за информацию (данные) приложения и правила управления этими данными. Модели в основном используется для управления соответствующей таблицой
базы данных и правил взаимодействия с ней. В большинстве случаев, каждая таблица в базе данных будет соответствовать одной модели в вашем приложении. Основная
часть бизнес-логики приложения будет сосредоточена в моделях. :doc:`Подробнее про модель <models>`

Представление ( Views )
-----------------------
Представление отвечает за пользовательский интерфейс вашего приложения. Чаще всего это HTML файлы с вставками PHP кода исключительно вывода данных. Этот слой
отвечает за вывод данных в веб-браузер или другой инструмент который обращается к вашему приложению. :doc:`Подробнее про представление <views>`

Контроллер ( Controllers )
--------------------------
Контроллеры обеспечивают обмен данными между моделью и представлением. Контроллеры отвечают за обработку входящих запросов от веб-браузера, запрашивают данные
у модели и передают эти данные в предсталвение для вывода. :doc:`Подробнее про контроллер <controllers>`

.. _MVC: http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
