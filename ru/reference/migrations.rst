Миграции базы данных
====================

Миграции это удобный для вас способ, структурировано и организовано изменять ваши базы данных.

.. highlights::

    **Важно:** Миграции доступны через :doc:`Phalcon Developer Tools <tools>`. Вам потребуется Phalcon версии не ниже 0.5.0 для использования инструментов разработчика. Также рекомендуется использовать PHP версии 5.4 или более поздней версии.

Часто при разработке необходимо вносить изменения уже на стадии релиза приложения, на боевом сервере. Некоторые из этих изменений могут касаться изменений в базе данных: новые столбцы, новые таблицы, удаление индексов и т.д.

При миграции создается набор классов, чтобы описать, как ваша база данных структурирована в данный момент. Эти классы могут использоваться для синхронизации структуры схемы в удаленных базах данных и подготовки вашей базы данных к работе с новыми изменениями, которые реализует ваше приложение. Миграции описывают эти изменения с использованием простого PHP.

.. raw:: html

    <div align="center">
        <iframe src="https://player.vimeo.com/video/41381817" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
    </div>

Дампинг схемы
-------------
:doc:`Phalcon Developer Tools <tools>` предоставляет скрипт для управления миграциями (генерация, запуск и откат).

Доступные опции для генерации миграций:

.. figure:: ../_static/img/migrations-1.png
   :align: center

Запуск скрипта без параметров делает простой дамп каждого объекта (таблиц и представлений) из базы данных в классы миграции.

Каждая миграция имеет идентификатор версии связанный с ним. Номер версии позволяет нам определить, является ли миграция старше или новее текущей версии нашей базы данных. Версии также сообщают Phalcon о рабочем состоянии при выполнении миграции.

.. figure:: ../_static/img/migrations-2.png
   :align: center

При генерации миграций, инструкции отображаются в консоли для описания различных этапов миграции и времени выполнения этих операторов. В конце концов, версия миграция будет создана.

По умолчанию :doc:`Phalcon Developer Tools <tools>` использует директорию *app/migrations* для дампа файлов миграции. Вы можете изменить расположение, установив один из параметров по генерации скрипта. Каждая таблица в базе данных имеет свой соответствующий класс, созданный в отдельном файле директории, ссылающейся на ее версию.

.. figure:: ../_static/img/migrations-3.png
   :align: center

Структура класса Migration
--------------------------
Каждый файл содержит уникальный класс, который расширяет :code:`Phalcon\Mvc\Model\Migration`. Эти классы обычно имеют два метода: :code:`up()` и :code:`down()`. :code:`up()` выполняет миграцию, а :code:`down()` откатывает ее.

Метод :code:`up()` также содержит *магический* метод :code:`morphTable()`. Магия начинается тогда, когда он распознает изменения, требующие синхронизации фактической таблицы в базе данных, приведенные выше.

.. code-block:: php

    <?php

    use Phalcon\Db\Column as Column;
    use Phalcon\Db\Index as Index;
    use Phalcon\Db\Reference as Reference;
    use Phalcon\Mvc\Model\Migration;

    class ProductsMigration_100 extends Migration
    {
        public function up()
        {
            $this->morphTable(
                "products",
                [
                    "columns" => [
                        new Column(
                            "id",
                            [
                                "type"          => Column::TYPE_INTEGER,
                                "size"          => 10,
                                "unsigned"      => true,
                                "notNull"       => true,
                                "autoIncrement" => true,
                                "first"         => true,
                            ]
                        ),
                        new Column(
                            "product_types_id",
                            [
                                "type"     => Column::TYPE_INTEGER,
                                "size"     => 10,
                                "unsigned" => true,
                                "notNull"  => true,
                                "after"    => "id",
                            ]
                        ),
                        new Column(
                            "name",
                            [
                                "type"    => Column::TYPE_VARCHAR,
                                "size"    => 70,
                                "notNull" => true,
                                "after"   => "product_types_id",
                            ]
                        ),
                        new Column(
                            "price",
                            [
                                "type"    => Column::TYPE_DECIMAL,
                                "size"    => 16,
                                "scale"   => 2,
                                "notNull" => true,
                                "after"   => "name",
                            ]
                        ),
                    ],
                    "indexes" => [
                        new Index(
                            "PRIMARY",
                            [
                                "id",
                            ]
                        ),
                        new Index(
                            "product_types_id",
                            [
                                "product_types_id",
                            ],
                        ),
                    ],
                    "references" => [
                        new Reference(
                            "products_ibfk_1",
                            [
                                "referencedSchema"  => "invo",
                                "referencedTable"   => "product_types",
                                "columns"           => ["product_types_id"],
                                "referencedColumns" => ["id"],
                            ]
                        ),
                    ],
                    "options" => [
                        "TABLE_TYPE"      => "BASE TABLE",
                        "ENGINE"          => "InnoDB",
                        "TABLE_COLLATION" => "utf8_general_ci",
                    ],
                ]
            );
        }
    }

Класс называется "ProductsMigration_100". Суфикс 100 указывает на версию 1.0.0. morphTable() принимает ассоциативный массив с 4 возможными типами данных:

+--------------+----------------------------------------------------------------------------------------------------------------------------------------+-------------+
| Индекс       | Описание                                                                                                                               | Опционально |
+==============+========================================================================================================================================+=============+
| "columns"    | Массив с набором столбцов таблицы.                                                                                                     | Нет         |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "indexes"    | Массив с набором индексов таблицы.                                                                                                     | Да          |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "references" | Массив с набором ссылок на таблицы (внешние ключи).                                                                                    | Да          |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "options"    | Массив с набором опций для создания таблицы. Эти опции зачастую связаны с системой базы данных, в которой миграция был сгенерирована.  | Да          |
+--------------+----------------------------------------------------------------------------------------------------------------------------------------+-------------+

Определение столбцов
^^^^^^^^^^^^^^^^^^^^
:doc:`Phalcon\\Db\\Column <../api/Phalcon_Db_Column>` используется для определения столбцов таблицы. Этот класс инкапсулирует возможности связанные с конкретным столбцом. Его конструктор принимает в качестве первого параметра имя столбца и массив, описывающий колонки. Доступны следующие опции при описании столбцов:

+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| Опция           | Описание                                                                                                                                   | Опционально |
+=================+============================================================================================================================================+=============+
| "type"          | Тип столбца. :doc:`Phalcon_Db_Column <../api/Phalcon_Db_Column>` должен быть константой (смотрите ниже)                                    | Нет         |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "size"          | Некоторые типы столбцов, как VARCHAR или INTEGER  могут иметь определенный размер                                                          | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "scale"         | Столбцы DECIMAL или NUMBER могут иметь разрешение точности, чтобы указать до какого десятичного знака необходимо хранить значение.         | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "unsigned"      | INTEGER столбцы могут быть знаковыми или беззнаковыми. Эта опция не распространяется на другие типы столбцов                               | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "notNull"       | Столбец может хранить нулевые значения?                                                                                                    | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "autoIncrement" | С помощью этого атрибута столбец заполняется автоматически с автоинкрементным целым. Только один столбец в таблице может иметь этот атрибут| Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "first"         | Столбец должны быть расположены на первые позиции в порядке столбцов                                                                       | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+
| "after"         | Колонка должна быть помещена после указанного столбца                                                                                      | Да          |
+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------+-------------+

Миграции базы данных поддерживают следующие типы столбцов базы данных:

* :code:`Phalcon\Db\Column::TYPE_INTEGER`
* :code:`Phalcon\Db\Column::TYPE_VARCHAR`
* :code:`Phalcon\Db\Column::TYPE_CHAR`
* :code:`Phalcon\Db\Column::TYPE_DATE`
* :code:`Phalcon\Db\Column::TYPE_DATETIME`
* :code:`Phalcon\Db\Column::TYPE_TIMESTAMP`
* :code:`Phalcon\Db\Column::TYPE_DECIMAL`
* :code:`Phalcon\Db\Column::TYPE_TEXT`
* :code:`Phalcon\Db\Column::TYPE_BOOLEAN`
* :code:`Phalcon\Db\Column::TYPE_FLOAT`
* :code:`Phalcon\Db\Column::TYPE_DOUBLE`
* :code:`Phalcon\Db\Column::TYPE_TINYBLOB`
* :code:`Phalcon\Db\Column::TYPE_BLOB`
* :code:`Phalcon\Db\Column::TYPE_MEDIUMBLOB`
* :code:`Phalcon\Db\Column::TYPE_LONGBLOB`
* :code:`Phalcon\Db\Column::TYPE_JSON`
* :code:`Phalcon\Db\Column::TYPE_JSONB`
* :code:`Phalcon\Db\Column::TYPE_BIGINTEGER`

Определение индексов
^^^^^^^^^^^^^^^^^^^^
:doc:`Phalcon\\Db\\Index <../api/Phalcon_Db_Index>` определяет индексы таблицы. Для создания индекса требуется определить его имя и список столбцов. Заметим, что если любой индекс имеет название PRIMARY, то Phalcon создаст индекс первичного ключа в этой таблице.

Определение внешних ключей
^^^^^^^^^^^^^^^^^^^^^^^^^^
:doc:`Phalcon\\Db\\Reference <../api/Phalcon_Db_Reference>` определяет ссылки на таблицы (также называемые внешними ключами). Следующие опции могут быть использованы для определения внешних ключей:

+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| Индекс              | Описание                                                                                                         | Опционально | Реализовано      |
+=====================+==================================================================================================================+=============+==================+
| "referencedTable"   | Говорит само за себя. Содержит имя ссылочной таблицы.                                                            | Нет         | Везде            |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| "columns"           | Массив с названием столбцов в таблице, которые имеют ссылки.                                                     | Нет         | Везде            |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| "referencedColumns" | Массив с именем столбцов в указанной таблице.                                                                    | Нет         | Везде            |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| "referencedSchema"  | Ссылочная таблица может находится в другой схеме или базе данных. Эта опция позволяет вам определить это.        | Да          | Везде            |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| "onDelete"          | Если внешняя запись удалена, выполняет это действие с локальной записью (записями).                              | Да          | MySQL PostgreSQL |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+
| "onUpdate"          | Если внешняя запись удалена, выполняет это действие с локальной записью (записями).                              | Да          | MySQL PostgreSQL |
+---------------------+------------------------------------------------------------------------------------------------------------------+-------------+------------------+

Запись миграций
---------------
Миграции предназначены не только для изменения структуры таблицы. Миграция является обычным классом PHP, так что вы не ограничены этими функциями. Например, после добавления столбца можно написать код для установки значений этого столбца для существующих записей. Для более подробной информации и примеров отдельных методов, проверьте :doc:`database component <db>`.

.. code-block:: php

    <?php

    use Phalcon\Mvc\Model\Migration;

    class ProductsMigration_100 extends Migration
    {
        public function up()
        {
            // ...

            self::$_connection->insert(
                "products",
                [
                    "Малабарский шпинат",
                    14.50,
                ],
                [
                    "name",
                    "price",
                ]
            );
        }
    }

Запуск миграций
---------------
Как только сгенерированные миграции загружены на целевой сервер, вы можете легко запустить их, как показано в следующем примере:

.. figure:: ../_static/img/migrations-4.png
   :align: center

.. figure:: ../_static/img/migrations-5.png
   :align: center

В зависимости от того, насколько сильно устаревшей является база данных по миграции, Phalcon может запускать несколько версий миграции в одном процессе миграции. Если указать целевую версию, Phalcon будет запускать нужные миграций пока не достигнет указанной версии.
