Логирование
===========
:doc:`Phalcon\\Logger <../api/Phalcon_Logger>` является компонентом для обеспечения ведения логов в приложении. Он позволяет
вести логирование разных типов с использованием различных адаптеров. Он также предлагает регистрацию транзакций, параметров конфигурации, различных форматов и фильтров.
Вы можете использовать :doc:`Phalcon\\Logger <../api/Phalcon_Logger>` для логирования всех операций, отладки процессов и отслеживания работы приложения.

Адаптеры
--------
Этот компонент позволяет использовать адаптеры для хранения журнала сообщений. Использование адаптеров обеспечивает общий интерфейс для регистрации
время переключения интерфейсов при необходимости. Реализованные адаптеры:

+---------+-------------------------------+--------------------------------------------------------------------------------+
| Адаптер | Описание                      | API                                                                            |
+=========+===============================+================================================================================+
| File    | Логирование в текстовой файл  | :doc:`Phalcon\\Logger\\Adapter\\File <../api/Phalcon_Logger_Adapter_File>`     |
+---------+-------------------------------+--------------------------------------------------------------------------------+
| Stream  | Логирование в PHP поток       | :doc:`Phalcon\\Logger\\Adapter\\Stream <../api/Phalcon_Logger_Adapter_Stream>` |
+---------+-------------------------------+--------------------------------------------------------------------------------+
| Syslog  | Логирование в системный журнал| :doc:`Phalcon\\Logger\\Adapter\\Syslog <../api/Phalcon_Logger_Adapter_Syslog>` |
+---------+-------------------------------+--------------------------------------------------------------------------------+

Создание журнала
----------------
В приведенном ниже примере показано, как создать журнал и добавить в него запись:

.. code-block:: php

    <?php

    use Phalcon\Logger\Adapter\File as FileAdapter;

    $logger = new FileAdapter("app/logs/test.log");
    $logger->log("Это сообщение");
    $logger->log("А это уже сообщение об ошибке", \Phalcon\Logger::ERROR);
    $logger->error("Это тоже про ошибку");

Результат кода:

.. code-block:: php

    [Tue, 17 Apr 12 22:09:02 -0500][DEBUG] Это сообщение
    [Tue, 17 Apr 12 22:09:02 -0500][ERROR] А это уже сообщение об ошибке
    [Tue, 17 Apr 12 22:09:02 -0500][ERROR] Это тоже про ошибку

Транзакции
----------
Запись данных в адаптер т.е. в файл (файловая система) всегда является 'дорогостоящей' операцией с точки зрения производительности.
Для решения этой задачи, можно использовать транзакции при логировании. Транзакции временно хранят записи в памяти, а затем переносят их
соответствующий адаптер (в данном случае в файл).

.. code-block:: php

    <?php

    use Phalcon\Logger\Adapter\File as FileAdapter;

    // Создание логгера
    $logger = new FileAdapter("app/logs/test.log");

    // Начало транзакции
    $logger->begin();

    // Добавление записей
    $logger->alert("This is an alert");
    $logger->error("This is another error");

    // Размещение записей в файл
    $logger->commit();

Одновременное логирование нескольких обработчиков
-------------------------------------------------
:doc:`Phalcon\\Logger <../api/Phalcon_Logger>` позволяет отправку сообщений на несколько обработчиков одним вызовом:

.. code-block:: php

    <?php

    use Phalcon\Logger,
        Phalcon\Logger\Multiple as MultipleStream,
        Phalcon\Logger\Adapter\File as FileAdapter,
        Phalcon\Logger\Adapter\Stream as StreamAdapter;

    $logger = new MultipleStream();

    $logger->push(new FileAdapter('test.log'));
    $logger->push(new StreamAdapter('php://stdout'));

    $logger->log("This is a message");
    $logger->log("This is an error", Logger::ERROR);
    $logger->error("This is another error");

Сообщения отправляются на обработчик в порядке их регистраций.

Форматирование сообщений
------------------------
Данный компонент позволяет использовать 'formatters' для форматирования сообщений перед тем как их отправить на бэкенд.
Реализованные следующие форматеры:

+---------+--------------------------------------------------+------------------------------------------------------------------------------------+
| Адаптер | Описание                                         | API                                                                                |
+=========+==================================================+====================================================================================+
| Line    | Оформление записей одной строкой                 | :doc:`Phalcon\\Logger\\Formatter\\Line <../api/Phalcon_Logger_Formatter_Line>`     |
+---------+--------------------------------------------------+------------------------------------------------------------------------------------+
| Json    | Подготовка записей для преобразoвание в JSON     | :doc:`Phalcon\\Logger\\Formatter\\Json <../api/Phalcon_Logger_Formatter_Json>`     |
+---------+--------------------------------------------------+------------------------------------------------------------------------------------+
| Syslog  | Подготовка записи для отправки в системный журнал| :doc:`Phalcon\\Logger\\Formatter\\Syslog <../api/Phalcon_Logger_Formatter_Syslog>` |
+---------+--------------------------------------------------+------------------------------------------------------------------------------------+

Линейный Оформитель
^^^^^^^^^^^^^^^^^^^
Оформление записей в одну строку. Формат по умолчанию:

[%date%][%type%] %message%

Вы можете изменить вид сообщений по умолчанию используя setFormat(), этот метод позволяет менять формат конечных сообщений, определяя свой ​​собственный.
Поддерживаются такие переменные:

+-----------+------------------------------------------+
| Переменные| Описание                                 |
+===========+==========================================+
| %message% | Запись, которая будет внесена            |
+-----------+------------------------------------------+
| %date%    | Дата добавления записи в журнал          |
+-----------+------------------------------------------+
| %type%    | Тип записи заглавными буквами            |
+-----------+------------------------------------------+

В приведенном примере показано, как изменить формат сообщений в логе:

.. code-block:: php

    <?php

    use Phalcon\Logger\Formatter\Line as LineFormatter;

    // Установка формата сообщений в логе
    $formatter = new LineFormatter("%date% - %message%");
    $logger->setFormatter($formatter);

Реализация собственного оформителя
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания оформителя необходимо реализовать интерфейс :doc:`Phalcon\\Logger\\FormatterInterface <../api/Phalcon_Logger_FormatterInterface>` или расширить существующий.

Адаптеры
--------
В Phalcon есть несколько реализованных адаптеров логирования, примеры ниже показывают, как их можно использовать:

Stream Logger
^^^^^^^^^^^^^
Записывает сообщения в зарегистрированные потоки PHP. Поддерживаемые протоколы перечислены `здесь <http://php.net/manual/en/wrappers.php>`_:

.. code-block:: php

    <?php

    use Phalcon\Logger\Adapter\Stream as StreamAdapter;

    // Открывает поток с использованием zlib компрессии
    $logger = new StreamAdapter("compress.zlib://week.log.gz");

    // Пишет сообщения в stderr
    $logger = new StreamAdapter("php://stderr");

File Logger
^^^^^^^^^^^
Этот регистратор использует обычные файлы для ведения логов всех типов. По умолчанию все файлы регистратор открывает в
режиме добавления записей, размещая новую запись в конце файла. Если файл не существует, регистратор попытается его создать. Вы можете
изменить этот режим, передавая дополнительную опцию в конструктор:

.. code-block:: php

    <?php

    use Phalcon\Logger\Adapter\File as FileAdapter;

    // Создание регистратора с поддержкой записи
    $logger = new FileAdapter("app/logs/test.log", array(
        'mode' => 'w'
    ));

Syslog Logger
^^^^^^^^^^^^^
Этот регистратор отправляет сообщения в системный журнал. Работа такого журнала может варьироваться от одной операционной системы к другой.

.. code-block:: php

    <?php

    use Phalcon\Logger\Adapter\Syslog as SyslogAdapter;

    // Основное использование
    $logger = new SyslogAdapter(null);

    // Установка ident/mode/facility
    $logger = new SyslogAdapter("ident-name", array(
        'option' => LOG_NDELAY,
        'facility' => LOG_MAIL
    ));

Реализация собственных адаптеров
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания адаптера необходимо реализовать интерфейс :doc:`Phalcon\\Logger\\AdapterInterface <../api/Phalcon_Logger_AdapterInterface>` или расширить существующий адаптер.
