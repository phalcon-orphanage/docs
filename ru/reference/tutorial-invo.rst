Урок 2: Введение в INVO
=======================

Во втором уроке мы создадим более сложное приложение с помощью Phalcon.
INVO - это одно из приложений, которое мы создали в качестве примера. INVO - это небольшой сайт, который позволяет своим пользователям
создавать счета и выполнять другие задачи для управления своими клиентами и продуктами. Полный код проекта можно клонировать из Github_.

INVO использует `Bootstrap`_ в качестве фронтенд-фреймворка. Хоть приложение и не генерирует
счета, оно служит для понимая того, как работает фреймворк.

Структура проекта
-----------------
После того как вы склонируете проект в корневой каталог вы увидите следующую структуру:

.. code-block:: bash

    invo/
        app/
            config/
            controllers/
            forms/
            library/
            logs/
            models/
            plugins/
            views/
        cache/
            volt/
        docs/
        public/
            css/
            fonts/
            js/
        schemas/

Как вы уже знаете, Phalcon не навязывает определенную структуру файлов и каталогов для разработки приложений. Этот проект
обеспечивает простую стуктуру MVC и корневой каталог public.

После того как вы откроете приложение в браузере http://localhost/invo вы увидите что-то вроде этого:

.. figure:: ../_static/img/invo-1.png
   :align: center

Приложение состоит из двух частей. Фронтенд - внешняя часть, где посетители могут получить информацию
об INVO и запросить контактные данные. И бэкенд - административную панель, где
зарегистрированный пользователь может управлять своими продуктами и клиентами.

Маршрутизация
-------------
INVO использует стандартный маршрутизатор, основанный на встроенном :doc:`компоненте Router <routing>`. Эти маршруты соответствуют следующим
шаблонам: /:controller/:action/:params. Это значит, что первая часть URI - контроллер, вторая -
название действия и остальные параметры.

Маршрут /session/register выполняет контроллер SessionController и его действие registerAction.

Конфигурация
------------
INVO имеет конфигурационный файл, который устанавливает общие параметры приложения. Этот файл расположен в
app/config/config.ini и загружается в самом начале bootstrap-файла (public/index.php):

.. code-block:: php

    <?php

    use Phalcon\Config\Adapter\Ini as ConfigIni;

    // ...

    // Читаем конфигурацию
    $config = new ConfigIni(
        APP_PATH . "app/config/config.ini"
    );

:doc:`Phalcon\\Config <config>` позволяет нам манипулировать файлами в объектно-ориентированном стиле.
В данном примере мы используем ini-файл, однако, поддерживаются также и другие адаптеры
конфигурационных файлов. Файл конфигурации содержит следующие настройки:

.. code-block:: ini

    [database]
    host     = localhost
    username = root
    password = secret
    name     = invo

    [application]
    controllersDir = app/controllers/
    modelsDir      = app/models/
    viewsDir       = app/views/
    pluginsDir     = app/plugins/
    formsDir       = app/forms/
    libraryDir     = app/library/
    baseUri        = /invo/

Phalcon не имеет каких-либо предопределенных соглашений о конфигурациях. Разделы помогут нам организовать необходимые параметры.
В этом файле две секции, которые мы будем использовать позже: "application" и "database".

Автозагрузчики
--------------
Второе, на что следует обратить внимание в bootstrap-файле (public/index.php) - это автозагрузчик:

.. code-block:: php

    <?php

    /**
     * Конфигурация автозагрузчика
     */
    require APP_PATH . "app/config/loader.php";

Автозагрузчик регистрирует набор каталогов, в которых приложение будет искать
необходимые классы.

.. code-block:: php

    <?php

    $loader = new Phalcon\Loader();

    // Регистрируем набор каталогов, полученных из конфигурационного файла
    $loader->registerDirs(
        [
            APP_PATH . $config->application->controllersDir,
            APP_PATH . $config->application->pluginsDir,
            APP_PATH . $config->application->libraryDir,
            APP_PATH . $config->application->modelsDir,
            APP_PATH . $config->application->formsDir,
        ]
    );

    $loader->register();

Обратите внимание на регистрацию каталогов в файле конфигураций. Единственная
директория, которая не была зарегистрирована с помощью автозагрузчика, - это viewsDir, потому что она не содержит классов, только HTML + PHP файлы.
Также заметьте, что мы используем константу APP_PATH, эта константа определена в bootstrap-файле
(public/index.php), чтобы позволить нам ссылаться на корень нашего проекта:

.. code-block:: php

    <?php

    // ...

    define(
        "APP_PATH",
        realpath("..") . "/"
    );

Регистрация сервисов
--------------------
Еще один файл, который используется в bootstrap, - это (app/config/services.php). Данный файл позволяет
нам организовать сервисы, которые используются в INVO.

.. code-block:: php

    <?php

    /**
     * Загружаем сервисы приложения
     */
    require APP_PATH . "app/config/services.php";

Регистрация сервиса достигается также, как и в предыдущем уроке, используя замыкание для ленивой загрузки
требуемых компонентов:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Url as UrlProvider;

    // ...

    /**
     * Компонент URL используется для генерации различных URL'ов в приложении
     */
    $di->set(
        "url",
        function () use ($config) {
            $url = new UrlProvider();

            $url->setBaseUri(
                $config->application->baseUri
            );

            return $url;
        }
    );

Позже мы подробнее обсудим этот файл.

Обработка запроса
-----------------
Пойдем дальше, в конце файла запрос окончательно обрабатывается с помощью :doc:`Phalcon\\Mvc\\Application <../api/Phalcon_Mvc_Application>`,
этот класс инициализирует и выполняет все, что нужно для работы приложения:

.. code-block:: php

    <?php

    use Phalcon\Mvc\Application;

    // ...

    $application = new Application($di);

    $response = $application->handle();

    $response->send();

Внедрение зависимостей
----------------------
Посмотрите на первую строку кода предыдущего блока, конструктор класса Application принимает переменную
:code:`$di` в качестве аргумента. Каков смысл этой переменной? Phalcon - слабо-связанный фреймворк,
так что нам нужен компонент, который действует как клей, чтобы все работало вместе. Этот компонент - :doc:`Phalcon\\Di <../api/Phalcon_Di>`.
Этот компонент является контейнером для сервисов, который так-же осуществляет внедрение зависимостей и локацию служб, инициализируя компоненты приложения по мере необходимости.

Есть много способов регистрации сервисов в контейнере. В INVO большинство сервисов были зарегистрированы с использованием
анонимных функций/замыканий. Благодаря этому, объекты создаются в ленивом стиле, снижая ресурсы, необходимые
приложению.

Например, в следующем фрагменте регистрируется сервис сессии. Анонимная функция будет
вызвана только тогда, когда приложение требует доступа к данным сессии:

.. code-block:: php

    <?php

    use Phalcon\Session\Adapter\Files as Session;

    // ...

    // Начинаем сессию при первом запросе сервиса каким-либо компонентом
    $di->set(
        "session",
        function () {
            $session = new Session();

            $session->start();

            return $session;
        }
    );

Здесь мы можем менять адаптер, выполнять дополнительную инициализацию и многое другое. Обратите внимание, что сервис
был зарегистрирован с именем "session". Это соглашение позволит фреймворку идентифицировать активный
сервис в контейнере.

Запрос может использовать множество сервисов, и регистрация каждого из них по отдельности может быть трудоемкой задачей. По этой причине,
фреймворк предоставляет вариант :doc:`Phalcon\\Di <../api/Phalcon_Di>`, именуемый :doc:`Phalcon\\Di\\FactoryDefault <../api/Phalcon_Di_FactoryDefault>`, задачей которого является регистрация
всех сервисов, необходимых фреймворку.

.. code-block:: php

    <?php

    use Phalcon\Di\FactoryDefault;

    // ...

    // FactoryDefault обеспечивает автоматическую регистрацию
    // полного набора сервисов, необходимых фреймворку
    $di = new FactoryDefault();

Он регистрирует большинство сервисов, предусмотренных фреймворком как стандартные. Если нам надо переопределить
какой-либо из сервисов, мы можем просто определить его снова, как делали выше с сервисом "session" или "url".
Это и есть причина существования переменной :code:`$di`.

В следующей главе мы увидим, как в INVO реализованы аутентификация и авторизация.

.. _Github: https://github.com/phalcon/invo
.. _Bootstrap: http://getbootstrap.com/
