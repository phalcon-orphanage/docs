Улучшение производительности с помощью Кэширования
==================================================
Phalcon предоставляет класс :doc:`Phalcon\\Cache <cache>`, дающий быстрый доступ к часто используемым или уже сгенерированным данным.
:doc:`Phalcon\\Cache <cache>` написан на языке C, поэтому он предоставляет высокую производительность и пониженный расход ресурсов.
Этот класс использует два компонента: frontend и backend. Frontend компонент является входным источником или интерфейсом, в то время
как backend предоставляет опции хранения данных.

Где применять кэширование?
--------------------------
Несмотря на то, что этот компонент очень быстрый, его использование в случаях, где он не нужен, может привести к потери
производительности. Мы рекомендуем проверить эти ситуации, прежде, чем использовать кэширование:

* Вы делаете сложные расчеты, которые каждый раз возвращают один и тот же результат (или результат редко изменяется)
* Вы используете много помощников (helper), и результат генерации почти всегда одинаковый
* Получение данных из БД, которые редко меняются

.. highlights::

    *Примечание* Даже, после создания кэширования вы должны проверить скорость выполнения. Это можно легко проверить,
    особенно используя Memcache или Apc, с помощью соответствующих инструментов, предоставляемыми этими приложениями.

Поведение системы кэширования
-----------------------------
Процесс кэширования делится на две части:

* **Frontend**: Эта часть отвечает за проверку времени жизни ключа и выполняет дополнительные преобразования над данными, до операции сохранения или извлечения их из backend
* **Backend**: Эта часть отвечает за коммуникацию, запись/чтение данных по запросу frontend

Кэширование выходных фрагментов
-------------------------------
Выходные фрагменты - это части HTML или текста, которые кэшируются "как есть" и возвращаются "как есть". Выходные данные автоматически
захватываются из ob_* функции или из выходного потока PHP и сохраняются в кэш.  Следующий пример демонстрирует такое использование.
Он получает сгенерированные выходные данные и сохраняет их в файл. Кэш обновляется каждые 172800 секунд (2 дня).

Реализация этого механизма позволяет нам повысить производительность за счет исключения работы помощника Phalcon\\Tag::linkTo,
который вызывается каждый раз в этом участке кода.

.. code-block:: php

    <?php

    // Создание frontend для выходных данных. Кэшируем файлы на 2 дня
    $frontCache = new Phalcon\Cache\Frontend\Output(array(
        "lifetime" => 172800
    ));

    // Создаем компонент, который будем кэшировать из "Выходных данных" в "Файл"
    // Устанавливаем папку для кэшируемых файлов - важно указать символ "/" в конце пути
    $cache = new Phalcon\Cache\Backend\File($frontCache, array(
        "cacheDir" => "../app/cache/"
    ));

    // Получить/Создать кэшируемый файл ../app/cache/my-cache.html
    $content = $cache->start("my-cache.html");

    // Если $content является значением NULL, значит данных в кэше нет и их надо сгенерировать
    if ($content === null) {

        // Выводим дату и время
        echo date("r");

        // Генерируем ссылку на "регистрацию"
        echo Phalcon\Tag::linkTo(
            array(
                "user/signup",
                "Sign Up",
                "class" => "signup-button"
            )
        );

        // Сохраняем вывод в кэш
        $cache->save();

    } else {

        // Ввыводим кэшируемые данные
        echo $content;
    }

*Примечание* В этом примере наш код остается таким же и выводит те же данные пользователю. Наш компонент кэширования
незаметно перехватывает вывод и сохраняет его в кэшируемый файл (когда кэш сгенерирован) или он отправляет уже готовые данные обратно
к пользователю, а это естественно позволяет экономить на выполнении операций.

Кэширование произвольных данных
-------------------------------
Кэширование различных данных, не менее важно для вашего приложения. Кэширование может уменьшить нагрузку базы данных за счет
повторного использования сгенерированных данных (но не обновленных), что и увеличивает скорость выполнения вашего приложения.

Пример файлового Backend
^^^^^^^^^^^^^^^^^^^^^^^^
Существует файловый адаптер кэширования. Единственным параметром для него является место, где будут храниться закэшированные
файлы. Этот параметр называется "cacheDir", в него передается путь к месту хранения, *важно* добавлять в конце символ "/".

.. code-block:: php

    <?php

    // Кэшируем данные на 2 дня
    $frontCache = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 172800
    ));

    // Создаем компонент, который будем кэшировать из "Выходных данных" в "Файл"
    // Устанавливаем папку для кэшируемых файлов - важно сохранить символ "/" в конце пути
    $cache = new Phalcon\Cache\Backend\File($frontCache, array(
        "cacheDir" => "../app/cache/"
    ));

    // Пробуем получить закэшированные записи
    $cacheKey = 'robots_order_id.cache';
    $robots    = $cache->get($cacheKey);
    if ($robots === null) {

        // $robots может иметь значение NULL из-за того, что истекла годность хранения или данных просто не существует
        // Получим данные из БД
        $robots = Robots::find(array("order" => "id"));

        // Сохраняем их в кэше
        $cache->save($cacheKey, $robots);
    }

    // Используем $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Пример использования Memcached в качестве Backend
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для этого нам достаточно немного изменить вышестоящий пример. В частности изменится конфигурация.

.. code-block:: php

    <?php

    // Кэшируем данные на 1 час
    $frontCache = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 3600
    ));

    // Создаем компонент, который будет кэшировать данные в Memcache
    // Настройки подключения к Memcache
    $cache = new Phalcon\Cache\Backend\Memcache($frontCache, array(
        "host" => "localhost",
        "port" => "11211"
    ));

    // Пробуем получить закэшированные записи
    $cacheKey = 'robots_order_id.cache';
    $robots    = $cache->get($cacheKey);
    if ($robots === null) {

        // $robots может иметь значение NULL из-за того, что истекла годность хранения или данных просто не существует
        // Получим данные из БД
        $robots = Robots::find(array("order" => "id"));

        // Сохраняем их в кэше
        $cache->save($cacheKey, $robots);
    }

    // Используем $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Запрос данных из кэша
---------------------
Все элементы добавляемые в кэш идентифицируются по ключам. В случае с файловым backend ключом является название файла.
Для получения данных из кэша нам необходимо выполнить запрос к кэшу с указанием уникального ключа. Если ключа не существует,
метод вернет значение NULL.

.. code-block:: php

    <?php

    // Получаем продукты по ключу "myProducts"
    $products = $cache->get("myProducts");

Для того чтобы узнать какие ключи сейчас хранятся можно выполнить метод queryKeys:

.. code-block:: php

    <?php

    // Получаем все ключи, которые хранятся в кэше
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
        $data = $cache->get($key);
        echo "Key=", $key, " Data=", $data;
    }

    // Получаем все ключи, которые начинаются с префикса "my-prefix"
    $keys = $cache->queryKeys("my-prefix");


Удаление данных из кэша
-----------------------
Могут возникнуть ситуации, когда вам необходимо удалить данные из кэша. Единственным требованием для этого является
знание необходимого ключа по которому хранятся данные.

.. code-block:: php

    <?php

    // Удаляем элемент по определенному ключу
    $cache->delete("someKey");

    // Удаляем все из кэша
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
        $cache->delete($key);
    }


Проверяем наличие кэша
----------------------
Существует возможность проверить наличие данных в кэше.

.. code-block:: php

    <?php

    if ($cache->exists("someKey")) {
        echo $cache->get("someKey");
    }
    else {
        echo "Данных в кэше не существует!";
    }


Время жизни
-----------
"Время жизни" (lifetime) - это время, исчисляемое в секундах, которое означает, сколько будут храниться данные в backend кэше.
По умолчанию все данные получают "время жизни", которое было указано при создании frontend компонента.
Вы можете указать другое значение при сохранении или получении данных из кэша:

Задаем время жизни при получении:

.. code-block:: php

    <?php

    $cacheKey = 'my.cache';

    // Получаем кэш и задаем время жизни
    $robots = $cache->get($cacheKey, 3600);
    if ($robots === null) {

        $robots = "some robots";

        // Сохраняем в кэше
        $cache->save($cacheKey, $robots);
    }

Задаем время жизни при сохранении:

.. code-block:: php

    <?php

    $cacheKey = 'my.cache';

    $robots = $cache->get($cacheKey);
    if ($robots === null) {

        $robots = "some robots";

        // Задаем время жизни, сохраняя данные
        $cache->save($cacheKey, $robots, 3600);
    }

Существуют некоторые различия в поведении backend компонентов. Например, файловый адаптер требует установку времени жизни при
получении, в то время как APC при сохранении.

Во избежание конфликтов можно использовать такую хитрость:

.. code-block:: php

    <?php

    $lifetime = 3600;
    $cacheKey = 'my.cache';

    $robots = $cache->get($cacheKey, $lifetime);
    if ($robots === null) {

        $robots = "some robots";

        $cache->save($cacheKey, $robots, $lifetime);
    }

Многоуровневое кэширование
--------------------------
Эта возможность компонента кэширования позволяет разработчику осуществлять кэш в несколько уровней. Возможность
будет полезна при сохранении кэша в нескольких местах (системах кэширования) с разным временем жизни, и последующим
поочерёдным чтением из них начиная с самого быстрого (в порядке регистрации) и заканчивая самым медленным, пока срок жизни во всех них не истечет.

.. code-block:: php

    <?php

    $ultraFastFrontend = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 3600
    ));

    $fastFrontend = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 86400
    ));

    $slowFrontend = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 604800
    ));

    // Backends от самого быстрого до самого медленного
    $cache = new \Phalcon\Cache\Multiple(array(
        new Phalcon\Cache\Backend\Apc($ultraFastFrontend, array(
            "prefix" => 'cache',
        )),
        new Phalcon\Cache\Backend\Memcache($fastFrontend, array(
            "prefix" => 'cache',
            "host" => "localhost",
            "port" => "11211"
        )),
        new Phalcon\Cache\Backend\File($slowFrontend, array(
            "prefix" => 'cache',
            "cacheDir" => "../app/cache/"
        ))
    ));

    // Сохраняем, сохраняется сразу во все адаптеры кэширования
    $cache->save('my-key', $data);

Frontend Адаптеры
-----------------
Доступные адаптеры приведены в таблице:

+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| Адаптер  | Описание                                                                                                                                                       | Пример                                                                             |
+==========+================================================================================================================================================================+====================================================================================+
| Output   | Считывает данные из стандартного PHP вывода                                                                                                                    | :doc:`Phalcon\\Cache\\Frontend\\Output <../api/Phalcon_Cache_Frontend_Output>`     |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| Data     | Используется для кэширования любых данных в PHP (big arrays, objects, text, и т.д.). Прежде чем сохранить данные, адаптер сериализирует их.                    | :doc:`Phalcon\\Cache\\Frontend\\Data <../api/Phalcon_Cache_Frontend_Data>`         |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| Base64   | Используется для кэширования бинарных данных. Данные сериализируется с использованием base64_encode.                                                           | :doc:`Phalcon\\Cache\\Frontend\\Base64 <../api/Phalcon_Cache_Frontend_Base64>`     |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| Json     | Данные перед кеширование сериализуются в JSON. Можно использовать для обмена данными с другими фреймворками.                                                   | :doc:`Phalcon\\Cache\\Frontend\\Json <../api/Phalcon_Cache_Frontend_Json>`         |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| IgBinary | Он используется для кэширования любых данных PHP (большие массивы, объекты, тексты и т.д.). Данные сериализуются c помощью IgBinary перед сохранением в бэкэнд.| :doc:`Phalcon\\Cache\\Frontend\\Igbinary <../api/Phalcon_Cache_Frontend_Igbinary>` |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+
| None     | Используется для кэширования любых типов данных без сериализации.                                                                                              | :doc:`Phalcon\\Cache\\Frontend\\None <../api/Phalcon_Cache_Frontend_None>`         |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------+

Реализация собственных Frontend адаптеров
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания адаптера необходимо реализовать интерфейс :doc:`Phalcon\\Cache\\FrontendInterface <../api/Phalcon_Cache_FrontendInterface>`.

Backend Адаптеры
----------------
Доступные адаптеры приведены в таблице:

+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Адаптер   | Описание                                        | Информация | Необходимо дополнение  | Пример                                                                            |
+===========+=================================================+============+========================+===================================================================================+
| File      | Сохраняет данные в локальный текстовый файл     |            |                        | :doc:`Phalcon\\Cache\\Backend\\File <../api/Phalcon_Cache_Backend_File>`          |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Memcached | Сохраняет данные на memcached сервере           | Memcached_ | memcache_              | :doc:`Phalcon\\Cache\\Backend\\Memcache <../api/Phalcon_Cache_Backend_Memcache>`  |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| APC       | Сохраняет данные в Alternative PHP Cache (APC)  | APC_       | `APC extension`_       | :doc:`Phalcon\\Cache\\Backend\\Apc <../api/Phalcon_Cache_Backend_Apc>`            |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Mongo     | Сохраняет данные в Mongo БД                     | MongoDb_   | `Mongo`_               | :doc:`Phalcon\\Cache\\Backend\\Mongo <../api/Phalcon_Cache_Backend_Mongo>`        |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| XCache    | Сохроняет данные в XCache                       | XCache_    | `xcache extension`_    | :doc:`Phalcon\\Cache\\Backend\\Xcache <../api/Phalcon_Cache_Backend_Xcache>`      |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+


Реализация собственных Backend адаптеров
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания адаптера необходимо реализовать интерфейс :doc:`Phalcon\\Cache\\BackendInterface <../api/Phalcon_Cache_BackendInterface>`.

Опции файлового Backend
^^^^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены в файлы на локальном сервере. Доступные опции:

+----------+-------------------------------------------------------------------------+
| Опция    | Описание                                                                |
+==========+=========================================================================+
| prefix   | Префикс, который будет автоматически добавляться в кэш ключей           |
+----------+-------------------------------------------------------------------------+
| cacheDir | Папка с правами на запись, в которую будут сохраняться кэшируемые файлы |
+----------+-------------------------------------------------------------------------+

Опции Memcached Backend
^^^^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены на memcached сервере. Доступные опции:

+------------+--------------------------------------------------------------------+
| Опция      | Описание                                                           |
+============+====================================================================+
| prefix     | Префикс, который будет автоматически добавляться в кэш ключей      |
+------------+--------------------------------------------------------------------+
| host       | Адрес сервера memcached                                            |
+------------+--------------------------------------------------------------------+
| port       | Порт сервера memcached                                             |
+------------+--------------------------------------------------------------------+
| persistent | Использовать постоянное соединение с memcached?                    |
+------------+--------------------------------------------------------------------+

Опции APC Backend
^^^^^^^^^^^^^^^^^
Данные будут сохранены в Alternative PHP Cache (APC_). Доступна лишь одна опция:

+------------+------------------------------------------------------------------+
| Опция      | Описание                                                         |
+============+==================================================================+
| prefix     | Префикс, который будет автоматически добавляться в кэш ключей    |
+------------+------------------------------------------------------------------+

Опции Mongo Backend
^^^^^^^^^^^^^^^^^^^
Данные будут сохранены на MongoDB сервере. Доступные опции:

+------------+----------------------------------------------------------------+
| Опция      | Описание                                                       |
+============+================================================================+
| prefix     | Префикс, который будет автоматически добавляться в кэш ключей  |
+------------+----------------------------------------------------------------+
| server     | Строка подключения к MongoDB                                   |
+------------+----------------------------------------------------------------+
| db         | Название базы данных                                           |
+------------+----------------------------------------------------------------+
| collection | Коллекция в базе данных                                        |
+------------+----------------------------------------------------------------+

Опции XCache Backend
^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены в кэше XCache (XCache_). Доступна лишь одна опция:

+------------+--------------------------------------------------------------+
| Опция      | Описание                                                     |
+============+==============================================================+
| prefix     | Префикс, который будет автоматически добавляться в кэш ключей|
+------------+--------------------------------------------------------------+

Существует еще несколько типов адаптеров, их можно получить в "Инкубаторе" - `Phalcon Incubator <https://github.com/phalcon/incubator>`_

.. _Memcached: http://ru.wikipedia.org/wiki/Memcached
.. _memcache: http://pecl.php.net/package/memcache
.. _APC: http://ru.wikipedia.org/wiki/Alternative_PHP_Cache#Alternative_PHP_Cache
.. _APC extension: http://pecl.php.net/package/APC
.. _MongoDb: http://ru.wikipedia.org/wiki/MongoDB
.. _Mongo: http://pecl.php.net/package/mongo
.. _XCache: http://xcache.lighttpd.net/
.. _XCache extension: http://pecl.php.net/package/xcache
