Улучшение производительности с помощью Кэширования
==================================================
Phalcon предоставляет класс :doc:`Phalcon\\Cache <cache>`, дающий быстрый доступ к часто используемым или уже сгенерированным.
:doc:`Phalcon\\Cache <cache>` написан на языке C, поэтому он предоставляет высокую производительность и пониженный расход ресурсов.
Этот класс использует два компонента: frontend и backend. Frontend компонент является входным источником или интерфейсом, в то время
как backend предоставляет опции хранения данных.

Где Применяется Кэширование?
----------------------------
Несмотря на то, что этот компонент очень быстрый, его использование в случаях, где он не нужен, может привести к потери 
производительности. Мы рекомендуем проверить эти ситуации, прежде, чем использовать кэширование:

* Вы делаете сложные расчеты, которые каждый раз возвращают один и тот же результат (или результат редко изменяется)
* Вы используете много помощников (helper), и результат генерации почти всегда одинаковый
* Получение данных из БД, которые редко меняются

.. highlights::

    *Примечание* Даже, после создания кэширования вы должны проверить скорость выполнения. Это можно легко проверить,
    особенно используя Memcache или Apc, с соответствующими инструментами, которые предоставляют эти приложения.

Поведение Системы Кэширования
-----------------------------
Процесс кэширования делится на две части:

* **Frontend**: Эта часть отвечает за проверку истекшего ключа и выполняет дополнительные преобразования над данными,
прежде операции сохранения или извлечения их из backend

* **Backend**: Эта часть отвечает за коммуникацию, запись/чтение данных по запросу frontend

Кэширование Выходных Фрагментов
-------------------------------
Выходные фрагменты - это части HTML или текста, которые кэшируются "как есть" и возвращаются "как есть". Выходные данные автоматически 
захватываются из ob_* функции или из выходного потока PHP и сохраняются в кэш.  Следующий пример демонстрирует такое использование.
Он получает сгенерированные выходные данные и сохраняет их в файл. Кэш обновляется каждые 172800 секунд (2 дня).

Реализация этого механизма позволяет нам получить производительность за счет исключения из выполняние помощника Phalcon\\Tag::linkTo
, который вызывается каждый раз в этом участке кода.

.. code-block:: php

    <?php

    // Создание frontend для выходных данных. Кэшируем файлы на 2 дня
    $frontCache = new Phalcon\Cache\Frontend\Output(array(
        "lifetime" => 172800
    ));

    // Создаем компонент, который будем кэшировать из "Выходных данных" в "Файл"
    // Устанавливаем папку для кэшируемых файлов - важно сохранить символ "/" в конце пути
    $cache = new Phalcon\Cache\Backend\File($frontCache, array(
        "cacheDir" => "../app/cache/"
    ));

    // Получить/Задать кэшируемый файл ../app/cache/my-cache.html
    $content = $cache->start("my-cache.html");

    // Если $content является значением NULL, значит данных в кэше нет и их надо сгенерировать
    if ($content === null) {

        // Выводим дату и время
        echo date("r");

        // Генерируем ссылку на "регистрацию"
        echo Phalcon\Tag::linkTo(
            array(
                "user/signup",
                "Sign Up",
                "class" => "signup-button"
            )
        );

        // Сохраняем вывод в кэш
        $cache->save();

    } else {

        // Ввыводим кэшируемые данные
        echo $content;
    }

*Примечание* В этом примере наш код остается таким же и выводит те же данные пользователю. Наш компонент кэширования 
незаметно перехватывает вывод и сохраняет его в кэшируемый файл (когда кэш сгенерирован) или он отправляет уже готовые данные обратно 
к пользователю, а это естественно позволяет экономить на выполнении операций.

Кэширование Произвольных Данных
-------------------------------
Кэширование различных данных, не менее важно для вашего приложения. Кэширование может уменьшить нагрузку базы данных за счет 
повторного использования сгенерированных данных (но не обновленных), что и увеличивает скорость выполнения вашего приложения.

Пример Файлового Backend
^^^^^^^^^^^^^^^^^^^^^^^^
Существует файловый адаптер кэширования. Единственным параметром для него является место, где будут храниться закэшированные
файлы. Этот параметр называется "cacheDir", в него передается путь к месту хранения, *важно* добавлять в конце символ "/".

.. code-block:: php

    <?php

    // Кэшируем данные на 2 дня
    $frontCache = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 172800
    ));

    // Создаем компонент, который будем кэшировать из "Выходных данных" в "Файл"
    // Устанавливаем папку для кэшируемых файлов - важно сохранить символ "/" в конце пути
    $cache = new Phalcon\Cache\Backend\File($frontCache, array(
        "cacheDir" => "../app/cache/"
    ));

    // Пробуем получить закэшированные записи
    $cacheKey = 'robots_order_id.cache';
    $robots    = $cache->get($cacheKey);
    if ($robots === null) {

        // $robots может иметь значение NULL из-за того, что истекла годность хранения или данных просто не существует
        // Получим данные из БД
        $robots = Robots::find(array("order" => "id"));

        // Сохраняем их в кэше
        $cache->save($cacheKey, $robots);
    }

    // Используем $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Пример использования Memcached в качестве Backend
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для этого нам достаточно немного изменить вышестоящий пример. В частности изменится концигурация.

.. code-block:: php

    <?php

    // Кэшируем данные на 1 час
    $frontCache = new Phalcon\Cache\Frontend\Data(array(
        "lifetime" => 3600
    ));

    // Создаем компонент, который будет кэшировать данные в Memcache
    // Настройки подключения к Memcache
    $cache = new Phalcon\Cache\Backend\Memcache($frontCache, array(
        "host" => "localhost",
        "port" => "11211"
    ));

    // Пробуем получить закэшированные записи
    $cacheKey = 'robots_order_id.cache';
    $robots    = $cache->get($cacheKey);
    if ($robots === null) {

        // $robots может иметь значение NULL из-за того, что истекла годность хранения или данных просто не существует
        // Получим данные из БД
        $robots = Robots::find(array("order" => "id"));

        // Сохраняем их в кэше
        $cache->save($cacheKey, $robots);
    }

    // Используем $robots :)
    foreach ($robots as $robot) {
       echo $robot->name, "\n";
    }

Запросы данных из Кэша
----------------------
Все элементы добавляемые в кэш идентифицируются ключем. В случае с файловым backend ключем является название файла.
Для получения данных из кэша нам необходимо выполнить запрос к кэшу с уникальным ключем. Если ключа не существует, метод вернет
значение NULL.

.. code-block:: php

    <?php

    // Получаем продукты по ключу "myProducts"
    $products = $cache->get("myProducts");

Для того чтобы узнать какие ключи сейчас хранятся можно выполнить метод queryKeys:

.. code-block:: php

    <?php

    // Получаем все ключи, которые хранятся в кэше
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
        $data = $cache->get($key);
        echo "Key=", $key, " Data=", $data;
    }

    // Получаем все ключи, которые начинаются с префикса "my-prefix"
    $keys = $cache->queryKeys("my-prefix");


Удаленние данных из кэша
------------------------
Могут возникнуть ситуации, когда вам необходимо удалить данные из кэша. Единственным требованием для этого является
знание необходимого ключа по которому хранятся данные.

.. code-block:: php

    <?php

    // Удаляем элемент по определенному ключу
    $cache->queryKeys("someKey");

    // Удаляем все из кэша
    $keys = $cache->queryKeys();
    foreach ($keys as $key) {
    	$cache->delete($key);
    }


Проверяем наличие кэша
----------------------
Существует возможность проверить наличие данных в кэше.

.. code-block:: php

    <?php

    if ($cache->exists("someKey")) {
        echo $cache->get("someKey");
    }
    else {
        echo "Данных в кэше не существует!";
    }


Время жизни
-----------
"Время жизни" (lifetime) - это время, исчесляемое в секундах, которое означает, сколько будут храниться данные в backend.
По умолчанию все данные получают "время жизни", которое было указано при создании frontend компонента.
Вы можете указать другое значение при сохранении или получении данных из кэша:

Задачем время жизни при получении:

.. code-block:: php

    <?php

    $cacheKey = 'my.cache';

    // Получаем кэш и задаем время жизни
    $robots = $cache->get($cacheKey, 3600);
    if ($robots === null) {

        $robots = "some robots";

        // Сохраняем в кэше
        $cache->save($cacheKey, $robots);
    }

Задаем время жизни при сохранении:

.. code-block:: php

    <?php

    $cacheKey = 'my.cache';

    $robots = $cache->get($cacheKey);
    if ($robots === null) {

        $robots = "some robots";

        // Задаем время жизни, сохранняя данные
        $cache->save($cacheKey, $robots, 3600);
    }

Существуют некоторые различия в поведении backend компонентов. Например, файловый адаптер требует установку времени жизни при
получении, в то время как APC при сохранении.

Во избежании конфликтов можно использовать такую хитрость:

.. code-block:: php

    <?php

    $lifetime = 3600;
    $cacheKey = 'my.cache';

    $robots = $cache->get($cacheKey, $lifetime);
    if ($robots === null) {

        $robots = "some robots";

        $cache->save($cacheKey, $robots, $lifetime);
    }

Frontend Адаптеры
-----------------
Доступные адаптеры приведены в таблице:

+---------+---------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------+
| Адаптер | Описание                                                                                                                                    | Пример                                                                         |
+=========+=============================================================================================================================================+================================================================================+
| Output  | Считывает данные из стандартного PHP вывода                                                                                                 | :doc:`Phalcon\\Cache\\Frontend\\Output <../api/Phalcon_Cache_Frontend_Output>` |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------+
| Data    | Используется для кэширования любых данных в PHP (big arrays, objects, text, и т.д.). Прежде чем сохранить данные, адаптер сериализирует их. | :doc:`Phalcon\\Cache\\Frontend\\Data <../api/Phalcon_Cache_Frontend_Data>`     |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------+
| Base64  | Используется для кэширования бинарных данных. Данные сериализируется с использованием base64_encode.                                         | :doc:`Phalcon\\Cache\\Frontend\\Base64 <../api/Phalcon_Cache_Frontend_Base64>` |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------+
| None    | Используется для кэширования любых типов данных без сериализации.                                                                            | :doc:`Phalcon\\Cache\\Frontend\\None <../api/Phalcon_Cache_Frontend_None>`     |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------+

Реализация собственных Frontend адаптеров
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания адаптера необходимо реализовать интерфейс :doc:`Phalcon\\Cache\\FrontendInterface <../api/Phalcon_Cache_FrontendInterface>`.

Backend Адаптеры
----------------
Доступные адаптеры приведены в таблице:

+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Адаптер   | Описание                                        | Информация | Необходимо дополнение  | Пример                                                                            |
+===========+=================================================+============+========================+===================================================================================+
| File      | Сохраняет данные в локальный текстовый файл     |            |                        | :doc:`Phalcon\\Cache\\Backend\\File <../api/Phalcon_Cache_Backend_File>`          |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Memcached | Сохраняет данные на memcached сервере           | Memcached_ | memcache_              | :doc:`Phalcon\\Cache\\Backend\\Memcache <../api/Phalcon_Cache_Backend_Memcache>`  |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| APC       | Сохраняет данные в Alternative PHP Cache (APC)  | APC_       | `APC extension`_       | :doc:`Phalcon\\Cache\\Backend\\Apc <../api/Phalcon_Cache_Backend_Apc>`            |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+
| Mongo     | Сохраняет данные в Mongo БД                     | MongoDb_   | `Mongo`_               | :doc:`Phalcon\\Cache\\Backend\\Mongo <../api/Phalcon_Cache_Backend_Mongo>`        |
+-----------+-------------------------------------------------+------------+------------------------+-----------------------------------------------------------------------------------+

Реализация собственных Backend адаптеров
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Для создания адаптера необходимо реализовать интерфейс :doc:`Phalcon\\Cache\\BackendInterface <../api/Phalcon_Cache_BackendInterface>`.

Опции файлового Backend
^^^^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены в файлы на локальном сервере. Доступные опции:

+----------+-------------------------------------------------------------------------+
| Опция    | Описание                                                                |
+==========+=========================================================================+
| cacheDir | Папка с правами на запись, в которую будут сохраняться кэшируемые файлы |
+----------+-------------------------------------------------------------------------+

Опции Memcached Backend
^^^^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены на memcached сервере. Доступные опции:

+------------+-----------------------------------------------+
| Опция      | Описание                                      |
+============+===============================================+
| host       | Адрес сервера memcached                       |
+------------+-----------------------------------------------+
| port       | Порт сервера memcached                        |
+------------+-----------------------------------------------+
| persistent | Создание постоянного подключения к memcached? |
+------------+-----------------------------------------------+

Опции APC Backend
^^^^^^^^^^^^^^^^^
Данные будут сохранены в Alternative PHP Cache (APC_). Данный backend не требует никаких дополнительных опций.

Опции Mongo Backend
^^^^^^^^^^^^^^^^^^^^
Данные будут сохранены на MongoDB сервере. Доступные опции:

+------------+---------------------------------------------+
| Опция      | Описание                                    |
+============+=============================================+
| server     | Строка подключения к MongoDB                |
+------------+---------------------------------------------+
| db         | Название базы данных                        |
+------------+---------------------------------------------+
| collection | Коллекция в базе данных                     |
+------------+---------------------------------------------+

Существует еще несколько типов адаптеров, их можно изучить в "Инкубаторе" - `Phalcon Incubator <https://github.com/phalcon/incubator>`_

.. _Memcached: http://ru.wikipedia.org/wiki/Memcached
.. _memcache: http://pecl.php.net/package/memcache
.. _APC: http://ru.wikipedia.org/wiki/Alternative_PHP_Cache#Alternative_PHP_Cache
.. _APC extension: http://pecl.php.net/package/APC
.. _MongoDb: http://ru.wikipedia.org/wiki/MongoDB
.. _Mongo: http://pecl.php.net/package/mongo
