Повышение производительности: Что дальше?
=========================================

Для получения более быстрого приложения требуется уточнение множества аспектов: сервера, клиента, сети, базы данных, веб-сервера, статических
источников и т.д. Здесь мы рассмотрим сценарии по улучшению производительности и поиску наиболее медленных мест приложения.

Профилирование на сервере
-------------------------
Все приложения разные, использование постоянного профилирования даёт понять, где можно увеличить производительность.
Профилирование дает нам реальное представление о наиболее медленных местах. Результаты замеров могут различаться от раза к разу,
поэтому необходимо сделать достаточное количество измерений, чтобы сделать правильные выводы.

Профилирование с XDebug
^^^^^^^^^^^^^^^^^^^^^^^
Xdebug_ предоставляет простой способ профилирования приложений на PHP. Просто установите расширение и включите его в php.ini:

.. code-block:: ini

    xdebug.profiler_enable = On

С помощью инструмента Webgrind_ можно визуально понять, какие функции и методы медленнее остальных:

.. figure:: ../_static/img/webgrind.jpg
    :align: center

Профилирование с Xhprof
^^^^^^^^^^^^^^^^^^^^^^^
Xhprof_ — еще одно интересное расширение для профилирования PHP-приложений. Добавьте следующую строку в начало загрузочного файла:

.. code-block:: php

    <?php

    xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);

Потом, в конце файла, сохраните данные профилирования:

.. code-block:: php

    <?php

    $xhprof_data = xhprof_disable('/tmp');

    $XHPROF_ROOT = "/var/www/xhprof/";
    include_once $XHPROF_ROOT . "/xhprof_lib/utils/xhprof_lib.php";
    include_once $XHPROF_ROOT . "/xhprof_lib/utils/xhprof_runs.php";

    $xhprof_runs = new XHProfRuns_Default();
    $run_id = $xhprof_runs->save_run($xhprof_data, "xhprof_testing");

    echo "http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&source=xhprof_testing\n";

Xhprof обеспечивает встроенный просмотрщик для анализа данных профилирования:

.. figure:: ../_static/img/xhprof-2.jpg
    :align: center

.. figure:: ../_static/img/xhprof-1.jpg
    :align: center

Профилирование SQL-запросов
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Большинство систем баз данных предоставляет средства для выявления медленных SQL запросов. Обнаружение и исправление медленных запросов
очень важно для увеличения производительности на стороне сервера. В случае с MySQL вы можете использовать лог медленных запросов (slow query log), чтобы понять,
какие SQL-запросы выполняются медленнее, чем ожидалось:

.. code-block:: ini

    log-slow-queries = /var/log/slow-queries.log
    long_query_time = 1.5

Профилирование на клиенте
-------------------------
Иногда, для увеличения производительности, может понадобиться проанализировать приложение и веб-сервер для улучшения загрузки статических
элементов, таких как картинки, javascript и css. Следующие инструменты полезны для выявления общих узких мест на стороне клиента:

Профилирование в Chrome/Firefox
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
У большинства современных браузеров есть все инструменты для профилирования загрузки страницы. В Chrome для получения информации о загрузке
различных ресурсов можно использовать веб-инспектор:

.. figure:: ../_static/img/chrome-1.jpg
    :align: center

Firebug_ обеспечивает схожую функциональность:

.. figure:: ../_static/img/firefox-1.jpg
    :align: center

Использование Yahoo! YSlow
--------------------------
YSlow_ анализирует веб-страницу и показывает советы по улучшению производительности на основе комплекса `правил для высокопроизводительных веб-страниц`_

.. figure:: ../_static/img/yslow-1.jpg
    :align: center

Использование Speed Tracer
^^^^^^^^^^^^^^^^^^^^^^^^^^
`Speed Tracer`_ - инструмент, помогающий обнаружить и устранить проблемы производительности в клиентской части веб-приложения. Он показывает метрики,
полученные из работы браузера на самом низком уровне. Speed Racer доступен как расширение для Google Chrome и работает на всех поддерживаемых в настоящее
время платформах (Windows и Linux).

.. figure:: ../_static/img/speed-tracer.jpg
    :align: center

Этот инструмент очень полезен, так как он позволяет получать в реальном времени параметры, используемые для отображения полной страницы, включая разбор HTML,
оценку Javascript и CSS стилей.

Использование PHP последней версии
----------------------------------
PHP быстрее с каждым днем, использование последней версии повышает производительность вашего приложения, а также и Phalcon.

Использование акселераторов PHP
-------------------------------
APC_, как и многие другие PHP акселераторы, помогает приложению: уменьшает накладные расходы на чтение, разбивку и разбор PHP файлов при каждом запросе.
После установки расширения используйте следующий параметр, чтобы включить APC:

.. code-block:: ini

    apc.enabled = On

PHP 5.5 включает в себя встроенный кэшер байт-кода под названием ZendOptimizer+, это расширение также доступно для версий 5.3 и 5.4.

Выполнение блокируюших задач в фоне
-----------------------------------
Обработка видео, отправка почты, сжатие файла или изображения и т.д. - все это медленные задачи, которые должны выполняться в фоне.
Имеется ряд инструментов, предоставляющих системы очередей и сообщений, которые отлично работают с PHP:

* `Beanstalkd <http://kr.github.io/beanstalkd/>`_
* `Redis <http://redis.io/>`_
* `RabbitMQ <http://www.rabbitmq.com/>`_
* `Resque <https://github.com/chrisboulton/php-resque>`_
* `Gearman <http://gearman.org/>`_
* `ZeroMQ <http://www.zeromq.org/>`_

Модуль Google Page Speed
------------------------
mod_pagespeed_ увеличивает скорость вашего сайта и уменьшает время загрузки страницы. Это open-source модуль для HTTP-сервера Apache (также доступен
для nginx в виде ngx_pagespeed_), он использует для повышения производительности лучшие практики обработки страниц и соответствующих ресурсов (CSS, JavaScript, изображений), не требуя
ручной модификации уже существующего контента или настроек.

.. _firebug: http://getfirebug.com/
.. _YSlow: http://developer.yahoo.com/yslow/
.. _правил для высокопроизводительных веб-страниц: http://developer.yahoo.com/performance/rules.html
.. _XDebug: http://xdebug.org/docs
.. _Xhprof: https://github.com/facebook/xhprof
.. _Speed Tracer: https://developers.google.com/web-toolkit/speedtracer/
.. _Webgrind: https://github.com/jokkedk/webgrind/
.. _APC: http://php.net/manual/en/book.apc.php
.. _mod_pagespeed: https://developers.google.com/speed/pagespeed/mod
.. _ngx_pagespeed: https://developers.google.com/speed/pagespeed/ngx
