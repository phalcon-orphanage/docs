Валидация моделей
=================

Проверка целостности данных
---------------------------
:doc:`Phalcon\\Mvc\\Model <../api/Phalcon_Mvc_Model>` предоставляет некоторые события для проверки данных и реализации бизнес-логики. Специальное событие "validation"
позволяет нам вызывать встроенные валидаторы для проверки записи. Phalcon имеет несколько встроенных валидаторов, которые можно использовать на этой стадии.

Следующий пример показывает, как это можно использовать:

.. code-block:: php

    <?php

    namespace Store\Toys;

    use Phalcon\Mvc\Model;
    use Phalcon\Validation;
    use Phalcon\Validation\Validator\Uniqueness;
    use Phalcon\Validation\Validator\InclusionIn;

    class Robots extends Model
    {
        public function validation()
        {
            $validator = new Validation();

            $validator->add(
                "type",
                new InclusionIn(
                    [
                        "domain" => [
                            "Mechanical",
                            "Virtual",
                        ]
                    ]
                )
            );

            $validator->add(
                "name",
                new Uniqueness(
                    [
                        "message" => "Название робота должно быть уникальным",
                    ]
                )
            );

            return $this->validate($validator);
        }
    }

Приведенный выше пример выполняет проверку с помощью встроенного валидатора "InclusionIn". Он проверяет значение поля "type" в списке "domain". Если
значение отсутствует в методе, то валидация будет прервана и будет возвращено значение false.

.. highlights::

    Для получения дополнительной информации о валидаторах обратитесь к :doc:`документации по валидации <validation>`.

Идея создания валидаторов заключается в их повторном использовании несколькими моделями. Валидатор может быть и простым, например:

.. code-block:: php

    <?php

    namespace Store\Toys;

    use Phalcon\Mvc\Model;
    use Phalcon\Mvc\Model\Message;

    class Robots extends Model
    {
        public function validation()
        {
            if ($this->type === "Old") {
                $message = new Message(
                    "Извините, старые роботы больше не принимаются",
                    "type",
                    "MyType"
                );

                $this->appendMessage($message);

                return false;
            }

            return true;
        }
    }

Собщения об ошибках
-------------------
:doc:`Phalcon\\Mvc\\Model <../api/Phalcon_Mvc_Model>` имеет подсистему обмена сообщениями, которая обеспечивает гибкий способ генерации или хранения
сообщений об ошибках, сгенерированных во время создания/обновления записей.

Каждое сообщение состоит из экземпляра класса :doc:`Phalcon\\Mvc\\Model\\Message <../api/Phalcon_Mvc_Model_Message>` и набор
генерируемых сообщений может быть получен с помощью метода :code:`getMessages()`. Каждое сообщение содержит расширенную информацию, такую как
имя поля генерируемого сообщение или тип сообщения:

.. code-block:: php

    <?php

    if ($robot->save() === false) {
        $messages = $robot->getMessages();

        foreach ($messages as $message) {
            echo "Message: ", $message->getMessage();
            echo "Field: ", $message->getField();
            echo "Type: ", $message->getType();
        }
    }

:doc:`Phalcon\\Mvc\\Model <../api/Phalcon_Mvc_Model>` может генерировать следующие типы сообщений:

+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Тип                  | Описание                                                                                                                                         |
+======================+==================================================================================================================================================+
| PresenceOf           | Генерируется, когда поле с атрибутом non-null в базе данных пытается вставить/обновить null значение                                             |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| ConstraintViolation  | Генерируется, когда поле, являющееся частью виртуального внешнего ключа, пытается вставить/обновить значение, не существующее в указанной модели |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| InvalidValue         | Генерируется, когда валидация не удалась из-за недопустимого значения                                                                            |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| InvalidCreateAttempt | Генерируется, когда была предпринята попытка создать запись, которая уже существует                                                              |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| InvalidUpdateAttempt | Генерируется, когда была предпринята попытка обновить запись, которая еще не существует                                                          |
+----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

Метод :code:`getMessages()` может быть переопределен в модели, чтобы заменить/перевести сообщения по умолчанию, автоматически генерируемые ORM:

.. code-block:: php

    <?php

    namespace Store\Toys;

    use Phalcon\Mvc\Model;

    class Robots extends Model
    {
        public function getMessages()
        {
            $messages = [];

            foreach (parent::getMessages() as $message) {
                switch ($message->getType()) {
                    case "InvalidCreateAttempt":
                        $messages[] = "Запись не может быть создана, потому что она уже существует";
                        break;

                    case "InvalidUpdateAttempt":
                        $messages[] = "Запись не может быть обновлена, потому что она еще не существует";
                        break;

                    case "PresenceOf":
                        $messages[] = "Поле " . $message->getField() . " является обязательным";
                        break;
                }
            }

            return $messages;
        }
    }

События при ошибках валидации
-----------------------------
Другой доступный тип событий - когда в процессе проверки данных выявляются какие-либо несоответствия:

+----------------------------------+--------------------+------------------------------------------------------------------------------------+
| Операция                         | Название           | Пояснение                                                                          |
+==================================+====================+====================================================================================+
| Вставка или обновление           | notSaved           | Срабатывает, когда операция INSERT или UPDATE не выполняется по какой-либо причине |
+----------------------------------+--------------------+------------------------------------------------------------------------------------+
| Вставка, удаление или обновление | onValidationFails  | Срабатывает, когда не выполняется какая-либо операция обработки данных             |
+----------------------------------+--------------------+------------------------------------------------------------------------------------+
