Наша мотивация
==============

Сейчас существует множество PHP фреймворков, но Phalcon такой один (правда, поверьте).

Почти все программисты предпочитают использовать фреймворки. Это обусловлено тем, что они обеспечивают богатый функционал который уже готов
для использования и поддерживают принцип DRY ( Don’t repeat yourself - не повторяй себя). Тем не менее фреймворки в большинстве своём состоят
из множества файлов и сотен строк кода, которые должны подключаться и выполнятся при каждом запросе пользователя. Это существенно замедляет 
работу приложения, и так же негативно влияет на скорость работы и эмоции конечного пользователя. 

Вопрос
------

Почему мы не можем получить фреймворк со всеми этими преимуществами, но лишенный недостатков или сводящий их к минимуму?

Так и появился Phalcon!

Последние несколько месяцев мы глубоко исследовали возможности PHP для любой оптимизации большой или маленькой.
Поняв Zend Engine, мы смогли убрать лишние проверки, уменьшить код и выполнить такие низкоуровневые оптимизации, которые 
позволили добиться максимальной производительности от Phalcon.

Почему?
-------

* Фреймворки стали обязательными для профессионального развития и работы с PHP
* Фреймворки предлагают чёткую философию, лёгкую поддержку и написание кода, а саму работу делают увлекательной и приятной

Как работает PHP внутри?
------------------------

* PHP - язык динамический, в нём присутствует так называемый слабый контроль типов. Каждый раз, при выполнении бинарной операции (например, 2 + "2"), PHP сначала проверяет типы операндов для выполнения преобразований
* PHP каждый раз заново интерпретируется и не компилируется. В этом основная проблема и главная потеря производительности
* При каждом запросе все сценарии должны быть сначала интерпретированы 
* Если не используются акселераторы, кэширующие PHP-код в скомпилированный байт-код (например APC), то при каждом запросе так же проверяется синтаксис каждого файла

Как работают традиционные фреймворки на PHP?
--------------------------------------------

* Много файлов с разными классами и функциями считываются при каждом обращении. Чтение файлов с диска пагубно влияет на производительность, особенно когда каталогов и файлов много
* Современный фреймворки используют так называемую ленивую или отложенную загрузку (автозагрузку) для увеличения производительности (для сценария используются только необходимые файлы с кодом) 
* Последовательная загрузка или интерпретация довольно сильно нагружает сервер и негативно влияет на производительность
* Код фреймворка меняется не часто, но приложение должно его каждый раз загружать, проверять и интерпретировать, каждый раз, на каждый запрос

Как работает расширение PHP?
----------------------------

* Си расширение загружается один раз, вместе с загрузкой библиотеки или демона PHP
* Классы и функции расширения готовы всегда и в любых приложениях
* Код не интерпретируется, он уже скомпилирован и оптимизирован. При этом оптимизирован с учётом особенностей текущей системы и используемого процессора

Как работает Phalcon?
---------------------

* Компоненты фреймворка слабо связаны между собой. С Phalcon можно использовать всю базу, или только отдельные части
* Низкоуровневая оптимизация позволяет минимизировать накладные расходы на реализацию в приложении паттерна MVC
* Взаимодействие с базами данных реализовано на Си по технологии ORM и выдаёт максимальную производительность
* Phalcon напрямую обращается к внутренним структурам PHP, что позволяет делать все операции максимально быстро 

Заключение
----------
Phalcon это попытка сделать быстрейший фреймворк для PHP. Вы получаете возможность использовать очень простой и надёжный инструмент 
для создания быстрых приложений без проблем с производительностью. Наслаждайтесь!
