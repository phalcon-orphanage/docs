{
    "index_8a6dd07bd4541406e4cf28eb5cdcc175": "Welcome!",
    "index_0ea69a6ad0b19617ae367ad091d98683": "Welcome to Phalcon framework, a new approach on PHP frameworks. Our mission is to give you an advanced tool for developing web sites and applications without worrying about framework performance.",
    "index_0e674667caa52aee120be5d11767fff6": "What is Phalcon?",
    "index_ca0511df5225bdb36b59ca233b0ffd2a": "Phalcon is an open source, full stack framework for PHP 5 written as a C-extension, optimized for high performance. You don't need to learn or use the C language, since the functionality is exposed as PHP classes ready for you to use. Phalcon also is loosely coupled, allowing you to use its objects as glue components based on the needs of your application.",
    "index_ca4bc0adff80c05fa43f1d1532e63832": "Phalcon is not only about performance, our goal is to make it robust, rich in features and easy to use!",
    "index_2ab666837667234772942c0813d3be32": "Table of Contents",
    "index_55bd297b9fb4a01a8e6a56ca12739be3": "Other formats",
    "acl_35d27b8250bff15a9954c9f91a0bb3c9": "Listas de Control de Acceso ACL",
    "acl_adbc41ed0c0c423bf90223c0372e0f78": ":1: provides an easy and lightweight management of ACLs as well as the permissions attached to them. :2: (ACL) allow an application to control access to its areas and the underlying objects from requests. You are encouraged to read more about the ACL methodology so as to be familiar with its concepts.",
    "acl_e52970115d496c048249a820a58b136a": "In summary, ACLs have roles and resources. Resources are objects which abide by the permissions defined to them by the ACLs. Roles are objects that request access to resources and can be allowed or denied access by the ACL mechanism.",
    "acl_77f422ae2f33689becc2fff60ab01380": "Creating an ACL",
    "acl_82cdf253f5974cfd72e9a832b0ef83a1": "This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The :1: constructor takes as its first parameter an adapter used to retriever the information related to the control list. An example using the memory adapter is below:",
    "acl_9ca054c0d303ac1dad25b7beb76c86c7": "By default :1: allows access to action on resources that have not been yet defined. To increase the security level of the access list we can define a \"deny\" level as a default access level.",
    "acl_a2b321754df456f64c5e1ab2fbd3bb6d": "Default action is deny access",
    "acl_af39885efdd670a4d3409f86d065352b": "Adding Roles to the ACL",
    "acl_d8b6c24974ec49a7de0931969dbb69c6": "A role is an object that can or cannot access certain resources in the access list. As an example, we will define roles as groups of people in an organization. The :1: class is available to create roles in a more structured way. Let's add some roles to our recently created list:",
    "acl_21e051ef1d092d0b1a5ddec0bef33b9c": "Create some roles",
    "acl_e497d9691f5d8e2fc5cb41d685a2145a": "Add \"Guests\" role to acl",
    "acl_bb6b83d94014dcfdfaa487d4e35babd4": "Add \"Designers\" role to acl without a Phalcon\\Acl\\Role",
    "acl_b280833c0715b119a7989f7d286b737f": "As you can see, roles are defined directly without using an instance.",
    "acl_647e8a84d61a2443e8d863a01727bdb8": "Adding Resources",
    "acl_d0b887d6f2f2316bdcfb3388a5fb7d18": "Resources are objects where access is controlled. Normally in MVC applications resources refer to controllers. Although this is not mandatory, the :1: class can be used in defining resources. It's important to add related actions or operations to a resource so that the ACL can understand what it should to control.",
    "acl_f274c5592fac24c04d7113d3844cbdd9": "Define the \"Customers\" resource",
    "acl_bc727b5dce45b9c2738dbf9fa8f93676": "Add \"customers\" resource with a couple of operations",
    "acl_39f1b51bee0b3e71aa72bd338104fca6": "Defining Access Controls",
    "acl_ed44085894ac59a68ac1ca5315ff73f1": "Now we've roles and resources. It's time to define the ACL i.e. which roles can access which resources. This part is very important especially taking in consideration your default access level \"allow\" or \"deny\".",
    "acl_4b17262ed636f44d00c8e917dacad39e": "Set access level for roles into resources",
    "acl_ce64c2a97332ea72b17dda609ac2f361": "The allow method designates that a particular role has granted access to access a particular resource. The deny method does the opposite.",
    "acl_a5b93a112061fdc9876d21f96101e20e": "Querying an ACL",
    "acl_9f89b2d7a704bda130e600b7aef4063e": "Once the list has been completely defined. We can query it to check if a role has a given permission or not.",
    "acl_ce3445ff79c3445a6db89250e0049b3f": "Check whether role has access to the operations",
    "acl_0b2da28a441d04619e64bdbd1693747c": "Returns 0",
    "acl_691d9ca32d3773a83b41f05322d4c409": "Returns 1",
    "acl_8a27d9b40bc8d803daea548f997357b7": "Roles Inheritance",
    "acl_80a17801e24f2a52b7979f12557663d5": "You can build complex role structures using the inheritance that :1: provides. Roles can inherit from other roles, thus allowing access to supersets or subsets of resources. To use role inheritance, you need to pass the inherited role as the second parameter of the function call, when adding that role in the list.",
    "acl_088f8b957b4a2224e07d2d0ae5382ffd": "Add \"Administrators\" role inheriting from \"Guests\" its accesses",
    "acl_12624f31b9a5c9d94c4533f8f8b52c42": "Serializing ACL lists",
    "acl_67f68b730ec4de1a0cfadeeff91bb0aa": "To improve performance :1: instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:",
    "acl_c55dd0db3e994683568f64d1ea2842d3": "Check whether acl data already exist",
    "acl_6767be5450af756eddedcce3ca428b19": "... Define roles, resources, access, etc",
    "acl_42e15baacf37e48c8b6b0fc3d685343a": "Store serialized list into plain file",
    "acl_6f3131205fcad5ed8c2c9a9d1dd15f19": "Restore acl object from serialized file",
    "acl_2d332db098013fb168ecca2f52d5d3b1": "Use acl list as needed",
    "acl_5ec3a4b22225d07937424121b51b1319": "Acl Events",
    "acl_b7d11adb78dba3c9e8fcc5b19fa49d62": ":1: is able to send events to a :2: if it's present. Events are triggered using the type \"acl\". Some events when returning boolean false could stop the active operation. The following events are supported:",
    "acl_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "acl_41b79f8cf8c0967be09fcf51a7674d17": "Create an event manager",
    "acl_858f186aeef8329bf7131c4abdfb4c4a": "Attach a listener for type \"acl\"",
    "acl_cfa3b815c7d6f73ea6e0098449910686": "Setup the $acl",
    "acl_51961227af6de88a757992584152f3e7": "Bind the eventsManager to the acl component",
    "acl_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "acl_3f41296882bcc0cbef74b4d784e02dab": "The :1: interface must be implemented in order to create your own ACL adapters or extend the existing ones.",
    "annotations_5b62537b970942c6e74522a9bac0a813": "Annotations Parser",
    "annotations_4ef47a1e29a366b28e661d3c01e53776": "It is the first time that an annotations parser component is written in C for the PHP world. Phalcon\\\\Annotations is a general purpose component that provides ease of parsing and caching annotations in PHP classes to be used in applications.",
    "annotations_8607b4bddce7429b9836a05cfb049643": "Annotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:",
    "annotations_1640a00bae6064c54622a8c414788eb9": "In the above example we find some annotations in the comments, an annotation has the following syntax:",
    "annotations_7b5f373263440d6b00cce66ed3897f02": "@Annotation-Name[(param1, param2, ...)]",
    "annotations_4b9121a1cbe03e1b28131cc09ab82e2d": "Also, an annotation could be placed at any part of a docblock:",
    "annotations_f051f2cd8c32af61006b6b26a6b4a8a3": "The parser is highly flexible, the following docblock is valid:",
    "annotations_f1a303ea08e74cc1885c31781c219e97": "However, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:",
    "annotations_b0492c4b8c8a5c0bd1cf3a5eac65be4e": "Reading Annotations",
    "annotations_0bba117ba59bca6990078d40b48dd353": "A reflector is implemented to easily get the annotations defined on a class using an object-oriented interface:",
    "annotations_47438a527756cefbc23d7adedb0aadc8": "Reflect the annotations in the class Example",
    "annotations_42b762d20b4b6d4bfe9cfb054dcbf0f3": "Read the annotations in the class' docblock",
    "annotations_4876b30905b09010b76d07e95898722e": "Traverse the annotations",
    "annotations_00db140955ee87d7d6ce351ad9172c5c": "Print the annotation name",
    "annotations_d7223e046bc5cb1bdf3065fede6c74d3": "Print the number of arguments",
    "annotations_2fe3777bb9cdf2d8fddc2bb932133741": "Print the arguments",
    "annotations_b1925be3e508ddb8090cc414e067aa72": "The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.",
    "annotations_9ed946ff0c5927c807433adb7b0e9ee5": ":1: was used in the above example. This adapter only caches the annotations while the request is running, for this reason th adapter is more suitable for development. There are other adapters to swap out when the application is in production stage.",
    "annotations_f83a38934b334d779a6d91747f24f234": "Types of Annotations",
    "annotations_b8c4f164280d0ea40ee09419ba061366": "Annotations may have parameters or not. A parameter could be a simple literal (strings, number, boolean, null), an array, a hashed list or other annotation:",
    "annotations_f741bc8c97ddb297fa5f31c8f98de0cd": "Practical Usage",
    "annotations_919fb667c7546ab25b626125b6d77168": "Next we will explain some practical examples of annotations in PHP applications:",
    "annotations_7d283320fd7531d8889253f5ed266522": "Cache Enabler with Annotations",
    "annotations_a249273e53dbceb5deef37d790f32ad3": "Let's pretend we've the following controller and the developer wants to create a plugin that automatically start the cache if the latest action executed is marked as cacheable. First off all we register a plugin in the Dispatcher service to be notified when a route is executed:",
    "annotations_96d197a2fdcf7ba6f393dcc89284cc0a": "Attach the plugin to 'dispatch' events",
    "annotations_588799c77202b2d2d4748719bf70bc6a": "CacheEnablerPlugin is a plugin that intercept every action executed in the dispatcher enabling the cache if needed:",
    "annotations_c96cb68af4e76b1173ebbd86dcbbce5a": "Parse the annotations in the method currently executed",
    "annotations_afdd7046862b7a53c6c0de785c4ef771": "Check if the method has an annotation 'Cache'",
    "annotations_c8e8e44bdbdba89aeed039e5953e4191": "The method has the annotation 'Cache'",
    "annotations_a1311b1392ee702730c71383a4635db0": "Get the lifetime",
    "annotations_83aa4f69e139473dc062b50930961e43": "Check if there is an user defined cache key",
    "annotations_61036bedcdbfdbc453e22acd4d1e42c9": "Enable the cache for the current method",
    "annotations_414a26b582c57683e19a2b00bbdbbb40": "Now, we can use the annotation in a controller:",
    "annotations_501e20ab8ddd3a4cd24d4deac6beeb64": "Choose template to render",
    "annotations_7e9e9df1430b63f01627c6ba13a1cfb3": "In this example we're going to use annotations to tell :1: what template must me rendered once the action has been executed:",
    "annotations_d53799f5a2fb02e1152ac8e975d07526": "Annotations Adapters",
    "annotations_1f3c5fb9054e5de8b9e981068a4db586": "This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:",
    "annotations_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "annotations_4a796a3923bf7a5469b0cf40f2ec3e01": "The :1: interface must be implemented in order to create your own annotations adapters or extend the existing ones.",
    "apache_980177b08e4d9434a584ed1d7affd9c5": "Apache Installation Notes",
    "apache_f5f74f14af90f6465d786a06e1e0d6ec": ":1: is a popular and well known web server available on many platforms.",
    "apache_68d3e85aa63aa662569b0bc09eadc769": "Configuring Apache for Phalcon",
    "apache_302e3e21e0f814fce2fec0a678c9cb8d": "The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod-rewrite module allowing to use friendly urls and the :1:. Commonly an application has the following structure:",
    "apache_16ffba90f0c26620fe972d6349e62c45": "Directory under the main Document Root",
    "apache_687c102724c0c1508f209430f2403a32": "This being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application's document root (public/).",
    "apache_c9e17a433282cb8798b80a2000dfc80f": "Now a second .htaccess file is located in the public/ directory, this re-writes all the URIs to the public/index.php file:",
    "apache_9e94326392804d0e29dbcbf464217e38": "If you do not want to use .htaccess files you can move these configurations to the apache's main configuration file:",
    "apache_ebcc030276fd3491142c88ffb86f1201": "Virtual Hosts",
    "apache_3d95c0322dd81f6a93fa8bb93ab0d95b": "And this second configuration allows you to install a Phalcon application in a virtual host:",
    "applications_b3473fd26b7d8cc92e497638ddc6ccd3": "MVC Applications",
    "applications_bb4089f1ad71124b3a2e0585beb62d1e": "All the hard work behind orchestrating the operation of MVC in Phalcon is normally done by :1:. This component encapsulates all the complex operations required in the background, instantiating every component needed and integrating it with the project, to allow the MVC pattern to operate as desired.",
    "applications_5c72b7de87d984c178bc0e685791918e": "Single or Multi Module Applications",
    "applications_30f30bef89d983b1a62c9e5ff1737a1e": "With this component you can run various types of MVC structures:",
    "applications_f097132aa35267eefdbc61076bc00ea6": "Single Module",
    "applications_416800eeb4591d20f3650afb9c5cbe71": "Single MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:",
    "applications_aeb6b481a934736a9317de8e35b816ca": "If namespaces are not used, the following bootstrap file could be used to orchestrate the MVC flow:",
    "applications_faa502b951ab798137c6cb6e31d62100": "Registering the view component",
    "applications_515ae1eb1a3c418c9df6567ee8ebc937": "If namespaces are used, the following bootstrap can be used:",
    "applications_290a704190b60c65fce3b4833c72f709": "Use autoloading with namespaces prefixes",
    "applications_ce131ddce42f7e3db591ccc00b36076c": "Register the dispatcher setting a Namespace for controllers",
    "applications_5751c2fd1cb6ec657c0ee1645cd00695": "Multi Module",
    "applications_655e8a68e201a868cce8e36a8694ab55": "A multi-module application uses the same document root for more than one module. In this case the following file structure can be used:",
    "applications_2da6e9ab0cc34715fd676223767bc44e": "Each directory in apps/ have its own MVC structure. A Module.php is present to configure specific settings of each module like autoloaders or custom services:",
    "applications_d3477be4fcfb5b2e53eb426e85a84ad1": "Registering a dispatcher",
    "applications_44e1cebcbff50d87515a10aa14148592": "A special bootstrap file is required to load the a multi-module MVC architecture:",
    "applications_6346b563f17241e069afc0450dbf99ab": "Specify routes for modules",
    "applications_af3b0c5f3814f511560f1328c6a3e421": "Create an application",
    "applications_e09da7fe34c2e54c065067b026d5c495": "Register the installed modules",
    "applications_6e390072cbe16eea871f567953e9ed8f": "Handle the request",
    "applications_0d4cde41b79e03bb90ff94219e5b5a66": "If you want to maintain the module configuration in the bootstrap file you can use an anonymous function to register the module:",
    "applications_8faa972d61c8284d6df2e1a2a954449a": "Creating a view component",
    "applications_bf3405f13bd7a17626e69f61bce6beb1": "Set options to view component",
    "applications_284dd2a54aa8555edb3c0ff30d7b1f50": "When :1: have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by :1: according to the module to be executed.",
    "applications_f755654cd30447787e75f8ac4b685c21": "Understanding the default behavior",
    "applications_e6f1ffd103e3b041c357ff5924779bde": "If you've been following the :1: or have generated the code using :2:, you may recognize the following bootstrap file:",
    "applications_4db062df9a2bcaaed11dacb62050066c": "Register autoloaders",
    "applications_b0ee5187535bf9ed0d422b1c5d468803": "Register services",
    "applications_5b7a57d61632637bde6f41d00b356952": "The core of all the work of the controller occurs when handle() is invoked:",
    "applications_5772ed72bed6d4143cdce5714eae250b": "Manual bootstrapping",
    "applications_793bb14c9ead67b9e56d7a2bc15349cc": "If you do not wish to use :1:, the code above can be changed as follows:",
    "applications_5c643e5fc4e1e2b139dc49223954f07d": "Get the 'router' service",
    "applications_e9235990f60bd87dea2cd1916c5dda0b": "Pass the processed router parameters to the dispatcher",
    "applications_f65e37f68b2dad49dd4c7468e500f099": "Start the view",
    "applications_a30744e6e9ab2ec2d650bb7e14e7ee87": "Dispatch the request",
    "applications_667f3a1cf267224a9d75f89198f8785f": "Render the related views",
    "applications_daa91b7614c4e32e5dc9b94f30ad9738": "Finish the view",
    "applications_4b93c4493e563230dee6f09fbd73bd33": "Pass the output of the view to the response",
    "applications_58548ea8c5de29ab761b4099bdd8281c": "Send the request headers",
    "applications_730373716a0b13e03cde896c002673b5": "Print the response",
    "applications_0ba50b9f871396720667469306cea51a": "The following replacement of :1: lacks of a view component making it suitable for Rest APIs:",
    "applications_f6f4e66567a39e1be5517eb1beada4ae": "Get the returned value by the latest executed action",
    "applications_21d70c170fa633a6f5779c5c147a153d": "Check if the action returned is a 'response' object",
    "applications_efc3bcebe3b11474027090395185edd2": "Send the request",
    "applications_a40a4e9d3dcfc83a609532a73f819a22": "Yet another alternative that catch exceptions produced in the dispatcher forwarding to other actions consequently:",
    "applications_7d5e11cb2a96eab801a42ec98443338b": "An exception has occurred, dispatch some controller/action aimed for that",
    "applications_d7460a4ca376e9879f52661a9dc6ec36": "Although the above implementations are a lot more verbose than the code needed while using :1:, it offers an alternative in bootstrapping your application. Depending on your needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality.",
    "applications_e49f4ec3985839b3237b74a15b496e3e": "Application Events",
    "applications_78a8a05e73b3e971df42fd7dd7a6a6b0": ":1: is able to send events to the :2: (if it is present). Events are triggered using the type \"application\". The following events are supported:",
    "applications_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "assets_744c3ef6243d76429a95f010a3d47cff": "Assets Management",
    "assets_b0278ad267d2461d3eeafc96122e4a31": "Phalcon\\\\Assets is a component that allows the developer to manage static resources such as css stylesheets or javascript libraries in a web application.",
    "assets_4c79a3fe144f02b4051810553a60c81d": ":1: is available in the services container, so you can add resources from any part of the application where the container is available.",
    "assets_647e8a84d61a2443e8d863a01727bdb8": "Adding Resources",
    "assets_fab89985217fa01f7d36db4a2aae5611": "Assets supports two built-in resources: css and javascripts. You can create other resources if you need. The assets manager internally stores two default collections of resources one for javascript and another for css.",
    "assets_adae69cdf99e915a88e999a00581ded7": "You can easily add resources to these collections like follows:",
    "assets_97b60f20c393002ceb1986abec9f384b": "Add some local CSS resources",
    "assets_541ee5ffa36c80f2738a6aac8cf5fbb5": "and some local javascript resources",
    "assets_9d066fce3103272821fc1c8a5c911fb0": "Then in the views added resources can be printed:",
    "assets_40aa86d406a1567e2bb210cfccefd275": "Local/Remote resources",
    "assets_467802b99de71cf3cdd123387595c997": "Local resources are those who're provided by the same application and they're located in the document root of the application. URLs in local resources are generated by the 'url' service, usually :1:.",
    "assets_3f915d0e3e0a36ea435f995608b6919b": "Remote resources are those such as common library like jquery, bootstrap, etc. that are provided by a CDN.",
    "assets_749e2c3df0bf62ddd51bf3b50e61a2c4": "netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css', false)",
    "assets_ad9b4b4c5b5164f6d3d77012df79c45f": "Collections",
    "assets_b0af0daf04f160e1588b0acba893eb88": "Collections groups resources of the same type, the assets manager implicitly creates two collections: css and js. You can create additional collections to group specific resources for ease of placing those resources in the views:",
    "assets_8a454675029935590059e4a4207f2252": "Javascripts in the header",
    "assets_b51c560c9b848906d21798a4e9124a11": "Javascripts in the footer",
    "assets_4ce74cf3cd3f9c87190cc9cdcdd697de": "Then in the views:",
    "assets_f051468092cd30c784f47c1c1f518b5e": "Prefixes",
    "assets_68847db02bfef9a3f2cbb88f3bb52ebc": "Collections can be URL-prefixed, this allows to easily change from a server to other at any moment:",
    "assets_2dd20ca96e294ccca7d0b0498988674e": "A chainable syntax is available too:",
    "assets_5aa494e28988749ce9c0590848cf362e": "cdn.example.com/')",
    "assets_ae62cffd270c3e0cab6f30fefed9136c": "Minification/Filtering",
    "assets_3bf58860ebfa7528c3c1159d5e0a9565": "Phalcon\\\\Assets provides built-in minification of Javascript and CSS resources. The developer can create a collection of resources instructing the Assets Manager which ones must be filtered and which ones must be left as they are. In addition to the above, Jsmin by Douglas Crockford is part of the core extension offering minification of javascript files for maximum performance. In the CSS land, CSSMin by Ryan Day is also available to minify CSS files:",
    "assets_13288958d7900905c0705e80f54a8091": "The following example shows how to minify a collection of resources:",
    "assets_24d37315fe2dd7cc09472c27e3f5f7f8": "These Javascripts are located in the page's bottom",
    "assets_569bb9f943f3f450a88d429c86ce78a2": "The name of the final output",
    "assets_26d8454d754918be398e0b9fdbeb5ae0": "The script tag is generated with this URI",
    "assets_506859d439edc456b63250e6d21506ba": "This is a remote resource that does not need filtering",
    "assets_8483fe8dbc76cbc7cd4c561a9fb8e9d4": "These are local resources that must be filtered",
    "assets_bb21e08f5118d8e756e5931ad34a0cb4": "Join all the resources in a single file",
    "assets_e7e2222b6c8fc52259a40f333221fd7c": "Use the built-in Jsmin filter",
    "assets_846d0f7848b284338b9f8cf2925e60ef": "Use a custom filter",
    "assets_da38d11ae4639174732c3a3a7b3c539a": "It starts getting a collection of resources from the assets manager, a collection can contain javascript or css resources but not both. Some resources may be remote, that is, they're obtained by HTTP from a remote source for further filtering. It is recommended to convert the external resources to local eliminating the overhead of obtaining them.",
    "assets_86e4862e10edfdeada3c6627782eb1a1": "As seen above, method addJs is used to add resources to the collection, the second parameter indicates whether the resource is external or not and the third parameter indicates whether the resource should be filtered or left as is:",
    "assets_018bbed3aeeec02df927ee3f6c36fe33": "This a remote resource that does not need filtering",
    "assets_117e99e366d35d81ada7c3bf77dfcab1": "Filters are registered in the collection, multiple filters are allowed, content in resources are filtered in the same order as filters were registered:",
    "assets_68e1c7c7c02b0c92d429361a93e217b4": "Note that both built-in and custom filters can be transparently applied to collections. Last step is decide if all the resources in the collection must be joined in a single file or serve each of them individually. To tell the collection that all resources must be joined you can use the method 'join':",
    "assets_a9e35114d8dbc115f304b3e8ec0db44f": "The name of the final file path",
    "assets_de1e687c95ee8b073172990876438f26": "The script html tag is generated with this URI",
    "assets_a4bc709eadced84a672028c6471bad63": "If resources are going to be joined, we need also to define which file will be used to store the resources and which uri will be used to show it. These settings are set up with setTargetPath() and setTargetUri().",
    "assets_4e6bcce78953fc4fab8ab028f9630b0e": "Built-In Filters",
    "assets_b71d0d7b82df795a3f71bc36986017d6": "Phalcon provides 2 built-in filters to minify both javascript and css respectively, their C-backend provide the minimum overhead to perform this task:",
    "assets_d1b2812923f7a6a1b2e2d1c556d842ce": "Custom Filters",
    "assets_29d376fce56b9b142527b0a8f433e827": "In addition to built-in filters, a developer can create his own filters. These can take advantage of existing and more advanced tools like YUI_, Sass_, Closure_, etc.:",
    "assets_5f64b35b08613f5d7f879a85b64466db": "Write the string contents into a temporal file",
    "assets_03bdedb550012cb6cd20dab6d7eb4edd": "Return the contents of file",
    "assets_cd6b467ef5d856d72fe964ed65ffd28a": "Usage:",
    "assets_c0ce9fe3866c4f3e96453e2d0c1cc01d": "Get some CSS collection",
    "assets_4a9cea3c8c1c8fc27161b32c96823eba": "Add/Enable the YUI compressor filter in the collection",
    "assets_5360cfefe9d89ff1c2f947439de199a3": "Custom Output",
    "assets_6a556a51195344c6d4e6f145ea73b690": "Methods outputJs and outputCss are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:",
    "hello-world_1800af32d03bd008a9402366cb562b10": "Hello World Benchmark",
    "hello-world_8c760de0e55016aff8070c32111cb899": "How the benchmarks were performed?",
    "hello-world_4f155b32e56ee1e16e7edb490f8d3544": "We created a \"Hello World\" benchmark seeking to identify the smallest load overhead of each framework. Many people don't like this kind of benchmark because real-world applications require more complex features or structures. However, these tests identify the minimum time spent by each framework to perform a simple task. Such a task represents the minimum requirement for every framework to process a single request.",
    "hello-world_e097d55e97d0ff4d888a1c2a9eed5357": "More specifically, the benchmark only measures the time it takes for a framework to start, run an action and free up resources at the end of the request. Any PHP application based on an MVC architecture will require this time. Due to the simplicity of the benchmark, we ensure that the time needed for a more complex request will be higher.",
    "hello-world_49ec9562ad77b0b76cf7d70688d2933b": "A controller and a view have been created for each framework. The controller \"say\" and action \"hello\". The action only sends data to the view which displays it (\"Hello!\"). Using the \"ab\" benchmark tool we sent 2000 requests using 10 concurrent connections to each framework.",
    "hello-world_700a6ad346d43e1699d5c0b3aadc88d3": "What measurements were recorded?",
    "hello-world_ec893cb35c0849db46bf2925bc983027": "These were the measurements we record to identify the overall performance of each framework:",
    "hello-world_d61175ed4b917a6f274be68218549f9c": "Requests per second",
    "hello-world_d9d846f543aa53ba12115d9d4138e5da": "Time across all concurrent requests",
    "hello-world_12c06e7bb9c136c9591eba00a6d20df5": "Number of included PHP files on a single request (measured using function get_included_files_.",
    "hello-world_930912b857a16683e9923928631734f2": "Memory Usage per request (measured using function memory_get_usage_.",
    "hello-world_2fca5a426c97e12309c77c8ebb5f9e22": "Yii_",
    "hello-world_800b657c3f98723ce95ad369284e8067": ":1: ",
    "hello-world_a0fc6901c92cc0d1ceeefbb499050deb": ":1: ",
    "hello-world_974854eecb92ef6958153031d2980ebf": "Kohana_",
    "hello-world_20db5a3feffc2946e1e78db4565ade7f": ":1: ",
    "hello-world_4af0e1cd0bb6a37e3b7e6438a72e29fe": "Laravel_",
    "hello-world_1814cb15a7189e6fa2eec7874ecb2a15": "CodeIgniter_",
    "hello-world_cfd6d0dbc2b5533200c7d0c3369a32d8": "Participant Frameworks",
    "hello-world_b41eb33ab6ec77b77338ec73c1482297": "Results",
    "hello-world_554f6acc0768e3c37be3076951b18cb2": "Yii (YII_DEBUG=false) Version yii-1.1.13",
    "hello-world_7b4a95f3d066b3953d50b6de061578ad": "localhost/bench/helloworld/yii/index.php?r=say/hello",
    "hello-world_8867914463339f2de85ba83ed5558268": "www.zeustech.net/",
    "hello-world_6ea2f8b0a2d60668dd736d98dedbd3b9": "www.apache.org/",
    "hello-world_1f68a2266ffba5950c721cc793e612c9": "Symfony Version 2.1.6",
    "hello-world_48e76b0b84660431c3da92ec7e5dc67f": "localhost/bench/Symfony/web/app.php/say/hello/",
    "hello-world_c1227286363b63972f06ff817d206c93": "CodeIgniter 2.1.0",
    "hello-world_569bccad7acf9a43ca3b7453ad07c9d3": "localhost/bench/codeigniter/index.php/say/hello",
    "hello-world_f2e90ea49af5972b53ac103544e70493": "Kohana 3.2.0",
    "hello-world_87245e37e5d13d3584052c0721154a82": "localhost/bench/helloworld/kohana/index.php/say/hello",
    "hello-world_8f62194b8e4f52233f1177a108718f7b": "Fuel 1.2.1",
    "hello-world_c5f6f35c74d217893615cdea37de662a": "localhost/bench/helloworld/fuel/public/say/hello",
    "hello-world_792a2e281fc8a89af0a6f20f04efc9d6": "Zend Framework 1.11.11",
    "hello-world_7659b81b72e8d355f7e16f921ac01e83": "localhost/bench/helloworld/zendfw/public/index.php",
    "hello-world_d55c02a93225bb3b6c5ffcf017d93e85": "Laravel 3.2.5",
    "hello-world_b31d24289741d5bb7d7a3efdea5debb4": "localhost/bench/helloworld/laravel/public/say/hello",
    "hello-world_48c229f162cc5fe15ece777a27c869d9": "Phalcon Version 0.8.0",
    "hello-world_396e421716a36dc752e4ab5147ac6b49": "localhost/bench/helloworld/phalcon/index.php?_url=/say/hello",
    "hello-world_a94983dc1e4458d958a1a8e817cc47bf": "Graphs",
    "hello-world_a01002ed3c81362911d4b3598f976d34": "The first graph shows how many requests per second each framework was able to accept. The second shows the average time across all concurrent requests.",
    "hello-world_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "hello-world_68ef87283b6316f5d9008d3f147a2511": "The compiled nature of Phalcon offers extraordinary performance that outperforms all other frameworks measured in these benchmarks.",
    "micro_eab4d07d8a9575f527b3730ef3370c35": "Micro Benchmark",
    "micro_8c760de0e55016aff8070c32111cb899": "How the benchmarks were performed?",
    "micro_fd6c87bda80f6e85247efbbab64449f9": "We created a \"Hello World\" benchmark seeking to identify the smallest load overhead of each framework. Similar to the benchmark made with Frameworks.",
    "micro_5ba672f78c975f4589f71d697256adcc": "Using a route for the HTTP method 'GET' we pass a parameter to a handler returning a \"Hello $name\" response.",
    "micro_700a6ad346d43e1699d5c0b3aadc88d3": "What measurements were recorded?",
    "micro_ec893cb35c0849db46bf2925bc983027": "These were the measurements we record to identify the overall performance of each framework:",
    "micro_d61175ed4b917a6f274be68218549f9c": "Requests per second",
    "micro_d9d846f543aa53ba12115d9d4138e5da": "Time across all concurrent requests",
    "micro_12c06e7bb9c136c9591eba00a6d20df5": "Number of included PHP files on a single request (measured using function get_included_files_.",
    "micro_930912b857a16683e9923928631734f2": "Memory Usage per request (measured using function memory_get_usage_.",
    "micro_75282adcbb5eed57dae45f0de32fd44a": "Slim_",
    "micro_b683bb88c3d4b8c8228223644b03756c": "Silex_",
    "micro_cfd6d0dbc2b5533200c7d0c3369a32d8": "Participant Frameworks",
    "micro_b41eb33ab6ec77b77338ec73c1482297": "Results",
    "micro_6228447f56f334d29ca9ab469fff6462": "Slim Framework",
    "micro_8867914463339f2de85ba83ed5558268": "www.zeustech.net/",
    "micro_6ea2f8b0a2d60668dd736d98dedbd3b9": "www.apache.org/",
    "micro_4ae903c204ca77a929c7e45e6fa9de81": "Silex",
    "micro_3b5d5768410054932ff9d0f1dffe8028": "Phalcon 0.5.0",
    "micro_a94983dc1e4458d958a1a8e817cc47bf": "Graphs",
    "micro_a01002ed3c81362911d4b3598f976d34": "The first graph shows how many requests per second each framework was able to accept. The second shows the average time across all concurrent requests.",
    "micro_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "micro_68ef87283b6316f5d9008d3f147a2511": "The compiled nature of Phalcon offers extraordinary performance that outperforms all other frameworks measured in these benchmarks.",
    "benchmark_af2e2da955fd1ab2268f97886e9c08eb": "Framework Benchmarks",
    "benchmark_7140da399fbd56a9acbbf281c14f5440": "In the past, performance was not considered one of the top priorities when developing web applications. Reasonable hardware was able to compensate for that. However when Google :1: to take site speed into account in the search rankings, performance became one of the top priorities alongside functionality. This is yet another way in which improving web performance will have a positive impact on a website.",
    "benchmark_0f23fda21483a4d09237fa289d2d918e": "The benchmarks below, show how efficient Phalcon is when compared with other traditional PHP frameworks. These benchmarks are updated as stable versions are released from any of the frameworks mentioned or Phalcon itself.",
    "benchmark_e2eb53dc521cdc706904c9fd66811349": "We encourage programmers to clone the test suite that we are using for our benchmarks. If you have any additional optimizations or comments please :1:. :2:",
    "benchmark_d733affe450e8a7313f7a49720bdc7c8": "What was the test environment?",
    "benchmark_b30930151f789f02ee036390e2c271ef": ":1: intermediate code cache was enabled for all frameworks. Any Apache mod-rewrite feature was disabled when possible to avoid potentially additional overheads.",
    "benchmark_d7127484bf76faec191fd8a65c68f866": "The testing hardware environment is as follows:",
    "benchmark_cd36fee2ff1b82b5ac027acd606f85b4": "Operating System: Mac OS X Lion 10.7.4",
    "benchmark_009f956f811857376bea3b8eb000da31": "Web Server: Apache httpd 2.2.22",
    "benchmark_45b066717b873ed99c75c441a6e86997": "PHP: 5.3.15",
    "benchmark_7d841087733157926b85d09980e11166": "CPU: 2.04 Ghz Intel Core i5",
    "benchmark_422368478cfa8180eca10e9ebb37c4c7": "Main Memory: 4GB 1333 MHz DDR3",
    "benchmark_2cae75358bedae20d7806d941da0ad0e": "Hard Drive: 500GB SATA Disk",
    "benchmark_49935aaf4417e5f214cd8b3ab46bb2ea": "*PHP version and info:*",
    "benchmark_779adfafb23b682a087d543bd32bf95b": "List of Benchmarks",
    "benchmark_7a1fe9928e011d07409c7e98edde0210": "ChangeLog",
    "benchmark_dbaabff1cfbd442a3bf605fddc0c302c": "`Speed, performance and human perception:1:",
    "benchmark_b0492394b589b5ff8f6fb98048d65d8f": "External Resources",
    "built-in_f4e44f5b67bc461492c485de3482861f": "Using PHP Built-in webserver",
    "built-in_34d6fa77a4b13cf9bfc63b2fea4aac90": "As of PHP 5.4.0, you can use PHP's on built-:1: web server for development.",
    "built-in_0140884a37f0765e4896b5d62697a5c3": "To start the server type:",
    "built-in_1b20c836cc0e00031150a50f170c15ea": "If you want to rewrite the URIs to the index.php file use the following router file (.htrouter.php):",
    "built-in_699feca0985169a909f4d4beb52e11aa": "and then start the server with:",
    "built-in_13e0be028514dcaf51fb75036408c591": "Then point your browser to http://localhost:8000/ to check if everything is working.",
    "cache_06ac1885f3b22cac3acb8fef0ae8ee71": "Improving Performance with Cache",
    "cache_3122c9dd1e17c470686f28adea6b37ad": "Phalcon provides the :1: class allowing faster access to frequently used or already processed data. :1: is written in C, achieving higher performance and reducing the overhead when getting items from the backends. This class uses an internal structure of frontend and backend components. Front-end components act as input sources or interfaces, while backend components offer storage options to the class.",
    "cache_2b70fe8d1826a4e23acf89d33ef5f6b5": "When to implement cache?",
    "cache_adf301b4ffdcf215970175563ee6a903": "Although this component is very fast, implementing it in cases that are not needed could lead to a loss of performance rather than gain. We recommend you check this cases before using a cache:",
    "cache_cd0db037be2510443f9b193ae9b3600a": "You are making complex calculations that every time return the same result (changing infrequently)",
    "cache_9dda392669c21d7bc679e1eec7cc0392": "You are using a lot of helpers and the output generated is almost always the same",
    "cache_484d8d6a4c26b6cef270d928860ff767": "You are accessing database data constantly and these data rarely change",
    "cache_7c9d91a45b7f7bb2fafb4299a61e0840": "Caching Behavior",
    "cache_1472c7d751cd680997c7e65cd9e8deeb": "The caching process is divided into 2 parts:",
    "cache_296e7f3495199a11551ae23331add0c4": "**Frontend**: This part is responsible for checking if a key has expired and perform additional transformations to the data before storing and after retrieving them from the backend-",
    "cache_17270e790dcc56563afe60043579dfae": "**Backend**: This part is responsible for communicating, writing/reading the data required by the frontend.",
    "cache_a30294c78d838e8593e4a0bc1059c46a": "Caching Output Fragments",
    "cache_8ca64dcebd79c1a9cd31749101484866": "An output fragment is a piece of HTML or text that is cached as is and returned as is. The output is automatically captured from the ob_* functions or the PHP output so that it can be saved in the cache. The following example demonstrates such usage. It receives the output generated by PHP and stores it into a file. The contents of the file are refreshed every 172800 seconds (2 days).",
    "cache_04959022cca6bdfd14abdfcd55ea50b3": "The implementation of this caching mechanism allows us to gain performance by not executing the helper Phalcon\\\\Tag::linkTo call whenever this piece of code is called.",
    "cache_41a11b1a04dfedec02baf80cf4eaf762": "Create an Output frontend. Cache the files for 2 days",
    "cache_11e456117d271495bc967de753b45149": "Create the component that will cache from the \"Output\" to a \"File\" backend",
    "cache_955b78a3edefc5b19e177287616694ba": "Set the cache file directory - it's important to keep the \"/\" at the end of",
    "cache_5fcfde64f24f43d708d7cf2548f2076c": "the value for the folder",
    "cache_eff938041f42201190f587959a23dfd1": "Get/Set the cache file to ../app/cache/my-cache.html",
    "cache_89f2a437bdfa2001a281e5decbad302e": "If $content is null then the content will be generated for the cache",
    "cache_a03ec28be539470ccf2ca917b1bd647a": "Print date and time",
    "cache_91e2ee7e7ef772b62b39f1f432ad8354": "Generate a link to the sign-up action",
    "cache_d581137e0d9bdf3758eaaca91853dd0c": "Store the output into the cache file",
    "cache_3c863c5a660c5145280a5be84766e095": "Echo the cached output",
    "cache_84e4419f93b729fa91b8ff96a4a94f46": "transparently captures that output and stores it in the cache file (when the cache is generated) or it sends it back to the user pre-compiled from a previous call, thus avoiding expensive operations.",
    "cache_6ae3524ecce11faef5aab7af70762fc7": "Caching Arbitrary Data",
    "cache_402407b0e6ae3113ed1ec183e4b5200f": "Caching just data is equally important for your application. Caching can reduce database load by reusing commonly used (but not updated) data, thus speeding up your application.",
    "cache_99a52a4b8c30cc90f7ded0df6998ba16": "File Backend Example",
    "cache_6ba467224dd45213b045859a05029af8": "One of the caching adapters is 'File'. The only key area for this adapter is the location of where the cache files will be stored. This is controlled by the cacheDir option which *must* have a backslash at the end of it.",
    "cache_6a929840227fcdc8bb3d4b16b53e599e": "Cache the files for 2 days using a Data frontend",
    "cache_989062527cdac2872e9cffda4653ecd8": "Create the component that will cache \"Data\" to a \"File\" backend",
    "cache_b6981c87706285da49e15242b7d785bf": "Set the cache file directory - important to keep the \"/\" at the end of",
    "cache_985becda271eb01dd0940ab4705aa629": "of the value for the folder",
    "cache_d99623f9040482f1edf8fed520e01ef6": "Try to get cached records",
    "cache_71968ac3edfdbeb821bbbd7d492718de": "$robots is null because of cache expiration or data does not exist",
    "cache_4aa8dcff400337e4dd2ef094fb66e362": "Make the database call and populate the variable",
    "cache_f3762eaf6f2e3ac209ccfb08fd036c9c": "Store it in the cache",
    "cache_062c759655f7a03e81a39817083b59bb": "Use $robots :)",
    "cache_c5935671738c0da3f5ff4aed032d31c0": "Memcached Backend Example",
    "cache_79aadee161b6a59afce96cf849258882": "The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.",
    "cache_59b2defd92fc3a622a6e444101392bbe": "Cache data for one hour",
    "cache_415c404a0afde56e80fc82290caab243": "Create the component that will cache \"Data\" to a \"Memcached\" backend",
    "cache_27c9c860a0e993fc9cd8fe1f98c2dd13": "Memcached connection settings",
    "cache_d05c101ebb1909c9d72ef91e01cf89a2": "Querying the cache",
    "cache_3ae0ffd78840acc40f2ebe7e2304c772": "The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.",
    "cache_1795edb9ba9a4d9f8d4d85bce0fdd063": "Retrieve products by key \"myProducts\"",
    "cache_616ca431dc5beba8d732a59252636402": "If you want to know which keys are stored in the cache you could call the queryKeys method:",
    "cache_9403821dad96cd6f938a8fc47a081716": "Query all keys used in the cache",
    "cache_e5311d757533271a2fca9642ace44d5c": "Query keys in the cache that begins with \"my-prefix\"",
    "cache_ef270f6b7b53b2ff16cb9fced6aa0417": "Deleting data from the cache",
    "cache_0af2d797680bcdcbd10c4cc2b00dea02": "There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.",
    "cache_30924304cde46e46cc26b41abac3a809": "Delete an item with a specific key",
    "cache_93845048354030bb303a57ba33651759": "Delete all items from the cache",
    "cache_6638f014bd3ed173498a7d77910661cd": "Checking cache existence",
    "cache_7ccf904fb74b4ad5fe39064a01b403c2": "It is possible to check if a cache already exists with a given key:",
    "cache_83b4b1fa9918be910381d8fd387c55fd": "Lifetime",
    "cache_b3681defebf1d2af5ccac3b4119ceec6": "A \"lifetime\" is a time in seconds that a cache could live without expire. By default, all the created caches use the lifetime set in the frontend creation. You can set a specific lifetime in the creation or retrieving of the data from the cache:",
    "cache_aecfdaefd5baa2b285505e485398b08d": "Setting the lifetime when retrieving:",
    "cache_ecfd3939e33e951b1cdf184b2f8c335e": "Setting the cache when getting a result",
    "cache_7bbf5f4ae3ef33ddc2d7dabd5af22f7b": "Setting the lifetime when saving:",
    "cache_372540a0fb2a18360b66eab2e85956fb": "Setting the cache when saving data",
    "cache_020ff5e13c915f51289bcc16a347f348": "Multi-Level Cache",
    "cache_d263cfdbda65a2bf2de853b301110281": "This feature ​of the cache component, ​allows ​the developer to implement a multi-level cache​. This new feature is very ​useful because you can save the same data in several cache​ locations​ with different lifetimes, reading ​first from the one with the faster adapter and ending with the slowest one until the data expire​s​:",
    "cache_00bc8a652749364a924e67bd2631f979": "Backends are registered from the fastest to the slower",
    "cache_8376c010cf364f6099bd9ec2242f95f0": "Save, saves in every backend",
    "cache_1b1a3cb2e9456a2d81cd4d587ec4324e": "Frontend Adapters",
    "cache_e1796468b3088973c3307c2c1c50f7a6": "The available frontend adapters that are used as interfaces or input sources to the cache are:",
    "cache_61a21d3b5fd23a15bcccc1482b40870e": "Implementing your own Frontend adapters",
    "cache_6eb7d539f744f20b5192425630a0e81f": "The :1: interface must be implemented in order to create your own frontend adapters or extend the existing ones.",
    "cache_902d7a8c16652aae3221595c8601c0af": "Backend Adapters",
    "cache_0c5acab923a04e8718efc8aa5f258c14": "The backend adapters available to store cache data are:",
    "cache_297b2519b953eb1823cc82dba9b7b55b": "Implementing your own Backend adapters",
    "cache_93b1796cb05e39ef4485e27c0b90b547": "The :1: interface must be implemented in order to create your own backend adapters or extend the existing ones.",
    "cache_31b59e1c932ab419df1003b4ddb7795d": "File Backend Options",
    "cache_cfd82201844dbf238f3f9211cdab3326": "This backend will store cached content into files in the local server. The available options for this backend are:",
    "cache_76e4d69d0bdb5e97ab0b9a8ee5838fea": "Memcached Backend Options",
    "cache_ec4d4b24cc1f2864b0a354a815f087c0": "This backend will store cached content on a memcached server. The available options for this backend are:",
    "cache_a710c13e5474dc1253d2547c745b985f": "APC Backend Options",
    "cache_d02994fdbc2fc39c08459a7520d37ef1": "This backend will store cached content on Alternative PHP Cache (APC_). The available options for this backend are:",
    "cache_97b207c9e38aa7f72bbf44a3a1045be9": "Mongo Backend Options",
    "cache_c613ead7f0b71f9d9aaf45d33ae1da20": "This backend will store cached content on a MongoDB server. The available options for this backend are:",
    "cache_c9528b343d562f70d1a0951a59199cf9": "XCache Backend Options",
    "cache_419ec6612f1e5e70cf3077edcdc773aa": "This backend will store cached content on XCache (XCache_). The available options for this backend are:",
    "cache_abe87b090af1d6029dbe8840c214141d": "There are more adapters available for this components in the :1:",
    "cherokee_652cb67b36f01584f07a075e22fca29c": "Cherokee Installation Notes",
    "cherokee_c1d9745e37dfaf13ee00c49dcfc2722b": ":1: is a high-performance web server. It is very fast, flexible and easy to configure.",
    "cherokee_56a1cdd3587cf76b784a7612b21ef88f": "Configuring Cherokee for Phalcon",
    "cherokee_f52a598d439cbd672b01adabe69ea284": "Cherokee provides a friendly graphical interface to configure almost every setting available in the web server. Start the cherokee administrator by executing with root /path-to-cherokee/sbin/cherokee-admin",
    "cherokee_828932ed3cdfef32f1513a9d2491d293": "Create a new virtual host by clicking on 'vServers', then add a new virtual server:",
    "cherokee_11572b2771834b87c8f26421286653d8": "The recently added virtual server must appear at the left bar of the screen. In the 'Behaviors' tab you will see a set of default behaviors for this virtual server. Click the 'Rule Management' button. Remove those labeled as 'Directory /cherokee_themes' and 'Directory /icons':",
    "cherokee_5be9dff8d6361c0645475005ce02a9a8": "Add the 'PHP Language' behavior using the wizard. This behavior allow you to run PHP applications:",
    "cherokee_7850e61c4012abc101764a2972c4c871": "Normally this behavior does not require additional settings. Add another behavior, this time in the 'Manual Configuration' section. In 'Rule Type' choose 'File Exists', then make sure the option 'Match any file' is enabled:",
    "cherokee_85bca13ff31964fc46cba1b8b5d4d6e0": "In the 'Handler' tab choose 'List & Send' as handler:",
    "cherokee_14cbd4ac488750dab86887d60a711c85": "Edit the 'Default' behavior in order to enable the URL-rewrite engine. Change the handler to 'Redirection', then add the following regular expression to the engine ^(.*)$:",
    "cherokee_83cb7fbbd3878494c70d48777fd44010": "Finally, make sure the behaviors have the following order:",
    "cherokee_1fafc250be3ff5cb78e2ea4facd0a5bb": "Execute the application in a browser:",
    "cli_d8b0d1e34b25db1d7588c63c80ca46ed": "Command Line Applications",
    "cli_b06b86bae30c7e9318c2270148e441ab": "CLI applications are executed from the command line. They are useful to create cron jobs, scripts, command utilities and more.",
    "cli_f6f429eb9ad945f547f04b04f67ce57a": "Structure",
    "cli_cff96e41ec35e70efbec5ec74e343a3e": "A minimal structure of a CLI application will look like this:",
    "cli_b7745075db341c8d316a5cda37e51c36": "app/config/config.php",
    "cli_0b699f8501d6f663fc2fd2b85af150b3": "app/tasks/MainTask.php",
    "cli_7fee53d9b144b210ecba99910327e725": "app/cli.php <-- main bootstrap file",
    "cli_448cbc477e8c68335b2a22300c49db96": "Creating a Bootstrap",
    "cli_7d3f73a4b4b6ef3b708cf4ba28258d4e": "As in regular MVC applications, a bootstrap file is used to bootstrap the application. Instead of the index.php bootstrapper in web applications, we use a cli.php file for bootstrapping the application.",
    "cli_04117c61cf865aa866cad78bace24460": "Below is a sample bootstrap that is being used for this example.",
    "cli_7de6afb1f05b7a8897d6bdd9e27b7afb": "Using the CLI factory default services container",
    "cli_d414a65783adf1be083dfbc25efed474": "Define path to application directory",
    "cli_c7a24ef50d08a17121ecfb7a9e58ddc8": "Load the configuration file (if any) ",
    "cli_6535177d94825112c9adb341afe1fc02": "Create a console application",
    "cli_1fedf20a4623e73400b7e36b68feee2a": "define global constants for the current task and action",
    "cli_5062480511df35df4d7a5bb393556e91": "handle incoming arguments",
    "cli_6e7a3acc1a481f8f72d8b5fb22365b29": "This piece of code can be run using:",
    "cli_16a463e446a3db7d6923abf39284e5c8": "Tasks",
    "cli_90ff34bad02c33f4416b8f401b6bfef9": "Tasks work similar to controllers. Any CLI application needs at least a mainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.",
    "cli_1b1c48668af4d19257308cead1a6890a": "Below is an example of the app/tasks/MainTask.php file",
    "cli_6c285ece3eff07b4c3388d86af2d194d": "Processing action parameters",
    "cli_e5688d2f9aabfa125fa7835d55882cdc": "It's possible to pass parameters to actions, the code for this is already present in the sample bootstrap.",
    "cli_0995ae67b473a890eb4fbc76b8fae9b9": "If you run the the application with the following parameters and action:",
    "cli_cc62382fa7cca3d492d10ea7f5f7c481": "Running tasks in a chain",
    "cli_85c7d2c33e9788c7a249e8ff99d33ada": "It's also possible to run tasks in a chain if it's required. To accomplish this you must add the console itself to the DI:",
    "cli_55ab633837e29b2cfc056603ac6dc5be": "Then you can use the console inside of any task. Below is an example of a modified MainTask.php:",
    "cli_862081cd7f0eb6b6d8b2f674e128770a": "However, it's a better idea to extend \\\\Phalcon\\\\CLI\\\\Task and implement this kind of logic there.",
    "config_7aace998d2b823d2bade087c56c195b2": "Reading Configurations",
    "config_a03df62f83b6c3752553696d07d63328": ":1: is a component used to read configuration files of various formats (using adapters) into PHP objects for use in an application.",
    "config_3bb7a0e24926eb4b6474c7c719359e62": "File Adapters",
    "config_159270e976fea8c07aeb4890470109eb": "The adapters available are:",
    "config_bc1cde98089e26b0bef7655a83b83124": "Native Arrays",
    "config_cdc52ab5db8bfb6f482dcf21c98b48ec": "The next example shows how to convert native arrays into Phalcon\\\\Config objects. This option offers the best performance since no files are read during this request.",
    "config_837fe0ba814526983e312e1180d7c522": "If you want to better organize your project you can save the array in another file and then read it.",
    "config_7708d5b9f14191306a80322e64ab347c": "Reading INI Files",
    "config_2dc5fd108360f45b49fcc5bf77d89296": "Ini files are a common way to store settings. Phalcon\\\\Config uses the optimized PHP function parse_ini_file to read these files. Files sections are parsed into sub-settings for easy access.",
    "config_2535c61c5ca2e6e27dcb5c184b42a894": "You can read the file as follows:",
    "config_b427b34340f6904f9bff330505fb4893": "Merging Configurations",
    "config_97f80a55499548203fcc6d2e65086bd1": "Phalcon\\\\Config allows to merge a configuration object into another one recursively:",
    "config_fd2d8d7d95f347d4a8b7c8c188c606f1": "The above code produces the following:",
    "controllers_25b1751e51f4db9e5adb7a2a78f803ca": "Using Controllers",
    "controllers_bf4b085e9456222c0343205ea7a36664": "The controllers provide a number of methods that are called actions. Actions are methods on a controller that handle requests. By default all public methods on a controller map to actions and are accessible by an URL. Actions are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.",
    "controllers_ed9480fd88e3f7f8cb2bba7f34ebb212": "For instance, when you access an URL like this: http://localhost/blog/posts/show/2012/the-post-title Phalcon by default will decompose each part like this:",
    "controllers_e367e952dc3cb43e7fc9fe886a1ddb50": "In this case, the PostsController will handle this request. There is no a special location to put controllers in an application, they could be loaded using :1:, so you're free to organize your controllers as you need.",
    "controllers_5459cfd2ccc38bd6690cb33742588851": "Controllers must have the suffix \"Controller\" while actions the suffix \"Action\". A sample of a controller is as follows:",
    "controllers_b22bf738f3e4113b72498abf8df6a355": "Additional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend :1:. By doing this, the controller can have easy access to the application services.",
    "controllers_02d3b405399bc826fc484d3addd149f3": "Parameters without a default value are handled as required. Setting optional values for parameters is done as usual in PHP:",
    "controllers_2c21b67becef8f013925ae48e42ab023": "Parameters are assigned in the same order as they were passed in the route. You can get an arbitrary parameter from its name in the following way:",
    "controllers_19a6c1d67b16bca3fdadab09b2393db7": "Dispatch Loop",
    "controllers_e91e55a308d6c96d2b485677dcd94a5c": "The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the above example only one action was executed. Now we'll see how \"forward\" can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.",
    "controllers_cc817334bbec5ea9ce6dbef2709beeaf": "Forward flow to another action",
    "controllers_6ff855eda40562b45266d5cca8c4304b": "If users don't have permissions to access a certain action then will be forwarded to the Users controller, signin action.",
    "controllers_3691a17f2697dcb44b08c104f391dda6": "There is no limit on the \"forwards\" you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by :1:.",
    "controllers_fccdec87b5a034198b1461f90176d44d": "Initializing Controllers",
    "controllers_d34f232d22a05969120164f8a0929b27": ":1: offers the initialize method, which is executed first, before any action is executed on a controller. The use of the \"__construct\" method is not recommended.",
    "controllers_6b19a0bf2864067a1e6a0085e7052eec": "If you want to execute some initialization logic just after build the controller object you can implement the method 'onConstruct':",
    "controllers_411652177b013fea3c5a63ab616d098f": "Injecting Services",
    "controllers_c79117ca927b44a5930b2df6b750ddeb": "If a controller extends :1: then it has easy access to the service container in application. For example, if we have registered a service like this:",
    "controllers_94459506819f88b2a2ac838eba03c79d": "Then, we can access to that service in several ways:",
    "controllers_b2208cf876b040c0187766d57bfc1255": "Injecting the service by just accessing the property with the same name",
    "controllers_181d6542bb8f71757774650a3b5f8ebe": "Accessing the service from the DI",
    "controllers_2e08bddf2d28443f6981d0ebac2e1933": "Another way to access the service using the magic getter",
    "controllers_5d153ad04010e51b3b558a93314486c4": "Using the array-syntax",
    "controllers_aac2efc260d88f42bec7fa4d3c0cf2d0": "If you're using Phalcon as a full-stack framework, you can read the services provided :1: in the framework.",
    "controllers_feb531e6a51594e44fe697f022410250": "Request and Response",
    "controllers_78b818902e26bdd57e13cdd9f1c27419": "Assuming that the framework provides a set of pre-registered services. We explain how to interact with the HTTP environment. The \"request\" service contains an instance of :1: and the \"response\" contains a :2: representing what is going to be sent back to the client.",
    "controllers_eeef46c52d2f8fda1b6593681b414c9f": "Check if request has made with POST",
    "controllers_7bc4b7c3a07971acba3c23c3ae0de905": "Access POST data",
    "controllers_576579805e31f7288878eba1be8ac44c": "The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:",
    "controllers_c749472b7adc3814922c76d471990109": "Send a HTTP 404 response header",
    "controllers_1723e79963b9d5cbfdb220ead5c2ff5f": "Learn more about the HTTP environment in their dedicated articles :1: and :2:.",
    "controllers_0e5d8f24b3a76c0a332a39078578993b": "Session Data",
    "controllers_9af1ea6757c3ffe81059d7807e7aff96": "Sessions help us maintain persistent data between requests. You could access a :1: from any controller to encapsulate data that need to be persistent.",
    "controllers_289076e758f9ec58874175d1848fef0a": "Using Services as Controllers",
    "controllers_383734707de80ee854c1540332570694": "Services may act as controllers, controllers classes are always requested from the services container. Accordingly, any other class registered with its name can easily replace a controller:",
    "controllers_488248aa224f04bf34e44796a2a8c3f9": "Register a controller as a service",
    "controllers_75c4233f2ddc0eea12e9d70201865ffa": "Register a namespaced controller as a service",
    "controllers_95181cdd38a7d3718cd1ea894b8ea8ba": "Creating a Base Controller",
    "controllers_51fedd99fe59a5bf8cac3855adce33cc": "Some application features like access control lists, translation, cache, and template engines are often common to many controllers. In cases like these the creation of a \"base controller\" is encouraged to ensure your code stays DRY_. A base controller is simply a class that extends the :1: and encapsulates the common functionality that all controllers must have. In turn, your controllers extend the \"base controller\" and have access to the common functionality.",
    "controllers_277976e04abafe373f2f0cd83bc81a1f": "This class could be located anywhere, but for organizational conventions we recommend it to be in the controllers folder, e.g. apps/controllers/ControllerBase.php. We may require this file directly in the bootstrap file or cause to be loaded using any autoloader:",
    "controllers_439861a197b139299f3790be82d52147": "The implementation of common components (actions, methods, properties etc.) resides in this file:",
    "controllers_f81751d69164a318d542be4710e6541e": "Any other controller now inherits from ControllerBase, automatically gaining access to the common components (discussed above):",
    "controllers_281b6889c8920b0f05e770706f719a10": "Events in Controllers",
    "controllers_37e837df535716a756662358b9e8f390": "Controllers automatically act as listeners for :1: events, implementing methods with those event names allow you to implement hook points before/after the actions are executed:",
    "cookies_2bc6eb5dcb5fc829123a7ef49f094b59": "Cookies Management",
    "cookies_37ba613bc19059e2b198dd55b1d80cdc": ":2: are very useful way to store small pieces of data in the client that can be retrieved even if the user closes his/her browser. :1: acts as a global bag for cookies. Cookies are stored in this bag during the request execution and are sent automatically at the end of the request.",
    "cookies_b0320f4a950d93f7f09a91c29ce5132b": "Basic Usage",
    "cookies_81f9971fb3a1d23601430671ff54a629": "You can set/get cookies by just accessing the 'cookies' service in any part of the application where services can be accessed:",
    "cookies_a912fae0257816ab039dfbb5b51b10e0": "Check if the cookie has previously set",
    "cookies_328b0799bfc67eec8628bfce07966a2e": "Get the cookie",
    "cookies_29b453b5f5336185352c0488cdac3a19": "Get the cookie's value",
    "cookies_48634baf01678a8c66fbd3bf5b695a29": "Encryption/Decryption of Cookies",
    "cookies_2fe5d1efd435ab35347d86560a1332fe": "By default, cookies are automatically encrypted before be sent to the client and decrypted when retrieved. This protection allow unauthorized users to see the cookies' contents in the client (browser). Although this protection, sensitive data should not be stored on cookies.",
    "cookies_bfc7061d6ef54f180e58861b30542c31": "You can disable encryption in the following way:",
    "cookies_090e575523786a71d4c283962598e79c": "In case of using encryption a global key must be set in the 'crypt' service:",
    "crypt_f360a3a20fa1a3c3b28ba77a0a8d84be": "Encryption/Decryption",
    "crypt_61a86bea91a553c0ef46ff2d3ce32f88": "Phalcon provides encryption facilities via the :1: component. This class offers simple object-oriented wrappers to the :2: php's encryption library.",
    "crypt_957df3c33bcabdc3862c027235e7ad7b": "By default, this component provides secure encryption using AES-256 (rijndael-256-cbc).",
    "crypt_b0320f4a950d93f7f09a91c29ce5132b": "Basic Usage",
    "crypt_3fa9f2edea33b150c507a3a7430d6b2e": "This component is designed to provide a very simple usage:",
    "crypt_caffa55d2bb1f88d35912a062b63800b": "Create an instance",
    "crypt_6f4a10bd7455ec95763a6e294e8cf725": "You can use the same instance to encrypt/decrypt several times:",
    "crypt_993e5016bd265574d5e74141770259ab": "Perform the encryption",
    "crypt_1072447f72a215872c6300026fa6591d": "Now decrypt",
    "crypt_c6a0e7ea1b497e531e4c2b9ba931ff03": "Encryption Options",
    "crypt_36fc07ecbfdf209582225327af389134": "The following options are available to change the encryption behavior:",
    "crypt_74d36f46f78c5347bb7efc53be29b2dd": "Example:",
    "crypt_b6e3cbdc85ac9e9ac40e8eac65a8e9c6": "Use blowfish",
    "crypt_347c782d992d779c9a8704504648d478": "Base64 Support",
    "crypt_8e9cfbbc7197e914936752480dcdb981": "In order that encryption is properly transmitted (emails) or displayed (browsers) :1: encoding is usually applied to encrypted texts:",
    "crypt_7f46562c8af18fea5e1b5163c2f327e4": "Setting up an Encryption service",
    "crypt_2c1201ff75b1d531fdb8dd633c1904cb": "You can set up the encryption component in the services container in order to use it from any part of the application:",
    "crypt_2281785d8b824849f017e6f3db8a07c8": "Set a global encryption key",
    "crypt_603c20f1dddc4539dfd9fed082276775": "Then, for example, in a controller you can use it as follows:",
    "db_9aa0bb0b13e498761331dad3fb71c147": "Database Abstraction Layer",
    "db_c56879b8ed347ed1ba9bd4090926fe2a": ":1: is the component behind :2: that powers the model layer in the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.",
    "db_57a3a9bee3091b994011058761abea1e": "This component allows for a lower level database manipulation than using traditional models.",
    "db_16b634f6806e7bef1eb15a9c2d7e5fef": "Database Adapters",
    "db_7152b235e4d2ec36da8551669390c6f5": "This component makes use of adapters to encapsulate specific database system details. Phalcon uses :1: to connect to databases. The following database engines are supported:",
    "db_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "db_cd9e7a9ee60d9ba1a2514d90d735c5e2": "The :1: interface must be implemented in order to create your own database adapters or extend the existing ones.",
    "db_1c404351c1ded3af7104b1367eca2298": "Database Dialects",
    "db_e39afb69212957a158e65726002b28ea": "Phalcon encapsulates the specific details of each database engine in dialects. Those provide common functions and SQL generator to the adapters.",
    "db_4cab8540827f652e67fdeca3664ad02d": "Implementing your own dialects",
    "db_4c59c53a42f9ff7526ba048854fd8666": "The :1: interface must be implemented in order to create your own database dialects or extend the existing ones.",
    "db_1e84f34a1540652f1d97e6e1b494eaba": "Connecting to Databases",
    "db_324740fa028cb8a427a50099a1748b93": "To create a connection it's necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:",
    "db_b651efdb98a5d6bd2b3935d0c3f4a5e2": "Required",
    "db_ebb061953c0454b2c8ee7b0ac615ebcd": "Optional",
    "db_90a4e8d1f7195a0627f7cb0d3e84e07d": "Create a connection",
    "db_416206518e27ed2ec8b8e0876078af35": "Basic configuration",
    "db_119dd5a342e981b13bf0024d5c6a6933": "Advanced configuration",
    "db_85263fa8f55a37fb6480fae562eb5aea": "Setting up additional PDO options",
    "db_9e0763da7d3608a50dff7cd06c825ea1": "You can set PDO options at connection time by passing the parameters 'options':",
    "db_9f33abf7dcaa4e905ce41ecacf2c7a29": "Create a connection with PDO options",
    "db_9e5e34140a91e9ba6f06e56f6ed231fc": "Finding Rows",
    "db_bf772b6dc335f562852b638549526151": ":1: provides several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:",
    "db_7c889393a45250b4a18cc765867592a2": "Send a SQL statement to the database system",
    "db_e7a99d8dacb8802c4ac0d05fa390d4e6": "Print each robot name",
    "db_171109a2bee03ae4b02ac4e497ad9f0f": "Get all rows in an array",
    "db_37eda58e4837344d3c8d9df286369018": "Get only the first row",
    "db_606a77912ac91d380adb17023e52c0b5": "By default these calls create arrays with both associative and numeric indexes. You can change this behavior by using Phalcon\\\\Db\\\\Result::setFetchMode(). This method receives a constant, defining which kind of index is required.",
    "db_7c13e5e14c2516b4682395562588620f": "The Phalcon\\\\Db::query() returns an instance of :1:. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.",
    "db_7163cbb0d7cbeb83bc60daf2a5d87930": "Traverse the resultset",
    "db_4c37f51054e57a9531894d6f4898346d": "Seek to the third row",
    "db_2c4f0d3e50ef2ca74fe3702595b073ba": "Count the resultset",
    "db_822e9e4f30d1487b43dff638b7288be9": "Binding Parameters",
    "db_20fba1c0ff797b4571fcf2e266e43c1e": "Bound parameters is also supported in :1:. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. Binding parameters can simply be achieved as follows:",
    "db_cb1410d1919176851f1aaab1e732cd03": "Binding with numeric placeholders",
    "db_273054477dbe7d2473f58eafd0b12342": "Binding with named placeholders",
    "db_775f4a7962f7f6a09e70cb9b792ce716": "Inserting/Updating/Deleting Rows",
    "db_7f858ef35a717f24acb02ed361b1fa11": "To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:",
    "db_47ce7f6122d68b95ce5fab9371a4b4a7": "Inserting data with a raw SQL statement",
    "db_0ed322ecf9a2b51f516dfe73c3cbd3a1": "With placeholders",
    "db_180c84f251a905b2b85b4d0284f00e37": "Generating dynamically the necessary SQL",
    "db_f217522b307007d854a97b06c22e04b4": "Updating data with a raw SQL statement",
    "db_8f2a0a63995fbd12c166eae55a8afd40": "Deleting data with a raw SQL statement",
    "db_51d4553ed9785f47259855221036781b": "Transactions and Nested Transactions",
    "db_34f0e922f688cb71302678a3fe494a24": "Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:",
    "db_a621366cd5b2907e40d03bd48faf18e5": "Start a transaction",
    "db_8c75c6f808c534d604cb02396b4edd55": "Execute some SQL statements",
    "db_d3a6e14ca6fc2d35e9b4be410148fca1": "Commit if everything goes well",
    "db_42dd6f60e2943d2018d338f688dc3893": "An exception has occurred rollback the transaction",
    "db_3b8eafd4e241b95551713b224b483665": "In addition to standard transactions, Phalcon\\\\Db provides built-in support for :1: (if the database system used supports them). When you call begin() for a second time a nested transaction is created:",
    "db_7541179d7363e6364fe5952627e41383": "Start a nested transaction",
    "db_ab5dd438a9f5b8f0820cfe4652a1e9ad": "Execute these SQL statements into the nested transaction",
    "db_c5a4e9142b804454038d6dd0da2f71cc": "Create a save point",
    "db_644ad7bbb7a3ae57fd16f35c4cd6c35d": "An error has occurred, release the nested transaction",
    "db_77ee981b5ddc409abb1c251be1e92335": "Continue, executing more SQL statements",
    "db_754a52a77d610f44a39532d53dcc379c": "Database Events",
    "db_92349b2878385d609e923e4f9828453a": ":1: is able to send events to a :2: if it's present. Some events when returning boolean false could stop the active operation. The following events are supported:",
    "db_c5d4c5c6f3320fdd992a9f9b94902b4f": "Bind an EventsManager to a connection is simple, Phalcon\\\\Db will trigger the events with the type \"db\":",
    "db_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "db_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "db_ab3820428eeff2b86851ff180213b216": "Stop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:",
    "db_b1e59687f407cc13f1dc50e9867784cc": "Check for malicious words in SQL statements",
    "db_859fcc416794bb30a4d0d3374fcb0545": "DROP/ALTER operations aren't allowed in the application,",
    "db_96f892897bac78f7d2dfb9923df31886": "this must be a SQL injection!",
    "db_4cad94196049561a3ac77c303b7784a7": "It's ok",
    "db_f7dc7675831e283edd54b6e7e3501a7e": "Profiling SQL Statements",
    "db_46e98951d10febc90834515008579195": ":1: includes a profiling component called :2:, that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.",
    "db_a3df99eff2894edce98fa52a5fb22368": "Database profiling is really easy With :1::",
    "db_fd266170f19ec5af140246474a9051c8": "Start a profile with the active connection",
    "db_14b126c32b3a245e43c622cc25799b45": "Stop the active profile",
    "db_c0ab6b1fa0211ff19b29a5c704e2104f": "Assign the events manager to the connection",
    "db_81e9bd0aa2782b740c867d02541c0325": "Execute a SQL statement",
    "db_82d803f6fb4acc664e98cd0e54612fe1": "Get the last profile in the profiler",
    "db_455bb6bd87e31bb960b18a325c1857f9": "You can also create your own profile class based on :1: to record real time statistics of the statements sent to the database system:",
    "db_cc3bf7e319d25db079b9a1ecb4d7d832": "Create an EventsManager",
    "db_082d4b9f7128345ba1fb10ccead89d38": "Create a listener",
    "db_eb84e69d88b2666742c4434b5795b5e8": "Attach the listener listening for all database events",
    "db_e88928f2fded39f58528a121fb3de45c": "Logging SQL Statements",
    "db_a7114da51552b196b64a17bf1631aefd": "Using high-level abstraction components such as :1: to access a database, it is difficult to understand which statements are sent to the database system. :2: interacts with :1:, providing logging capabilities on the database abstraction layer.",
    "db_38bc855579b34e310ac96a45fa71af28": "Execute some SQL statement",
    "db_0088d92ba0746f6ca32168e18b0acd69": "As above, the file *app/logs/db.log* will contain something like this:",
    "db_3343eea266e593d47673c1c99603e34c": "Implementing your own Logger",
    "db_06e4bba9bd86a521f5b444fdb93fe6d2": "You can implement your own logger class for database queries, by creating a class that implements a single method called \"log\". The method needs to accept a string as the first argument. You can then pass your logging object to Phalcon\\\\Db::setLogger(), and from then on any SQL statement executed will call that method to log the results.",
    "db_ecd1c68e16f252c70d68cfe1e6e0dcc1": "Describing Tables/Views",
    "db_1f5f5c687a00cec49123314bc85a2042": ":1: also provides methods to retrieve detailed information about tables and views:",
    "db_52e8a97a6e0b563e4c1997d149c13265": "Get tables on the test_db database",
    "db_b3bc60ae7041df3b70812c18a455b060": "Is there a table 'robots' in the database?",
    "db_5edef158abf6024e9f9883ffa43e9567": "Get name, data types and special features of 'robots' fields",
    "db_11eafb2689069f958bc03ecbfc4ba10a": "Get indexes on the 'robots' table",
    "db_1b88a6c6d62f909680fccc9200463104": "Get foreign keys on the 'robots' table",
    "db_f724f5600166de46ea1be17d62d392a1": "Print referenced columns",
    "db_fd4e007472fe028d0e927e9cc2f6b21c": "A table description is very similar to the MySQL describe command, it contains the following information:",
    "db_b281bcb20b9fff76eec329324fc483e6": "Methods to get information about views are also implemented for every supported database system:",
    "db_5c2f5ac613a52fb73295237c35befb7f": "Get views on the test_db database",
    "db_487d3b66ae96713415193b9a08169997": "Is there a view 'robots' in the database?",
    "db_42bc1888fdf7c5f77d9ca21f38e0ed72": "Creating/Altering/Dropping Tables",
    "db_3e32a6ea6f8c9617413a066ca88504a3": "Different database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as CREATE, ALTER or DROP. The SQL syntax differs based on which database system is used. :1: offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.",
    "db_5a549338622e7f241d71991a1a20c6f2": "Creating Tables",
    "db_aee25ce86c0637f8e093c3ce704e249d": "The following example shows how to create a table:",
    "db_accf3385a06a95bd8f27cae7026a5b33": "Phalcon\\\\Db::createTable() accepts an associative array describing the table. Columns are defined with the class :1:. The table below shows the options available to define a column:",
    "db_dc7a84782c94708e2445f7047dac825c": "Phalcon\\\\Db supports the following database column types:",
    "db_fe7ebd9868a24f4d94e7571d6ad9777d": "Phalcon\\\\Db\\\\Column::TYPE_INTEGER",
    "db_75f9a80d8632ac4324c0448868cf0a2f": "Phalcon\\\\Db\\\\Column::TYPE_DATE",
    "db_b3d1b996d6ec9ea4505f6d33bc37c0f1": "Phalcon\\\\Db\\\\Column::TYPE_VARCHAR",
    "db_71e6628e8bd0f49a16f167ff06a44092": "Phalcon\\\\Db\\\\Column::TYPE_DECIMAL",
    "db_8779dd20292f14882b4da2bd3cb06e73": "Phalcon\\\\Db\\\\Column::TYPE_DATETIME",
    "db_e1c672080a2ed8b106cae6b062a5ac78": "Phalcon\\\\Db\\\\Column::TYPE_CHAR",
    "db_66689482f9de2295ca0d59d4361a86f5": "Phalcon\\\\Db\\\\Column::TYPE_TEXT",
    "db_6a6f6804cf8c152946cdee5720e2d35f": "The associative array passed in Phalcon\\\\Db::createTable() can have the possible keys:",
    "db_c3ed2bc70e428245f4bdd9edcf4cd667": "Altering Tables",
    "db_7d43aa05cba8f136df19e848497ebcc4": "As your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow to modify existing columns or add columns between two existing ones. :1: is limited by these constraints.",
    "db_057c0c5342d6aeacfa7eaa6ac62e1f80": "Adding a new column",
    "db_58802b059e068d99af4ae86864fe1ab0": "Modifying an existing column",
    "db_3967756a7a96bc72339f90055c984041": "Deleting the column \"name\"",
    "db_cff3f5c3bc556746e03f54e9d880ab64": "Dropping Tables",
    "db_04bbf7dd1154ed612e9ab317a81a7439": "Examples on dropping tables:",
    "debug_4eface2a7de663488d577e631a23894c": "Debugging Applications",
    "debug_c6e61d0ed51257a83ac8eaeb5f14ebff": "PHP offers tools to debug applications with notices, warnings, errors and exceptions. The :1: offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.",
    "debug_210c8aebc2022b155df5c183bb5cb17f": "Despite being written in C, Phalcon executes methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.",
    "debug_73f8f95e13a4d7741a9512277b7c4d7f": "Catching Exceptions",
    "debug_523cc31a1df32a41cce5d95b2c0715e8": "Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:",
    "debug_3712839acd032789c6e0543d9ffbb3b8": "... some phalcon/php code",
    "debug_22849b339431bce03f0835fc32fb96f2": "Any exception thrown within the block is captured in the variable $e. A :1: extends the PHP :2: and is used to understand whether the exception came from Phalcon or PHP itself.",
    "debug_ff7c8cba77174e8b62a1422d036000c9": "All exceptions generated by PHP are based on the :1:, and have at least the following elements:",
    "debug_34812fc23abd0aa6627bef42421964f1": "Retrieving information from :1: is the same as PHP's :2::",
    "debug_f36f4e4ca08d1a24df7acfd497195a50": "... app code ...",
    "debug_dd49308420b07ae1c4378aae66682c09": "It's therefore easy to find which file and line of the application's code generated the exception, as well as the components involved in generating the exception:",
    "debug_072141f2639a9394589c5183686392f0": "As you can see from the above output the Phalcon's classes and methods are displayed just like any other component, and even showing the parameters that were invoked in every call. The method :1: provides additional information if needed.",
    "debug_6815edaaedecedc259ccc2bf3bc9a8ab": "Debug component",
    "debug_34bf6cfe26a83342319188f04ea2a32b": "Phalcon provides a debug component that allows the developer to easily find errors produced in an application created with the framework.",
    "debug_e5db5bbfbd5738ab0936ea57d5410a0d": "The following screencast explains how it works:",
    "debug_bf2492c60695469d81765ce32b7d132a": "To enable it, add the following to your bootstrap:",
    "debug_3f66fbeb4a21fd9a31b32e75e9a6f51b": "Any Try/Catch blocks must be removed or disabled to make this component work properly.",
    "debug_3876e10bb15f5eb320587acd70db3601": "Reflection and Introspection",
    "debug_0a2715f107ac2b7b5c8c256d6a7384af": "Any instance of a Phalcon class offers exactly the same behavior than a PHP normal one. It's possible to use the :1: or simply print any object to show how is its internal state:",
    "debug_01a46a264a9d32cbe26455af4cb3f7db": "It's easy to know the internal state of any object. The above example prints the following:",
    "debug_73ed294323e5fd47b34d920d3ad4e48d": "Using XDebug",
    "debug_6f164c8227eee5c2e705532bdeea1ab4": ":1: is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.",
    "debug_3178da61cc3ae187bf088906d7a25306": "The following screencast shows a Xdebug session with Phalcon:",
    "debug_ae74bd6270e7f30b07d3ee763d6ea7e9": "Once you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages.",
    "debug_0a9948cd276e0d53c835519557be16f9": "The following example implements xdebug_print_function_:1: to stop the execution and generate a backtrace",
    "debug_5075bcdc88feaddacaeb503556b2d272": "Request variables from html form",
    "debug_5bc40121d68374829702a4cae1d6561f": "Stop execution and show a backtrace",
    "debug_165a70665697d1966f0c513b23093766": "Store and check for errors",
    "debug_6410c830e5acbec2b28846e176751584": "In this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:",
    "debug_f2d045974b2e64a0c299b91b3448ffda": "Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the :1: for more information.",
    "di_abd935de0032bff22b5570b9f4eeb47f": "Dependency Injection/Service Location",
    "di_265ae051b287a8995483cf4ae57d7902": "The following example is a bit lengthy, but explains why use service location and dependency injection. First, let's pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.",
    "di_c8beb1db535d2d5d051ba217fe6c8051": "In this first example, the connection is created inside the component. This approach is impractical; due to the fact we cannot change the connection parameters or the type of database system because the component only works as created.",
    "di_574a7ed3bb5d3bb628504780fbead704": "To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:",
    "di_adb110eceff15d54c62d08f27fe45e68": "Create the connection",
    "di_651e15141b7a09e7ffeeaac2cc3f90f6": "Inject the connection in the component",
    "di_5b7e48880fbea53af767c7bc5056d8aa": "Now consider that we use this component in different parts of the application and then we will need to create the connection several times before passing it to the component. Using some kind of global registry where we obtain the connection instance and not have to create it again and again could solve this:",
    "di_3fdb8ae9cd4d1bd1e31040931421dde3": "Pass the connection defined in the registry",
    "di_7358d10fc368cb382d807da84444f939": "Now, let's imagine that we must implement two methods in the component, the first always need to create a new connection and the second always need to use a shared connection:",
    "di_a065ed5816bf5bdb232f63839413db93": "This injects the shared connection",
    "di_650a1e77458ec792145b424935f2d9db": "Here, we always pass a new connection as parameter",
    "di_97337be64fa7cbbf9af489790e9badb6": "So far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection have some disadvantages.",
    "di_2e678291f806f4e66ec87ead48e6018a": "For instance, if the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that pass them with many arguments, additionally creating dependencies before using the component, every time, makes our code not as maintainable as we would like:",
    "di_a368acdb5b6af2fc77288deb033de42f": "Create the dependencies or retrieve them from the registry",
    "di_0feab19cf0dfd1c5cddfb6e12a925d39": "Pass them as constructor parameters",
    "di_b9b85c3b69718427f55faca36d345eb8": "... or using setters",
    "di_35a19665bc2a2bcddfcac04d57024568": "Think we had to create this object in many parts of our application. If you ever do not require any of the dependencies, we need to go everywhere to remove the parameter in the constructor or the setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:",
    "di_ba4b67485bd4fca58dad7b0f724aca85": "One moment, we returned to the beginning, we are again building the dependencies inside of the component! We can move on and find out a way to solve this problem every time. But it seems that time and again we fall back into bad practices.",
    "di_c131f094dbcc3b2eca85a57b141612c5": "A practical and elegant way to solve these problems is using a container for dependencies. The containers act as the global registry that we saw earlier. Using the container for dependencies as a bridge to obtain the dependencies allows us to reduce the complexity of our component:",
    "di_2bb71ae71c72d6cd711b343a8ce6ef36": "Get the connection service",
    "di_d960a3b92ab6d6e23ad9079e0d891ee0": "Always returns a new connection",
    "di_bdc30dd362e375de668fccf0b04cd514": "Get a shared connection service,",
    "di_7c1684b26c75a74b272808e93d26cfd7": "this will return the same connection everytime",
    "di_4a2e6799be4cc43397224048e1cea642": "This method also requires an input filtering service",
    "di_1f6be9f851d024f9c2255b0b45ec646c": "Register a \"db\" service in the container",
    "di_ae40a4e0eb8d4449e21cf5eed59167d6": "Register a \"filter\" service in the container",
    "di_6279275289461e2e4743b305b293e167": "Register a \"session\" service in the container",
    "di_f3de1ee1ded598164bbef9aac39254f9": "Pass the service container as unique parameter",
    "di_e6f996a5b1eac12ea2042f1938fc5c22": "The component now simply access the service it requires when it needs it, if it does not require a service that is not even initialized saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.",
    "di_4df3a2adc8b97815253827b168ac9186": "Our approach",
    "di_ef4688cd63009deb66575a3205c9d639": "Phalcon\\\\DI is a component implementing Dependency Injection and Location of services and it's itself a container for them.",
    "di_3fa3eaafa26e9ffe84116c67d0fefbf1": "Since Phalcon is highly decoupled, Phalcon\\\\DI is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.",
    "di_fbb2fa5e81cfb83763e38d50f7fb41c3": "Basically, this component implements the :1: pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.",
    "di_99b587c85d45df1407dcd0788d9587a5": "Additionally, this pattern increases testability in the code, thus making it less prone to errors.",
    "di_986a30636ebdb00490151abb04c98bbe": "Registering services in the Container",
    "di_394e670d251c1672db1443ed55c38287": "The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.",
    "di_c61eadc667d87fdc8772798841b75116": "This way of working gives us many advantages:",
    "di_73b3c1c4fe50701956e8d2344f743ec9": "We can easily replace a component with one created by ourselves or a third party.",
    "di_cae060cf9b2180c49e440fef044d3713": "We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.",
    "di_ec29bb5c91fef25ddedc0fb665cf43c6": "We can get global instances of components in a structured and unified way",
    "di_b9902c5ec0e172db9ea3ef4a360a4772": "Services can be registered using several types of definitions:",
    "di_4a09b9a8df6b4b068531d7654fac0327": "Create the Dependency Injector Container",
    "di_0c4194c9a6a75b3f309bd1d4394a6105": "By its class name",
    "di_49ef8ef6f69770739db9af5274251b7c": "Using an anonymous function, the instance will be lazy loaded",
    "di_7edeccad7eb5d61bfbcf11c7f4223867": "Registering an instance directly",
    "di_703595dc0b8e648e923ca00db8bcf513": "Using an array definition",
    "di_d98882f481863f6da56c67fcda067893": "The array syntax is also allowed to register services:",
    "di_c0112234d77d9c9d66747da018ab1b16": "In the examples above, when the framework needs to access the request data, it will ask for the service identified as ‘request’ in the container. The container in turn will return an instance of the required service. A developer might eventually replace a component when he/she needs.",
    "di_70f7fd5cab148f4b7101ea9f131e885c": "Each of the methods (demonstrated in the examples above) used to set/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used.",
    "di_133dd51288fdbf98603194b63e11cf62": "Setting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.",
    "di_37f9c0bc3f3b1fd17546fe3c12fcbe71": "Phalcon\\\\DI offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.",
    "di_694876cfdd2a46a8dcac91aa534196ad": "Simple Registration",
    "di_1392edb02b710a6e27f1249390e2f537": "As seen before, there are several ways to register services. These we call simple:",
    "di_20cdd879f4dcfb6fb4d7de18d7e464ff": "String",
    "di_9ef693cf4ecb42b512fbea01a3a35c84": "This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:",
    "di_75df90dfe0a1dbc61cc89f9a6e6f77e9": "Object",
    "di_d9691bd1823160ec71e0f0bb30469cff": "This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:",
    "di_0288243a357389f316e2aa112edc3664": "Closures/Anonymous functions",
    "di_4a4d8f31d75cf986c2d00a26a48dae32": "This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:",
    "di_c96aadc03ffb0462aa95fb4a85923011": "Some of the limitations can be overcome by passing additional variables to the closure's environment:",
    "di_9e4c85155cdc156e3e717cf30594427b": "Using the $config variable in the current scope",
    "di_2660cdeaa3179e567ddc97ea665f0317": "Complex Registration",
    "di_79ed10d961ef000241c8f7d7ce1be212": "If it is required to change the definition of a service without instantiating/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:",
    "di_89c6f7adda4ccce404a4dceac92a82d7": "Register a service 'logger' with a class name and its parameters",
    "di_2f1fffb20b38514cec7ec9556bcc1901": "Using an anonymous function",
    "di_9aa1de8a6cafc7bd07f737adddbb8438": "Both service registrations above produce the same result. The array definition however, allows for alteration of the service parameters if needed:",
    "di_cdb0598c01cf979f97867e5bf48dabd1": "Change the service class name",
    "di_171cc68c3687af305338dd7c0d9422b3": "Change the first parameter without instantiating the logger",
    "di_f2915c8918f43a062e3f5599e794989d": "In addition by using the array syntax you can use three types of dependency injection:",
    "di_9c0bdf48d0a98198d5490fcd17421123": "Constructor Injection",
    "di_04c13fc7ced43a12edc258ed23299840": "This injection type passes the dependencies/arguments to the class constructor. Let's pretend we have the following component:",
    "di_d1ba10c207d7013726f7c99936b7c216": "The service can be registered this way:",
    "di_09927c30ccaac2540c35fef8dd775559": "The service \"response\" (Phalcon\\\\Http\\\\Response) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.",
    "di_33371c87c59dd13879c03d2933b2883a": "Setter Injection",
    "di_037521458982b3a04f8a8f73e18cf0e2": "Classes may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:",
    "di_b3ae449184d1b666544396372eedeccc": "A service with setter injection can be registered as follows:",
    "di_561e082121d27439298b1449dfa14f3d": "Properties Injection",
    "di_cc0e08475fea09b8e1e0faedaa904394": "A less common strategy is to inject dependencies or parameters directly into public attributes of the class:",
    "di_b415258cb72581635e1a11c818099fec": "A service with properties injection can be registered as follows:",
    "di_9556a96ea3e328a290fa0d1f5241b93b": "Supported parameter types include the following:",
    "di_c39b14a551be0865ba3861920297ee03": "Resolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services.",
    "di_2cadca58ad0af8c325f305d5e775c048": "Mixing different types of definitions is allowed, everyone can decide what is the most appropriate way to register the services according to the application needs.",
    "di_ebe7f70c26148e804268cefe62123657": "Resolving Services",
    "di_55272287ce2940d0156cc9f08f4cc6a8": "Obtaining a service from the container is a matter of simply calling the “get” method. A new instance of the service will be returned:",
    "di_7c1737f36a6e408ba72bb5a799178da2": "Or by calling through the magic method:",
    "di_b30f368f718f146093bbf9e426bcaf6d": "Or using the array-access syntax:",
    "di_df760419f3610c317d0a8389de253bb1": "Arguments can be passed to the constructor by adding an array parameter to the method \"get\":",
    "di_945920107394b32e034f1568d6a9d758": "new MyComponent(\"some-parameter\", \"other\")",
    "di_5e95da1b79954815439137b5633640d9": "Shared services",
    "di_523da39e9a502f591f39f45be934c195": "Services can be registered as \"shared\" services this means that they always will act as singletons_. Once the service is resolved for the first time the same instance of it is returned every time a consumer retrieve the service from the container:",
    "di_bd223bfb790abb46b36c0bb9c45137d0": "Register the session service as \"always shared\"",
    "di_ab897c9c2e7e46440b6466f2d36f124e": "Locates the service for the first time",
    "di_9d15eb019aa64c75adc2a2eb51d56882": "Returns the first instantiated object",
    "di_ab7945a37fd0394ab6aa70073346689e": "An alternative way to register shared services is to pass \"true\" as third parameter of \"set\":",
    "di_a2fc89c7cf97ed772e169211e2239c2c": "If a service isn't registered as shared and you want to be sure that a shared instance will be accessed every time the service is obtained from the DI, you can use the 'getShared' method:",
    "di_a9c22033c4679a03e177418411d01888": "Manipulating services individually",
    "di_36420ae7d6f7117c9398175a25e18bfb": "Once a service is registered in the service container, you can retrieve it to manipulate it individually:",
    "di_3dccbfc975bace728b4222d239d68241": "Register the \"register\" service",
    "di_ed008be759e16fd3e75fee7914c96149": "Get the service",
    "di_192eed5fc58caf31cd16710dfd023934": "Change its definition",
    "di_41da7327626545a050418aedcfdb4d2c": "Change it to shared",
    "di_5a6f307a548f6f9f8793612e2f16f52f": "Resolve the service (return a Phalcon\\Http\\Request instance)",
    "di_11205d8363eee750e219f2142a69f6cc": "Instantiating classes via the Service Container",
    "di_9ec7bab8213c10730a15e14a83bf8eca": "When you request a service to the service container, if it can't find out a service with the same name it'll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:",
    "di_488248aa224f04bf34e44796a2a8c3f9": "Register a controller as a service",
    "di_9d551646f920cbebf936f0e2e5fe8e1e": "Actually returns another component",
    "di_0a981d32b627f0c9ed8f523d9fdd914e": "Create an instance via the service container",
    "di_85beb28ee3f83ae99cc759a92dd8034f": "You can take advantage of this, always instantiating your classes via the service container (even if they aren't registered as services). The DI will fallback to a valid autoloader to finally load the class. By doing this, you can easily replace any class in the future by implementing a definition for it.",
    "di_f490448655b0bd4ef0ac8da57a753c8e": "Automatic Injecting of the DI itself",
    "di_f82822663c272f5d23969e02e67203db": "If a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates, to do this, you need to implement the :1: in your classes:",
    "di_6fc810bd74ec71922209d7143f7ccf7d": "Then once the service is resolved, the $di will be passed to setDi automatically:",
    "di_7ac0b9f44dc8d0e8ccae26e1649cbe95": "Register the service",
    "di_17a5c5092cbcd30c2143d48dee095d01": "Resolve the service (NOTE: $myClass->setDi($di) is automatically called)",
    "di_718a4aef623ce8b43b3b6e573948839b": "Avoiding service resolution",
    "di_e6b5036b404972f413cc53cc18341336": "Some services are used in each of the requests made to the application, eliminate the process of resolving the service could add some small improvement in performance.",
    "di_a2e7edcb5aaefca2b15a87f1a5834393": "Resolve the object externally instead of using a definition for it:",
    "di_f3008f164f57066b43613e1aaffa98b6": "Pass the resolved object to the service registration",
    "di_4f001400cf0edf3b340d6e85965045ee": "Organizing services in files",
    "di_70f16f940b677929f1bb8f1d27a08918": "You can better organize your application by moving the service registration to individual files instead of doing everything in the application's bootstrap:",
    "di_dff5e52a906d54857347dee1fe5cadf7": "Then in the file (\"../app/config/routes.php\") return the object resolved:",
    "di_009d636bc5ba7d3c807ad2171952c475": "Accessing the DI in a static way",
    "di_3686f852ccc9494199407f0f5c8a333f": "If needed you can access the latest DI created in a static function in the following way:",
    "di_c13c8c8ed70c91d9a0bafe5c87f4351e": "Get the session service",
    "di_ab8dffcd5daaff4344d575991cd0f12a": "Factory Default DI",
    "di_029caf1fc063b7ffdda35adf1e2ff47d": "Although the decoupled character of Phalcon offers us great freedom and flexibility, maybe we just simply want to use it as a full-stack framework. To achieve this, the framework provides a variant of Phalcon\\\\DI called Phalcon\\\\DI\\\\FactoryDefault. This class automatically registers the appropriate services bundled with the framework to act as full-stack.",
    "di_0e74f12e67a950d157dc6477fd91d5ab": "Service Name Conventions",
    "di_873e69b82630ed0e18cfce537a6d384e": "Although you can register services with the names you want, Phalcon has a several naming conventions that allow it to get the the correct (built-in) service when you need it.",
    "di_fbd70cc43e51089bc8589a32fe15143f": "Implementing your own DI",
    "di_7a91b02925ab6cdbaa40291e51a1f94e": "The :1: interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.",
    "dispatching_c7e230188b6b2143ff84328e977f26e6": "Dispatching Controllers",
    "dispatching_81501364f781f7e734258d205629bc50": ":1: is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Understanding its operation and capabilities helps us get more out of the services provided by the framework.",
    "dispatching_9ec793769848dd36d16bc5009d090b78": "The Dispatch Loop",
    "dispatching_3aa22fc3cb1379a87cf25f652dcc56b8": "This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within :1::",
    "dispatching_36b5251b4f60f0e3ab4fdacb1a73e855": "Dispatch loop",
    "dispatching_bec792bcb607a469332561ea1f064cec": "Instantiating the controller class via autoloaders",
    "dispatching_55759812960b168ddd66320b5fd4cfc1": "Execute the action",
    "dispatching_6ea67765b812783b432096068579c7ac": "'$finished' should be reloaded to check if the flow",
    "dispatching_52975c12433d7743922548154537c9d4": "was forwarded to another controller",
    "dispatching_b400a4664e1eb7d407d32443a5866cbb": "The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.",
    "dispatching_0d1e9546c8779eb28895ec882ed3d319": "Dispatch Loop Events",
    "dispatching_14eec6afae10eddb0b0e9b9376b2c5c4": ":1: is able to send events to an :2: if it is present. Events are triggered using the type \"dispatch\". Some events when returning boolean false could stop the active operation. The following events are supported:",
    "dispatching_69d78495a25fcaf6e4b4e9fa56d997aa": "The :1: tutorial shows how to take advantage of dispatching events implementing a security filter with :2:",
    "dispatching_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "dispatching_41b79f8cf8c0967be09fcf51a7674d17": "Create an event manager",
    "dispatching_848530a8762b4940d6e8097771122109": "Attach a listener for type \"dispatch\"",
    "dispatching_bda634f6269a3a06dd0a40fb4d7ae993": "Bind the eventsManager to the view component",
    "dispatching_742e12cd23609e971d9755ddafffff6e": "An instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:",
    "dispatching_1ee4fe990509813017611ecf6e305c2d": "Executed before every found action",
    "dispatching_49435565b9b3e2fa5b74074d2bb70884": "Executed after every found action",
    "dispatching_5e377a05e8ff5174b61fbdfc1b15ccb3": "Forwarding to other actions",
    "dispatching_3b9443771cbb60480ead8f8517713ac9": "The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.",
    "dispatching_a01b11a64fec929d0a6de3fb0922adcd": ".. store some product and forward the user",
    "dispatching_33c7726ef2f9bff69d1c9cb8d1389c42": "Forward flow to the index action",
    "dispatching_f3c62e174053901d1ba20264f5f6dfe9": "Keep in mind that making a \"forward\" is not the same as making an HTTP redirect. Although they apparently got the same result. The \"forward\" doesn't reload the current page, all the redirection occurs in a single request, while the HTTP redirect needs two requests to complete the process.",
    "dispatching_b42a3fb3e2bd1291604e00718ec1e87b": "More forwarding examples:",
    "dispatching_127dad3202ffec70abfe6cf2662da3e2": "Forward flow to another action in the current controller",
    "dispatching_52cf0d0467fe9114e378ef9752ff0b3b": "passing parameters",
    "dispatching_55bda9dcfe8251c072b7abb5c77efad6": "A forward action accepts the following parameters:",
    "dispatching_f639eaf462e293dac25b136e656dcbf2": "Preparing Parameters",
    "dispatching_8802f0dbd05437c34f56cb0a6b8ddf81": "Thanks to the hooks points provided by :1: you can easily adapt your application to any URL schema:",
    "dispatching_b371c1705a0db0cda084736e6897724c": "For example, you want your URLs look like: http://example.com/controller/key1/value1/key2/value",
    "dispatching_b89da8c819fb44b1e66adf6136530991": "Parameters by default are passed as they come in the URL to actions, you can transform them to the desired schema:",
    "dispatching_cc3bf7e319d25db079b9a1ecb4d7d832": "Create an EventsManager",
    "dispatching_106eac9a28739f21d92acca480af02cc": "Attach a listener",
    "dispatching_f3b6b5f59d7df27ede32c771dd40a584": "Use odd parameters as keys and even as values",
    "dispatching_0c2e39e72d43a7f83a11dae5abbd51c9": "Override parameters",
    "dispatching_cad058d0cc5381d5cc280ee62fe8253e": "If the desired schema is: http://example.com/controller/key1:value1/key2:value, the following code is required:",
    "dispatching_c0605047051937a68961e4f308fe53bf": "Explode each parameter as key,value pairs",
    "dispatching_f70a4e022ddce861f63997cab3fab1e4": "Getting Parameters",
    "dispatching_dd6b7bcdbb4ce2aaeedd235abfe8c8d0": "When a route provides named parameters you can receive them in a controller, a view or any other component that extends :1:.",
    "dispatching_f5c27d8b2e4c00a39131b93bed108b71": "Get the post's title passed in the URL as parameter",
    "dispatching_342886fb499713c16d477b8d2b9640ca": "or prepared in an event",
    "dispatching_d6f92b1871c4833f57c8a7c5c2fbec22": "Get the post's year passed in the URL as parameter",
    "dispatching_47ed99dbf80216b5654ff7b4046c6f91": "or prepared in an event also filtering it",
    "dispatching_14c198f6c9118247f026bc8e88fbaedf": "Preparing actions",
    "dispatching_05d8d38f4f9011a9ac4641a571f84dce": "You can also define an arbitrary schema for actions before be dispatched.",
    "dispatching_e260ea2adfcceb079d4d4b6f1b551608": "Camelize action names",
    "dispatching_67688f4ece23aa755f24f8cfb0aad718": "If the original URL is: http://example.com/admin/products/show-latest-products, and for example you want to camelize 'show-latest-products' to 'ShowLatestProducts', the following code is required:",
    "dispatching_c40e2ba20afcd811261a0381a09f54d4": "Camelize actions",
    "dispatching_0a38dd3dddc99f184e2d2e489251cb10": "Remove legacy extensions",
    "dispatching_0dabb0181ae19b162bc80badf0a4b1cc": "If the original URL always contains a '.php' extension:",
    "dispatching_7572891bc5d9c53bb5cc71ddc41eb601": "http://example.com/admin/products/show-latest-products.php http://example.com/admin/products/index.php",
    "dispatching_70432e530ebf2544b788be9edb18bc91": "You can remove it before dispatch the controller/action combination:",
    "dispatching_d79b636a02bc6255db99a1385ccf21b2": "Remove extension before dispatch",
    "dispatching_3158c8d8044dd5e43edabccb00528a46": "Remove extension",
    "dispatching_b527ebd2ac007b2d7e6d6639f89c29c9": "Override action",
    "dispatching_5525aa566ea8e91ed09eb57d3e25b58a": "Inject model instances",
    "dispatching_81aa760587a36f918d029250fe635836": "In this example, the developer wants to inspect the parameters that an action will receive in order to dynamically inject model instances.",
    "dispatching_713b76e5d389b872cf6b91937b9a1c59": "The controller looks like:",
    "dispatching_b08fb0962ab2d8ce37b497ca32d08713": "Method 'showAction' receives an instance of the model \\Posts, the developer could inspect this before dispatch the action preparing the parameter accordingly:",
    "dispatching_85c8e25bc56ae82ab59658b59a2a03ce": "Possible controller class name",
    "dispatching_4bca87661489db5e3089d939faf2eb58": "Possible method name",
    "dispatching_3573d5c600b4bb192b28cf2efc093b0c": "Get the reflection for the method to be executed",
    "dispatching_76d370dc5586c35d54e28967d422908c": "Check parameters",
    "dispatching_da26f5f1a8336688ebf490bf7fe60331": "Get the expected model name",
    "dispatching_0bebfc545740d36398a183720db0d4a2": "Check if the parameter expects a model instance",
    "dispatching_53cac0999d027be3b4c7e630f66e897e": "Override the parameters by the model instance",
    "dispatching_071dd72dde774dfd84ab6af90cd8ea5b": "An exception has occurred, maybe the class or action does not exist?",
    "dispatching_e4002ed174de3b9843b8d2a2f8cfbd84": "The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.",
    "dispatching_a0b3073d0e9cc13f01fa8fded0cdc7ad": "Handling Not-Found Exceptions",
    "dispatching_f4582eab6580a8e3e9d783c044d1e67e": "Using the :1: it's possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn't found:",
    "dispatching_96bb5555a4a2fd176be84f582a90d3de": "Handle 404 exceptions",
    "dispatching_2663f5f3464380864d0364daf496d4e1": "Handle other exceptions",
    "dispatching_c5b1d51f30933dfd71e8f28646329bc7": "Bind the EventsManager to the dispatcher",
    "dispatching_91daa9dae5570715c7059d0efbf5c64c": "Of course, this method can be moved onto independent plugin classes, allowing more than one class take actions when an exception is produced in the dispatch loop:",
    "escaper_de8049e2b4f8854b235a1e7a22dfbaa2": "Contextual Escaping",
    "escaper_4ac20f61e26bc5c1fb7aee9b14e2a6ca": "Websites and Web applications are vulnerable to :2: attacks, despite PHP provides escaping functionality, in some contexts those are not sufficient/appropriate. :1: provides contextual escaping, this component is written in C providing the minimal overhead when escaping different kinds of texts.",
    "escaper_719863172fd23c83a6bbcb76c7e8894d": "We designed this component based on the :1: created by the :2:",
    "escaper_08393e32d6104e8736ab5e0d3ee9aaea": "Additionally, this component relies on :1: to support almost any charset.",
    "escaper_728347a820344a7ff74bc9b0ae25e678": "To illustrate how this component works and why it is important, consider the following example:",
    "escaper_fb033002084e4fb9302c7210a668ad3a": "Document title with malicious extra HTML tags",
    "escaper_cf6109a346c45d45b177223d0df2bc6f": "Malicious CSS class name",
    "escaper_ce0b3c63223063a5edb0a1456200c46d": "Malicious CSS font name",
    "escaper_1ff2721b1bbbf23e07dc268591b01e9f": "Malicious Javascript text",
    "escaper_08e6b5c589201a50bbeeeb8cfeb2f11f": "Create an escaper",
    "escaper_c1e7387e17b71462fbf37bf19d1ebe7d": "Which produces the following:",
    "escaper_df58314dce8aa78978d3dd9d394a2cf8": "Every text was escaped according to its context. Use the appropriate context is important to avoid XSS attacks.",
    "escaper_3c421fe61d042d8a313e7f283fcb029e": "Escaping HTML",
    "escaper_f790a86819ff16026454e841b7c630fa": "The most common situation when inserting unsafe data is between HTML tags:",
    "escaper_453ec58c3b8e94c062611d4ac8d95370": "You can escape those data using the escapeHtml method:",
    "escaper_823d563bfe5fbbb4610153ba6b66d847": "Which produces:",
    "escaper_f42f900384c47be51538fd470d563966": "Escaping HTML Attributes",
    "escaper_6cdd64981a967a030d37d6e4c4c3a323": "Escape HTML attributes is different from escape a full HTML content. The escape works by changing every non-alphanumeric character to the form. This kind of escaping is intended to most simpler attributes excluding complex ones like 'href' or 'url':",
    "escaper_303acdc2804c0b90eeda8e10f3bf6d3d": "You can escape an HTML attribute by using the escapeHtmlAttr method:",
    "escaper_e419c2cf096225f2fc480b112f27843b": "Escaping URLs",
    "escaper_1d8024733f3d40e69701e669f9b269ff": "Some HTML attributes like 'href' or 'url' need to be escaped differently:",
    "escaper_1b965025fba3ac113dbff5a8832299e3": "You can escape an HTML attribute by using the escapeUrl method:",
    "escaper_d2c884d94f0259be48956dba248a17bb": "Escaping CSS",
    "escaper_b7f186024e49c2f227a7f08d30e150dd": "CSS identifiers/values can be escaped too:",
    "escaper_1a4284c5e36261902ab8d5d69532ecf8": "You can escape an HTML attribute by using the escapeCss method:",
    "escaper_efd514d03a900c8d6b17fc477111718e": "Escaping Javascript",
    "escaper_15e2319e6ab4aef1b6e849669c613e4c": "Strings to be inserted into javascript code also must be properly escaped:",
    "escaper_ed5d4b6ecc85f27e025028b109548085": "You can escape an HTML attribute by using the escapeJs method:",
    "events_afb299ea125f4b358f027bbaeb866b2d": "Events Manager",
    "events_aac87938048f8f57d6a8477faebe84e6": "The purpose of this component is to intercept the execution of most of the components of the framework by creating “hooks point”. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.",
    "events_b2923a136099a523e93b60cda2e7677e": "Usage Example",
    "events_8cbb9df0c416197ef9448b6764564317": "In the following example, we use the EventsManager to listen for events produced in a MySQL connection managed by :1:. First, we need a listener object to do this. We created a class whose methods are the events we want to listen:",
    "events_5f3235ad2fb6e8dba5ace17fd39e99f0": "This new class can be as verbose as we need it to. The EventsManager will interface between the component and our listener class, offering hook points based on the methods we defined in our listener class:",
    "events_90aa77c535449519564137eda423cd6f": "Create a database listener",
    "events_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "events_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "events_a0ea75b3e78f593f08de2e911b50a16d": "Send a SQL command to the database server",
    "events_fd5479e2985d7c1d56a8d7c64d0f5340": "In order to log all the SQL statements executed by our application, we need to use the event “afterQuery”. The first parameter passed to the event listener contains contextual information about the event that is running, the second is the connection itself.",
    "events_163988a35ef91aeddfd6eaae7eaa62f7": "As part of this example, we will also implement the Phalcon\\\\Db\\\\Profiler to detect the SQL statements that are taking longer to execute than expected:",
    "events_f4ac5ffededae837cd3d46cf9f57cf0c": "The resulting profile data can be obtained from the listener:",
    "events_c15d5e6bd78d7b5876de2af36691bda1": "In a similar manner we can register an lambda function to perform the task instead of a separate listener class (as seen above):",
    "events_3b8e6a649d2826cb536fa01f0646965b": "Creating components that trigger Events",
    "events_1b4f6a3242af44a8a67fd89078e36bc0": "You can create components in your application that trigger events to an EventsManager. As a consequence, there may exist listeners that react to these events when generated. In the following example we're creating a component called \"MyComponent\". This component is EventsManager aware; when its method \"someTask\" is executed it triggers two events to any listener in the EventsManager:",
    "events_57b33ef02a4ae9378a58574fc10b6a9d": "do some task",
    "events_d55f27db8320d6582537f9bb067f83c6": "Note that events produced by this component are prefixed with \"my-component\". This is a unique word that helps us identify events that are generated from certain component. You can even generate events outside the component with the same name. Now let's create a listener to this component:",
    "events_d08664e6abf6890d19799d45df0d5277": "A listener is simply a class that implements any of all the events triggered by the component. Now let's make everything work together:",
    "events_fc4786a23c525da4add9bcc3d60f8054": "Create an Events Manager",
    "events_a3ee1df6498c28ea889b5460d103cc0c": "Create the MyComponent instance",
    "events_322cc6e93a4ae29cbfe02d8ff7753704": "Bind the eventsManager to the instance",
    "events_61dc62cc7c424897248c47a8c00ae149": "Attach the listener to the EventsManager",
    "events_7db9f2fbcc01d80b3d28204cfffba8e4": "Execute methods in the component",
    "events_bb8a89aaf595ffb10b7da5699454a29e": "As \"someTask\" is executed, the two methods in the listener will be executed, producing the following output:",
    "events_febbb228c19a2f26d17e27168fa25795": "Additional data may also passed when triggering an event using the third parameter of \"fire\":",
    "events_0b904e84f1ec1fa79efa8df387dfb9d4": "In a listener the third parameter also receives this data:",
    "events_48fd6aaddcb68b7c2560f23546d43fcf": "Receiving the data in the third parameter",
    "events_ca881428d69dabaaa5b05d9e6395829c": "Receiving the data from the event context",
    "events_14bd8a400efae29723f96be78bdb675a": "If a listener it is only interested in listening a specific type of event you can attach a listener directly:",
    "events_619561ca4aaa80cf27dde0f8ac3d7efb": "The handler will only be executed if the event triggered is \"beforeSomeTask\"",
    "events_aa0f658456ea9d7a3cd2da9a6ccaedf7": "Event Propagation/Cancellation",
    "events_8959d6f8105504c11841abab2ab8bd84": "Many listeners may be added to the same event manager, this means that for the same type of event many listeners can be notified. The listeners are notified in the order they were registered in the EventsManager. Some events are cancelable, indicating that these may be stopped preventing other listeners are notified about the event:",
    "events_09482c6f09b220af893ba0134b0b93da": "We stop the event if it is cancelable",
    "events_f119c05ea80e3ed4ee7db2dda5946731": "Stop the event, so other listeners will not be notified about this",
    "events_4ed65d632a3128d31fa81087f63e7043": "By default events are cancelable, even most of events produced by the framework are cancelables. You can fire a not-cancelable event by passing \"false\" in the fourth parameter of fire:",
    "events_f4e32e14dcbb772d36896def5709ee7b": "Listener Priorities",
    "events_0fa41c6a956acf07a6651af119844aab": "When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:",
    "events_80405017035b0746c31b3d93adc4b60c": "More priority",
    "events_d908af86e640cf898aaf55a070a9f8a1": "Normal priority",
    "events_a32ccf656e86ac8335dc85271fd7051f": "Less priority",
    "events_be2ad66dadd0459a65075bfc2343e9d5": "Collecting Responses",
    "events_8192798658b3e74a5e39425665bffe65": "The events manager can collect every response returned by every notified listener, this example explains how it works:",
    "events_6d4fda59eb03b37047ef6f597e85a39a": "Set up the events manager to collect responses",
    "events_106eac9a28739f21d92acca480af02cc": "Attach a listener",
    "events_0b1cdf85c78347f11997406a17e7113a": "Fire the event",
    "events_33b4d38e391256eba619e73ab7c86dab": "Get all the collected responses",
    "events_347f19399137be68322d5db99c9f2d43": "The above example produces:",
    "filter_754b623fb3822e02354394a3bd087dff": "Filtering and Sanitizing",
    "filter_22df063654e4541ad4a79e048ea25624": "Sanitizing user input is a critical part of software development. Trusting or neglecting to sanitize user input could lead to unauthorized access to the content of your application, mainly user data, or even the server your application is hosted on.",
    "filter_48352cae72aba688a0bff1c16ef6f2d9": "The :1: component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.",
    "filter_2876899f6219389c80f3cc9e78e9e97b": "Sanitizing data",
    "filter_894165cfe7953925c85eab1191f3c867": "Sanitizing is the process which removes specific characters from a value, that are not required or desired by the user or application. By sanitizing input we ensure that application integrity will be intact.",
    "filter_d5821a95e7aaa55ed43b72ef0e14775c": "returns \"someone@example.com\"",
    "filter_8f053e796ba85cac6d9b8898fa350974": "returns \"hello\"",
    "filter_7b16cae913f7b66b3cede60e5a001159": "returns \"100019\"",
    "filter_75dbb39ae8c53bfa2516d1529db41588": "returns \"100019.01\"",
    "filter_e026d5e41103bb84d12f065f4aa23934": "Sanitizing from Controllers",
    "filter_dc5420fbbc9b9c4f41a8a90335d54f47": "You can access a :1: object from your controllers when accessing GET or POST input data (through the request object). The first parameter is the name of the variable to be obtained; the second is the filter to be applied on it.",
    "filter_7fc505adf1a1a7d2187f5ecc5a950365": "Sanitizing price from input",
    "filter_277769acea0ca776c101d2c17a5d2466": "Sanitizing email from input",
    "filter_36ff741b070e90b755ef99fbde9b438c": "Filtering Action Parameters",
    "filter_33e0ab6879b0a768bd0b2097153d4d49": "The next example shows you how to sanitize the action parameters within a controller action:",
    "filter_4ebfda3361a1fabe7be70fedcf157699": "Filtering data",
    "filter_4b94af7039a1ab25a7b967ac26588f92": "In addition to sanitizing, :1: also provides filtering by removing or modifying input data to the format we expect.",
    "filter_42431b9e9fde0176fb943ee5374eefb6": "returns \"Hello\"",
    "filter_2e03a6d1ccdcf7c081406aad372249a5": "Types of Built-in Filters",
    "filter_8a608152ff5bd1cce8bb0fbf62695c80": "The following are the built-in filters provided by this component:",
    "filter_c39f0d2625dc1cb85a72aa84a008fb93": "Creating your own Filters",
    "filter_1e4204abe542cfdcabd014c47678555b": "You can add your own filters to :1:. The filter function could be an anonymous function:",
    "filter_2f1fffb20b38514cec7ec9556bcc1901": "Using an anonymous function",
    "filter_5b19073aeb2a943879f05d2c76037094": "Sanitize with the \"md5\" filter",
    "filter_bfb683456199b8d1bbb9099dbcb683c8": "Or, if you prefer, you can implement the filter in a class:",
    "filter_15ee45d5412f00b058e56a81d26eef58": "Using an object",
    "filter_c8cb3781e384f6e59fbf4e7e75d76fe9": "Sanitize with the \"ipv4\" filter",
    "filter_029798e03ad6c063f6300b5224a5776a": "Complex Sanitizing and Filtering",
    "filter_e930612d5387062f0589cb3ea5865cb7": "PHP itself provides an excellent filter extension you can use. Check out its documentation: :1:",
    "filter_03a91ce6525a43a0db6b9e5e4cd2a8a0": "Implementing your own Filter",
    "filter_8422e15128d4c2bc11fec87586a93b2a": "The :1: interface must be implemented to create your own filtering service replacing the one provided by Phalcon.",
    "flash_24bf1b02e73f28fcfe0a3cfb8a8df9c2": "Flashing Messages",
    "flash_e3fd22485cfee69f0c7b84235597dd2b": "Flash messages are used to notify the user about the state of actions he/she made or simply show information to the users. These kind of messages can be generated using this component.",
    "flash_59016d3191a4f3dbf5870903d350a278": "Adapters",
    "flash_26523ff7e237b9b44f2f6a4d8cdf51d1": "This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:",
    "flash_8674ea60087629c4dc1584b943b9f3cb": "Usage",
    "flash_f71687222a5d029baf5498b0cbc24864": "Usually the Flash Messaging service is requested from the services container, if you're using :1: then :2: is automatically registered as \"flash\" service:",
    "flash_616e07cf12ad4cad9aedbf7e3ff01344": "Set up the flash service",
    "flash_2cafaa0fe3b8d1d500b1d4de40b4738f": "This way, you can use it in controllers or views by injecting the service in the required scope:",
    "flash_f284e5c118cc9dbafe4f7c5c07efda91": "There are four built-in message types supported:",
    "flash_ac7b67e2edf59d5dbf49f3f9fbe58660": "You can add messages with your own types:",
    "flash_8d671ad3d163a29878137ba0df2b301f": "Printing Messages",
    "flash_a8b76fcc8f705adb8e3ef447841db2d2": "Messages sent to the flash service are automatically formatted with html:",
    "flash_6fe0988ed7aa5d53c4898b0b0bd2556f": "As you can see, CSS classes are added automatically to the DIVs. These classes allow you to define the graphical presentation of the messages in the browser. The CSS classes can be overridden, for example, if you're using Twitter bootstrap, classes can be configured as:",
    "flash_f0934c34bad1c49f0b868d4d254769a9": "Register the flash service with custom CSS classes",
    "flash_a9fe6b2c668a23e2ad0372966691f278": "Then the messages would be printed as follows:",
    "flash_6396fb6f64233e5575a7a38ec61d2847": "Implicit Flush vs. Session",
    "flash_958b592fffaf8cde8cc19a76f3557de6": "Depending on the adapter used to send the messages, it could be producing output directly, or be temporarily storing the messages in session to be shown later. When should you use each? That usually depends on the type of redirection you do after sending the messages. For example, if you make a \"forward\" is not necessary to store the messages in session, but if you do a HTTP redirect then, they need to be stored in session:",
    "flash_cf31033a61a260b2b68a74ba7b72d6de": "store the post",
    "flash_dd261f7f644d78383877a5b558214b93": "Using direct flash",
    "flash_6886476139e90617ec3c6d43a7bce8f5": "Forward to the index action",
    "flash_58a33ab2f976320a9421ce5c79d78fc7": "Or using a HTTP redirection:",
    "flash_d436f590ca17a94ffc26002660e830fa": "Using session flash",
    "flash_ee327ed3b5e26839e2c68fc457b9ba2e": "Make a full HTTP redirection",
    "flash_d8065aa66a808eed7fc42303f97620db": "In this case you need to manually print the messages in the corresponding view:",
    "forms_268d46b16a1976672dfca0eb3004a1c6": "Forms",
    "forms_c8d311b9dc231bba212a1daa1a334929": "Phalcon\\\\Forms is a component that aid the developer in the creation and maintenance of forms in web applications.",
    "forms_09046bd05925c7ff83bddee4094d745a": "The following example shows its basic usage:",
    "forms_893e7de61da03f27bf81496bea047a78": "Forms can be rendered based on the form definition:",
    "forms_e2b94867ac1d9e19c574de4ca3f94731": "Each element in the form can be rendered as required by the developer. Internally, :1: is used to produce the right HTML for each element, you can pass additional html attributes as second parameter for render:",
    "forms_ae156d94a8f7c96ac0e8477e37df4225": "HTML Attributes also can be set in the element's definition:",
    "forms_b6a77d0fb8bf4d24a2041c6dc533b9c9": "Initializing forms",
    "forms_46118ce7551fd5b99ce1494d067d7e35": "As seen before, forms can be initialized outside the form class by adding elements to it. You can re-use code or organize your form classes implementing the form in a separated file:",
    "forms_b66e4848b3bda7c0e8df7255d7a1d005": "so you have access to the application services if needed:",
    "forms_3d8efd11b40598f9eda1d29b58b8dbc6": "Set the same form as entity",
    "forms_4ee594653745ac582ff5c9a44298e2bc": "Add a text element to capture the 'email'",
    "forms_8349f54e05d647e20b8c77ee17f5cfd4": "Add a text element to put a hidden csrf",
    "forms_69a37c891f1c62b554a342c50a6a3cf8": "The associated entity added to the form in the initialization and custom user options are passed to the form constructor:",
    "forms_1829d8e5d10a665bd39d5dc5b4696b02": "In the form's instantiation you must use:",
    "forms_c81f893f5539efed7a6b2aae2d783e35": "Validation",
    "forms_39b4103e3d92d2c731cbba3666242870": "Phalcon forms are integrated with the :1: component to offer instant validation. Built-in or custom validators could be set to each element:",
    "forms_a7fe5ae6c44cbf9fe34b36a02be1be0e": "Then you can validate the form according to the input entered by the user:",
    "forms_8cfec398b55e710d9604a7c436050be6": "Validators are executed in the same order as they were registered.",
    "forms_587c4ff197b622b3c1ed93b253343404": "By default messages generated by all the elements in the form are joined so they can be traversed using a single foreach, you can change this behavior to get the messages separated by the field:",
    "forms_3fb3ea3db05b9e1080de859d46f0b814": "Or get specific messages for an element:",
    "forms_6cfe651493a752780c8fa48b71bdc818": "Filtering",
    "forms_d52da57fff163b8d574cc0bb032dfd7d": "A form is also able to filter data before be validated, you can set filters in each element:",
    "forms_b2030575ebc9fde0b4c6ea3a4625fbd6": "Setting User Options",
    "forms_b91be4cb2b5626cabb9965b2a0858548": "Forms + Entities ---------------- An entity such as a model/collection/plain instance or just a plain PHP class can be linked to the form in order to set default values in the form's elements or assign the values from the form to the entity easily:",
    "forms_b28bcc0439b5154f7ed057f8489f90e5": "Once the form is rendered if there is no default values assigned to the elements it will use the ones provided by the entity:",
    "forms_6da412a2f660aebd78578e72791688d0": "You can validate the form and assign the values from the user input in the following way:",
    "forms_1af24ac4da1919c6fede2e6146c56fdc": "Check if the form is valid",
    "forms_0e4c7d0119ba09c444ac1079f86cc679": "Save the entity",
    "forms_d30a6b17040285931e0f8c947d33cfa3": "Setting up a plain class as entity also is possible:",
    "forms_97eb3ee480823a9a95735e9608c7a797": "Using this class as entity, allows the form to take the default values from it:",
    "forms_baf2a1f8830086140eebac87fdb93e9c": "Entities can implement getters, which have more precedence than public properties, these methods give you more free to produce values:",
    "forms_267733a64ba9eb261ead15feedb03145": "Form Elements",
    "forms_955db7b1fad92c1ef8cecdf5046a7e4b": "Phalcon provides a set of built-in elements to use in your forms, all these elements are located in the Phalcon\\\\Forms\\\\Element namespace:",
    "forms_e645d2a669a3a9bcdd068f9166964e8c": "Event Callbacks",
    "forms_19c30705d1c08473182f5ca8868cb348": "Whenever forms are implemented as classes, the callbacks: beforeValidation and afterValidation can be implemented in the form's class to perform pre-validations and post-validations:",
    "forms_eb42718fc9fd2cd9c708358693722c8f": "Rendering Forms",
    "forms_4604a283537fa2bcbe51f858027d2fc8": "You can render the form with total flexibility, the following example shows how to render each element using an standard procedure:",
    "forms_d2e174e2f09ade4279de5d7701ed3131": "Traverse the form",
    "forms_ab27bfb50aa900c676b49acb9ed5bfe7": "Get any generated messages for the current element",
    "forms_945d58b527860c5a740921dd3d689c0e": "Print each element",
    "forms_e996858ec164c2b15da16cb43a8ad731": "Or reuse the logic in your form class:",
    "forms_65089c75f285a799c01cf5255970f306": "In the view:",
    "forms_99367eefd1b35e19421d526542d01dc9": "Creating Form Elements",
    "forms_e75214c5550dd80b0ed2d3cb0d17fad5": "In addition to the form elements provided by Phalcon you can create your own custom elements:",
    "forms_49e9eeca1ccfd6d04a641dce3a4b8956": "... produce some html",
    "forms_f44949bed8f1275638b7022df8e51ed7": "Forms Manager",
    "forms_f0111160333068fb652bd469bd43a195": "This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:",
    "forms_3ad2f73417ccd3fdc7714a4f13f3f4c5": "Forms are added to the forms manager and referenced by a unique name:",
    "forms_04054dc72bd09b7854bfcdbf3be94cd4": "Using the unique name, forms can be accessed in any part of the application:",
    "install_c0277e63a218ee84b1414b2c467dfbe2": "Installation",
    "install_c872ae13f816fd7dfbfc1f7781ddd782": "PHP extensions require a slightly different installation method to a traditional php-based library or framework. You can either download a binary package for the system of your choice or build it from the sources.",
    "install_8458efd5cfb7e32b7a48fe0ab64285af": "Windows",
    "install_ff1363bcd28f96670272daf6d775d72f": "To use phalcon on Windows you can download a DLL library. Edit your php.ini file and then append at the end:",
    "install_44f00144e8778ea8ed7917345caa3bd3": "    extension=php_phalcon.dll",
    "install_6a49732434aa0c102cc05c6a55e1879f": "Restart your webserver.",
    "install_94b7a1e85a5e5275e9d2cc04f8023598": "The following screencast is a step-by-step guide to install Phalcon on Windows:",
    "install_7a752ac7821139893d4b7d8eb762a483": "Related Guides",
    "install_dda3a9c60b475b60966aa176def7e97b": "Linux/Solaris/Mac",
    "install_715c1caf8effafa7bca2e6fad2aef37b": "On a Linux/Solaris/Mac system you can easily compile and install the extension from the source code:",
    "install_72a3660e8fa5fbfc8034c2e330a6f573": "Requirements",
    "install_70a4fa2ec4a0a6356164c746dc431647": "Prerequisite packages are:",
    "install_6a17ca0ee031283ea5d3a812cfb19285": "PHP 5.3.x/5.4.x/5.5.x development resources",
    "install_d99ea35b57fc4e0a65d005b0a751c744": "GCC compiler (Linux/Solaris) or Xcode (Mac)",
    "install_c4bd9f7964fd692c23f751f60b83c4eb": "Git (if not already installed in your system - unless you download the package from GitHub and upload it on your server via FTP/SFTP)",
    "install_6e2d310434cb02d415fcff3819ca2f0b": "Specific packages for common platforms:",
    "install_9bae46c938052c986789bce50ddc11c1": "Compilation",
    "install_7277a5ce5aea3f76cacc10e144264e7f": "Creating the extension:",
    "install_33fb7441b040e39278820011290bc5c4": "github.com/phalcon/cphalcon.git",
    "install_ddf369d0a475a6c8b618f59910f37ec7": "Add extension to your php configuration:",
    "install_c6ca645f3bcde844f8ec6f8c99f61167": "Restart the webserver.",
    "install_10d3ab0887312140a685f66b49109538": "Phalcon automatically detects your architecture, however, you can force the compilation for a specific architecture:",
    "install_b2f5cb7e2747e60a61390100a08e8376": "FreeBSD",
    "install_d43da86ea091d3cd812a33429d570ae8": "A port is available for FreeBSD. Just only need these simple line commands to install it:",
    "install_6899336ad02d327ac9b4d1670f72a18c": "or",
    "install_23a4a0eeaa8c65b1110e8da55a261fe4": "Installation Notes",
    "install_4c62f4f5d780cac9af64cb12a7120d75": "Installation notes for Web Servers:",
    "intl_85d2bc52cf53e27ca20645a9431c6930": "Internationalization",
    "intl_92aaa680cf30691651a1f728f7bbd0b1": "Phalcon is written in C as an extension for PHP. There is a :2: extension that offers internationalization functions to PHP applications called intl_. Starting from PHP 5.4/5.5 this extension is bundled with PHP. Its documentation can be found in the pages of the official :1:.",
    "intl_7225af6a7690ce43b3f118bf9235a8fa": "Phalcon does not offer this functionality, since creating such a component would be replicating existing code.",
    "intl_16faf9a6a387d16c7e9f1b7114966512": "In the examples below, we will show you how to implement the :1: extension's functionality into Phalcon powered applications.",
    "intl_41d225fcbd85a9a62195821945d72707": "Find out best available Locale",
    "intl_f05a8fa309000dd32507bbfee2a385f3": "There are several ways to find out the best available locale using intl_. One of them is to check the HTTP \"Accept-Language\" header:",
    "intl_234654f0f0e9e33d203000dca2a8cd2a": "Locale could be something like \"en_GB\" or \"en\"",
    "intl_3ebdfbd89c1a413a2c4f3c0d948e52e5": "Below method returns a locale identified. It is used to get language, culture, or regionally-specific behavior from the Locale API. Examples of identifiers include:",
    "intl_cf1b02e2486f0039bd59f717decb9cc1": "en-US (English, United States)",
    "intl_a34d117f6f785267c5b36c263ce85dd6": "zh-Hant-TW (Chinese, Traditional Script, Taiwan)",
    "intl_fa9dbc673366df814c56b98f19c55fd0": "fr-CA, fr-FR (French for Canada and France respectively)",
    "intl_5fcd413e9e2e372297f489fe24dbdce6": "Formatting messages based on Locale",
    "intl_2a2dc5fcf450c50a14b465a81d95b046": "Part of creating a localized application is to produce concatenated, language-neutral messages. The :1: allows for the production of those messages.",
    "intl_178d127c9218637e406a7ca6e727d84d": "Printing numbers formatted based on some locale:",
    "intl_74788676640cf24873a5d31e48003c5d": "Prints € 4 560",
    "intl_408b4ce049aa9e37589305879ea666fc": "Prints USD$ 4,560.5",
    "intl_5b0f1aa2db82f39e46860db7cfb185e7": "Prints ARS$ 1.250,25",
    "intl_9422d3dc3121dcaa1b553f4157627efc": "Message formatting using time and date patterns:",
    "intl_0e63c14b25c7747f68277e26ccdb6bd4": "Setting parameters",
    "intl_461394b52a6120d8388b7b12bf86e854": "Prints \"At 3:50:31 PM on Apr 19, 2012, there was a disturbance on planet 7.\"",
    "intl_01f6129f2b84e7ac8c111e93980535be": "Prints \"À 15:53:01 le 19 avr. 2012, il y avait une perturbation sur la planète 7.\"",
    "intl_e68e6468f5553c619b4754175b53776d": "Locale-Sensitive comparison",
    "intl_1b21ef2fc5095722b554a3e0ffa70435": "The :1: class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:",
    "intl_94a3195d410f44f5b576523a8764398d": "Create a collator using Spanish locale",
    "intl_774f2564a457cd5a559a81260a86c650": "Returns that the strings are equal, in spite of the emphasis on the \"o\"",
    "intl_594eac9635771cadbc71967a3d5e6ec5": "Returns that the strings are not equal",
    "intl_86b69a9604c947e11ebd5d3a7ea33966": "Transliteration",
    "intl_7b5214c4dcab9dad7ea131785b8b50f9": ":1: provides transliteration of strings:",
    "license_debf68da9d3b0d345c9b16cae2e32a25": "License",
    "license_a46265b0d94ec8e45c0cf3e8131cbe46": "Phalcon is brought to you by the Phalcon Team! [:1: - :2: - :3:]",
    "license_8cd2365e265d8c28129c81474bffdf8e": "The Phalcon PHP Framework is released under the :1:. Except where otherwise noted, content on this site is licensed under the :2:.",
    "license_c9352e181a96a525a99abbfce7b505ca": "If you love Phalcon please return something to the community! :)",
    "linuxtools_1de5cd7e1c9ca36c547d9394c8f9fb1b": "Phalcon Developer Tools on Linux",
    "linuxtools_03b5f17c4d80ec27af725ce864bbe9a8": "These steps will guide you through the process of installing Phalcon Developer Tools for Linux.",
    "linuxtools_17da86073980dfe20dfa8c157c811998": "Prerequisites",
    "linuxtools_3912e149b2c9d2a44404800fe8b905b4": "The Phalcon PHP extension is required to run Phalcon Tools. If you haven't installed it yet, please see the :1: section for instructions.",
    "linuxtools_d779ffb4113a9aa6902414524b888ae6": "Download",
    "linuxtools_c52ad3c8bfdd468181a9d135893b6e99": "You can download a cross platform package containing the developer tools from the :1: section. Also you can clone it from Github_.",
    "linuxtools_ff61f633242e4eefebcf5c44b9321c61": "Open a terminal and type the commands below:",
    "linuxtools_5f71013ef5ca1f063a80b134b12c16a7": "Then enter the folder where the tools were cloned and execute \". ./phalcon.sh\", (don't forget the dot at beginning of the command):",
    "linuxtools_01e9aefb62a0345d027bcb8b02bbe10e": "Congratulations you now have Phalcon tools installed!",
    "linuxtools_7a752ac7821139893d4b7d8eb762a483": "Related Guides",
    "loader_c8f48d17ec17f73c71701dbefa922bbe": "Universal Class Loader",
    "loader_e9efafebf4cb67840a64a80aff0daf0c": ":1: is a component that allows you to load project classes automatically, based on some predefined rules. Since this component is written in C, it provides the lowest overhead in reading and interpreting external PHP files.",
    "loader_e4c6f8515974b8349488fe3d89d75280": "The behavior of this component is based on the PHP's capability of :2:. If a class that does not exist is used in any part of the code, a special handler will try to load it. :1: serves as the special handler for this operation. By loading classes on a need to load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called :3:.",
    "loader_6e14a95cb826e28080486414b346a683": "With this component you can load files from other projects or vendors, this autoloader is :1: compliant.",
    "loader_334d1d8c943955240927884d0cd43b58": ":1: offers four options to autoload classes. You can use them one at a time or combine them.",
    "loader_f0d1ea6f8ecdc3c9be68760b4db0bb54": "Registering Namespaces",
    "loader_e1df98f6943b181da25c4f0cd238e04c": "If you're organizing your code using namespaces, or external libraries do so, the registerNamespaces() provides the autoloading mechanism. It takes an associative array, which keys are namespace prefixes and their values are directories where the classes are located in. The namespace separator will be replaced by the directory separator when the loader try to find the classes. Remember always to add a trailing slash at the end of the paths.",
    "loader_4b4ba81e5d13f4105da1c536c17e790e": "Creates the autoloader",
    "loader_b365b3098f8bada9ada29235f6405308": "Register some namespaces",
    "loader_974a6d2fc8d2eda86afedcbe99ba9670": "register autoloader",
    "loader_4d55139683b97606adab8b179f54f916": "The required class will automatically include the",
    "loader_e90d8097da0b4e429f30d55a2d335eff": "file vendor/example/adapter/Some.php",
    "loader_9fc168b6855cd7b997409068c74c496a": "Registering Prefixes",
    "loader_bf8461fb6eccab1951e194ec636657d3": "This strategy is similar to the namespaces strategy. It takes an associative array, which keys are prefixes and their values are directories where the classes are located in. The namespace separator and the \"_\" underscore character will be replaced by the directory separator when the loader try to find the classes. Remember always to add a trailing slash at the end of the paths.",
    "loader_80d81894c6ec279f72c8925ed3b552a8": "Register some prefixes",
    "loader_f9a1bb9e4166386c8996631599b15b81": "Registering Directories",
    "loader_d6e445d6d41140c51fb599b42816e741": "The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It's important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.",
    "loader_2ca87035b51a0efda122b88cce1f8d6a": "Register some directories",
    "loader_d530bf9509e078b10e089a8336c504e7": "The required class will automatically include the file from",
    "loader_02f3bb1b6cbd25185a722f86d5c645c6": "the first directory where it has been located",
    "loader_e642de17f8ef58b01d672536783d18a5": "i.e. library/OtherComponent/Other/Some.php",
    "loader_3fb81c3fa5af1fb24fa95ce3a29a1546": "Registering Classes",
    "loader_ffa6e96687b518bb06e47a1dbba4c2e8": "The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.",
    "loader_d44269b3d8851f6b1e0fccf6afa06506": "Register some classes",
    "loader_19b41511f55c0eda2a991fcf351d377b": "Requiring a class will automatically include the file it references",
    "loader_d142b7f8a10d00c5f0ca4482e7a181eb": "in the associative array",
    "loader_681e56350f1db61e293841bb6d7b4c06": "Additional file extensions",
    "loader_0fc8fd6eb3f0b062b870078f9b044468": "Some autoloading strategies such as  \"prefixes\", \"namespaces\" or \"directories\" automatically append the \"php\" extension at the end of the checked file. If you are using additional extensions you could set it with the method \"setExtensions\". Files are checked in the order as it were defined:",
    "loader_9f6cb2e9ce681cf0eaf7326cc9978301": "Set file extensions to check",
    "loader_9bb8905b56939f589ab60a39a3f7cad3": "Modifying current strategies",
    "loader_69b2ab1eaa9b57f73f1c7f307e98c253": "Additional auto-loading data can be added to existing values in the following way:",
    "loader_36353d5e937e32a21b483c820274d1d6": "Adding more directories",
    "loader_d90de01f4d9134715969c2aa6bae6174": "Passing \"true\" as second parameter will merge the current values with new ones in any strategy.",
    "loader_d946d4fc503cdc77e799865f0f0ec045": "Security Layer",
    "loader_01ac6473cbf5b4105e52ec38365236bc": "Phalcon\\\\Loader offers a security layer sanitizing by default class names avoiding possible inclusion of unauthorized files. Consider the following example:",
    "loader_9f09a50d5ff20f231536e64a5470f34a": "Basic autoloader",
    "loader_e13269138f9f39bec8a393a4055d5c07": "The above auto-loader lacks of any security check, if by mistake in a function that launch the auto-loader, a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:",
    "loader_5394a579ea762ea2fbc3743172498043": "This variable is not filtered and comes from an insecure source",
    "loader_bff05a46e9a8ac0538aa324add0c506d": "Check if the class exists triggering the auto-loader",
    "loader_1724c47e8b4eab6cf91921fe9df7ea59": "If '../processes/important-process.php' is a valid file, an external user could execute the file without authorization.",
    "loader_45fd426d2bb6952a4b325897f7a59b40": "To avoid these or most sophisticated attacks, Phalcon\\\\Loader removes any invalid character from the class name reducing the possibility of being attacked.",
    "loader_b6386395fed27ad94fc2fc7a570fe221": "Autoloading Events",
    "loader_ec0aafc547f07550a41c144843c6af14": "In the following example, the EventsManager is working with the class loader, allowing us to obtain debugging information regarding the flow of operation:",
    "loader_300862db2c4124e3da5ab44ceb465f6b": "Listen all the loader events",
    "loader_b35fc09e5f2a9209956905e3f7a9f1e0": "Some events when returning boolean false could stop the active operation. The following events are supported:",
    "loader_f07747c719e154f6ba1384e010ddc59e": "Troubleshooting",
    "loader_1a3657a13f35fe1e1963850259869e36": "Some things to keep in mind when using the universal autoloader:",
    "loader_d4f107b682e4b15db5380eb0c2a050b5": "Auto-loading process is case-sensitive, the class will be loaded as it is written in the code",
    "loader_4c54cf1f5e17f7dd643543f0113c3c84": "Strategies based on namespaces/prefixes are faster than the directories strategy",
    "loader_c7f535c50766c55c428ef4bd2a5b595c": "If a cache bytecode like :1: is installed this will used to retrieve the requested file (an implicit caching of the file is performed)",
    "logging_e1e77dd383c1258dad2a6817a1c6fc23": "Logging",
    "logging_41974eb84205cc83111b0fdc785027b5": ":1: is a component whose purpose is to provide logging services for applications. It offers logging to different backends using different adapters. It also offers transaction logging, configuration options, different formats and filters. You can use the :1: for every logging need your application has, from debugging processes to tracing application flow.",
    "logging_59016d3191a4f3dbf5870903d350a278": "Adapters",
    "logging_7719970f241857ca9e504df050236f81": "This component makes use of adapters to store the logged messages. The use of adapters allows for a common interface for logging while switching backends if necessary. The adapters supported are:",
    "logging_09b0ceccae27e6c1ca869a1550eedb8c": "Creating a Log",
    "logging_e63e0c079b7fee380985d6e84e61a2b6": "The example below shows how to create a log and add messages to it:",
    "logging_cb5d3142af07aef2127316bfd68d9d19": "The log generated is below:",
    "logging_70f40070204552b5f24220685f1af1d5": "Transactions",
    "logging_4fc46c960ea33af192240eab46a09109": "Logging data to an adapter i.e. File (file system) is always an expensive operation in terms of performance. To combat that, you can take advantage of logging transactions. Transactions store log data temporarily in memory and later on write the data to the relevant adapter (File in this case) in a single atomic operation.",
    "logging_2a70cdafe033470e9b3f6f78913a4f72": "Create the logger",
    "logging_a621366cd5b2907e40d03bd48faf18e5": "Start a transaction",
    "logging_f92911d145c18014b3d99deab047b7fd": "Add messages",
    "logging_3d10059e9fa0ef6e28e2c5c43d9399da": "Commit messages to file",
    "logging_56a89ee6c74eb7e75196fb76e0a4bb02": "Logging to Multiple Handlers",
    "logging_bf9c3e53094ec01daf0f9301d7a9ba1f": ":1: allows to send messages to multiple handlers with a just single call:",
    "logging_1241b25452d292af9143221031ca6dd1": "The messages are sent to the handlers in the order they where registered.",
    "logging_e878a9635e264ea1629ff323631591f3": "Message Formatting",
    "logging_a870e6e66975cb06cf0285e1c849faec": "This component makes use of 'formatters' to format messages before sent them to the backend. The formatters available are:",
    "logging_36ddd603e810700ce82861595cb6d9b7": "Line Formatter",
    "logging_aa191ace515bda8040360c2ff89b5485": "Formats the messages using a one-line string. The default logging format is:",
    "logging_de600f2e9541eff7ef136e299fe2b92b": "[%date%][%type%] %message%",
    "logging_0c68f54938d932495a36e96308128be9": "You can change the default format using setFormat(), this allows you to change the format of the logged messages by defining your own. The log format variables allowed are:",
    "logging_fe5621cbba6fdafc0fc077ca00bab123": "The example below shows how to change the log format:",
    "logging_d2677d2726b25c363b042845f08899c8": "Changing the logger format",
    "logging_45b978c53f59c4bf462869a1c482ca20": "Implementing your own formatters",
    "logging_4b040fe462407c8942f9ad3ef57a973d": "The :1: interface must be implemented in order to create your own logger formatter or extend the existing ones.",
    "logging_0f7a0691a4100d4ef026cdbb15b0d517": "The following examples show the basic use of each adapter:",
    "logging_732096ca5a9f846ece0a3c3c969a6dc3": "Stream Logger",
    "logging_91d041471960997a18507b9ecc95a747": "The stream logger writes messages to a valid registered stream in PHP. A list of streams is available :1::",
    "logging_50d8004398b59f8b8cf24c2fc36723f2": "Opens a stream using zlib compression",
    "logging_c2515f4bda92df933bc062b6ae77f9c9": "Writes the logs to stderr",
    "logging_ee91c22182c28068ea54db509b31fa5a": "File Logger",
    "logging_fda2a76fe7505c9bff333c04c17070a2": "This logger uses plain files to log any kind of data. By default all logger files are open using append mode which open the files for writing only; placing the file pointer at the end of the file. If the file does not exist, attempt to create it. You can change this mode passing additional options to the constructor:",
    "logging_43103833c8e0bdad1e1a92e84a01e51f": "Create the file logger in 'w' mode",
    "logging_d7d7d7efa5d766b6f1f59b94694a31d4": "Syslog Logger",
    "logging_23e96bb8081304bbd3f86587f6c62662": "This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.",
    "logging_23cb76671b38f735ce0e4ee4e7795897": "Basic Usage",
    "logging_0a5a93c53e0f5caf32e2c3b8e1ae0782": "Setting ident/mode/facility",
    "logging_8b5f240b2cf1e114016ebd19135f8963": "FirePHP Logger",
    "logging_281495c2d33850fd0604677e8f37a6e8": "This logger sends messages to the FirePHP.",
    "mactools_8875ed4a38ec62511ff4ce9cd88cc0c5": "Phalcon Developer Tools on Mac OS X",
    "mactools_4e5a663ce138d84ccef5783545d53ab0": "These steps will guide you through the process of installing Phalcon Developer Tools for OS/X.",
    "mactools_17da86073980dfe20dfa8c157c811998": "Prerequisites",
    "mactools_3912e149b2c9d2a44404800fe8b905b4": "The Phalcon PHP extension is required to run Phalcon Tools. If you haven't installed it yet, please see the :1: section for instructions.",
    "mactools_d779ffb4113a9aa6902414524b888ae6": "Download",
    "mactools_1e9ca6cd729bb432fc56d6c2a05ebc0a": "You can download a cross platform package containing the developer tools from the :1: section. You can also clone it from :2:.",
    "mactools_74e34247256f47b8add2686dfa66e055": "Open the terminal application:",
    "mactools_7533d1c454ddf951c7ea3d3882fa4ed1": "Copy & Paste the commands below in your terminal:",
    "mactools_8baa2b24e0aea0100d050ef4d38bb3ca": "github.com/phalcon/phalcon-devtools/zipball/master",
    "mactools_c1c5fc718f24c841791e7c6dd0da88cd": "Check where the phalcon-tools directory was installed using a *pwd* command in your terminal:",
    "mactools_75c4a6f29be30c86991ffa86ae2247c7": "On the Mac platform, you need to configure your user PATH to include Phalcon tools. Edit your .profile and append the Phalcon tools path to the environment variable PATH:",
    "mactools_896007dbffcd611bb1922e7c92e72f51": "Insert these two lines at the end of the file:",
    "mactools_1a20c22af985bae096e1685d215204dd": "The .profile should look like this:",
    "mactools_9b6141d0f172bf5ce03c6036b073015b": "Save your changes and close the editor. In the terminal window, type the following commands to create a symbolic link to the phalcon.sh script:",
    "mactools_f00a6605dfef3623de0b68f7c28fc554": "Type the command \"phalcon\" and you will see something like this:",
    "mactools_01e9aefb62a0345d027bcb8b02bbe10e": "Congratulations you now have Phalcon tools installed!",
    "mactools_7a752ac7821139893d4b7d8eb762a483": "Related Guides",
    "micro_788ba238448c0f22d9c254a70b84065b": "Micro Applications",
    "micro_648846d5e9eabd0bf02300f083324c8f": "With Phalcon you can create \"Micro-Framework like\" applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.",
    "micro_e31cd488f01b9bb2939d662e1188325b": "Creating a Micro Application",
    "micro_c3f8dc443c133feb69f8ff42aa51af6a": ":1: is the class responsible for implementing a micro application.",
    "micro_a8a25f2aac05af019b129455c8d4e2eb": "Defining routes",
    "micro_2d41046e7fd9f64847471e5ceb7029b0": "After instantiating the object, you will need to add some routes. :1: manages routing internally. Routes must always start with /. A HTTP method constraint is optionally required when defining routes, so as to instruct the router to match only if the request also matches the HTTP methods. The following example shows how to define a route for the method GET:",
    "micro_8a2607a1b3d9c1e7d4c6aa7b1cc42166": "The \"get\" method indicates that the associated HTTP method is GET. The route /say/hello/{name} also has a parameter {$name} that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:",
    "micro_7498d8df6b27d927a87b057af1aebf65": "With a function",
    "micro_01da912e811a33919d47c8a74ddfd861": "With a static method",
    "micro_bf0bdbca721b0c4962c839806d309ccb": "With a method in an object",
    "micro_9c35a54a2808945a495840b422be844c": "Anonymous function",
    "micro_316bd31a828df167d7d72ed74c55ead7": "which the route is constrained for:",
    "micro_0acdc84f01c3de1996d30eb564480858": "Matches if the HTTP method is GET",
    "micro_a5f97bf5b879d03818789362e62f6cbe": "Matches if the HTTP method is POST",
    "micro_9685de3866b5e3626a73be2839aef956": "Matches if the HTTP method is PUT",
    "micro_d3e1d13f48d2e7cb88aede1b28427da6": "Matches if the HTTP method is DELETE",
    "micro_363822d61f231b2b8acf67bdbd1dce45": "Matches if the HTTP method is OPTIONS",
    "micro_cfe365e9b04bf44e504d0472f5325182": "Matches if the HTTP method is PATCH",
    "micro_5330c1b15d6f52715e45f926d68be6fc": "Matches if the HTTP method is GET or POST",
    "micro_4a215d25b41d831f94fd7b60c56823b3": "Routes with Parameters",
    "micro_384b68c39a5ef3f758b2911215ecab48": "Defining parameters in routes is very easy as demonstrated above. The name of the parameter has to be enclosed in brackets. Parameter formatting is also available using regular expressions to ensure consistency of data. This is demonstrated in the example below:",
    "micro_34f4f4ed3bc000637cc93e5f7e8260ad": "This route have two parameters and each of them have a format",
    "micro_796c0bcf8150277f840e5a6d386a47de": "Starting Route",
    "micro_a7fdbf88ca37d62f53e85d18ae5798ef": "Normally, the starting route in an application is the route /, and it will more frequent to be accessed by the method GET. This scenario is coded as follows:",
    "micro_7c335adb80c521502006bc733ed871b0": "This is the start route",
    "micro_06227ff2f8829cdfcedeee027ea7298b": "Rewrite Rules",
    "micro_1be14374a2c637b2bbbb4a3e44954076": "The following rules can be used together with Apache to rewrite the URis:",
    "micro_1e6e4ade63d9748952ec93d9dfac5e20": "Working with Responses",
    "micro_0ce887b41000aeeb257910c81b702ba0": "You are free to produce any kind of response in a handler: directly make an output, use a template engine, include a view, return a json, etc.:",
    "micro_a80ab8816878c89e3adc0a7cece510ec": "Direct output",
    "micro_c1eaa0b85bc04bf5960a7de81a90f98d": "Requiring another file",
    "micro_05fad9a71467b9e171ba2cff2dd29bf0": "Returning a JSON",
    "micro_078c18caff766bfd91b697a505e39f3b": "In addition to that, you have access to the service :1:, with which you can manipulate better the response:",
    "micro_9dcceb5181138665045d759a481b4f30": "Set the Content-Type header",
    "micro_b19027a2de9f8ab406282531f7a2fa9e": "Print a file",
    "micro_a9e7eaad6b915f732d9afbbf789280ca": "Or create a response object and return it from the handler:",
    "micro_ea25894af54d5d28a23fb08f9f153999": "Create a response",
    "micro_360d9f80b5a733918b85c894147c64a1": "Pass the content of a file",
    "micro_0511ba07cfb3ddd1a0fced413a2fe537": "Return the response",
    "micro_85ebb8b1fe35876ecb488660ec541ddb": "Making redirections",
    "micro_5c2a4dda48773c7b7b6acea701a709ee": "Redirections could be performed to forward the execution flow to another route:",
    "micro_4e535a56cb99fc005c3d4945a41d7713": "This route makes a redirection to another route",
    "micro_9798a318dd3602294c210880870c54e0": "Generating URLs for Routes",
    "micro_fc9ada7d90a72dbea7d915962b193e3c": ":1: can be used to produce URLs based on the defined routes. You need to set up a name for the route; by this way the \"url\" service can produce the corresponding URL:",
    "micro_1baeb154b758af70236b382c8a669750": "Set a route with the name \"show-post\"",
    "micro_1666d869e2703e08a0904736d87914a8": ".. show the post here",
    "micro_efe1f7fde2be6aff0a75f3c05941c02c": "produce an URL somewhere",
    "micro_1edd36cbfb44041b7c30b16d6c2d799a": "Interacting with the Dependency Injector",
    "micro_d6d3077e8d6cc151676e5b21b68818d8": "In the micro application, a :1: services container is created implicitly; additionally you can create outside the application a container to manipulate its services:",
    "micro_ca39bc6c921a2d9027fa80a214dfaa52": "Read a setting from the config",
    "micro_64079488a59faeb550ea2c18104673d3": "The array-syntax is allowed to easily set/get services in the internal services container:",
    "micro_748cc1e41c403cd76458fba2c9792f85": "Setup the database service",
    "micro_dfe1468d30627f01538ae98507febc3e": "Not-Found Handler",
    "micro_3cd465e50bae5ff20846030afa6f1c91": "When an user tries to access a route that is not defined, the micro application will try to execute the \"Not-Found\" handler. An example of that behavior is below:",
    "micro_4325ce4e9847b0d604ca69b6743b6465": "Models in Micro Applications",
    "micro_be1942297beba9b13307b53413357aae": ":1: can be used transparently in Micro Applications, only is required an autoloader to load models:",
    "micro_b2f9f6b99cf3263485d410423f15bf18": "Micro Application Events",
    "micro_faad8ad5ff6758d3fb51fe5f61a6f0f7": ":1: is able to send events to the :2: (if it is present). Events are triggered using the type \"micro\". The following events are supported:",
    "micro_0f780737706f95d6efb0e43b8c5b9370": "In the following example, we explain how to control the application security using events:",
    "micro_ccea41bb95ad572b5f593c2d1852d1d4": "Create a events manager",
    "micro_39649819a509d7cf883165be8aeecce9": "Listen all the application events",
    "micro_0fbedd9204dc5db86ea0a5da97f26c15": "Return (false) stop the operation",
    "micro_5f8a807560139399123c35aaaf7132a9": "Bind the events manager to the app",
    "micro_a954117055b58c8596806ed51d04a5bc": "Middleware events",
    "micro_cd46592838085b7b4c94e18b6cca9f5f": "In addition to the events manager, events can be added using the methods 'before', 'after' and 'finish':",
    "micro_7a19577910984437f22b54c1da5b89c4": "Executed before every route is executed",
    "micro_db2cb8a8a9f51fb25719488bfcef8132": "Return false cancels the route execution",
    "micro_ad6dff7322b8f1daafebd4471d17e0d1": "This is executed after the route was executed",
    "micro_7e6106d8f1196faf1366c4a2f2c7ad4e": "This is executed when the request has been served",
    "micro_af61d0ee94d5363bff4723b20b510672": "You can call the methods several times to add more events of the same type:",
    "micro_8e6935bf018891c2e1c0d04360e78cbd": "First 'finish' middleware",
    "micro_bc7d01509c0ceb1a729f0cd93c103f61": "Second 'finish' middleware",
    "micro_91247934de46a6239a1477c5033afebc": "Code for middlewares can be reused using separate classes:",
    "micro_a91acd4a04a8d63b54eca9f777dc2f4a": "Check if the request is cached",
    "micro_d188b24bbaa8eb2535c56aa6ae8fface": "Then add the instance to the application:",
    "micro_8b6387c927d810b580482dcced74c785": "The following middleware events are available:",
    "micro_8d672192be99dfd34509f659e0938d58": "Using Controllers as Handlers",
    "micro_b88f0d3514ad22d0e9b243ac6a6790db": "Medium applications using the Micro\\\\MVC approach may require organize handlers in controllers. You can use :1: to group handlers that belongs to controllers:",
    "micro_75189147858476e97696411d319fca0b": "Set the main handler. ie. a controller instance",
    "micro_252cc4557a0572ad7e2a353bc2a19fe6": "Set a common prefix for all routes",
    "micro_8feeee82ecff4dc4ac6b094e4b583f67": "Use the method 'index' in PostsController",
    "micro_fea4f64b27da7c5c89a2d258446ee102": "Use the method 'show' in PostsController",
    "micro_0974007ee9d282272b7beb588446ad82": "The controller 'PostsController' might look like this:",
    "micro_5443e6f2efcec044c0dbcbaeb846bf40": "In the above example the controller is directly instantiated, Collection also have the ability to lazy-load controllers, this option provide better performance loading controllers only if the related routes are matched:",
    "micro_96018889300caae7d7d05f83cd8e858c": "Returning Responses",
    "micro_e11edfcd2de034201315d289420a5edd": "Handlers may return raw responses using :1: or a component that implements the relevant interface. When responses are returned by handlers they are automatically sent by the application.",
    "micro_c06c8a627788b3cb7c88a7224b652b37": "Return a response",
    "micro_3eeddf70df32086a3d2bb22803b559d4": "Rendering Views",
    "micro_157185baf0db14498290e302c87df99c": ":1: can be used to render views, the following example shows how to do that:",
    "micro_18c2a1c6c28339bee817691385f44cbd": "Return a rendered view",
    "micro_81c40fc338aba7ac1b81efcd965882a7": "Render app/views/products/show.phtml passing some variables",
    "migrations_e9344089a64801b2141c890b330a0fcb": "Database Migrations",
    "migrations_f301d41b7379bf73aa2ec3a13c5aa6e0": "Migrations are a convenient way for you to alter your database in a structured and organized manner.",
    "migrations_6d0774cca265eac9c4f7900155a19c10": "Often in development we need to update changes in production environments. Some of these changes could be database modifications like new fields, new tables, removing indexes, etc.",
    "migrations_86a4e169a1f5e1c962715ed06af30e3b": "When a migration is generated a set of classes are created to describe how your database is structured at that moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.",
    "migrations_c2c6a196f47f93f72deb7b1bdb09136d": "Schema Dumping",
    "migrations_8be6a9683bb5d5b5bf2c2c4bac56783f": "The :1: provides scripts to manage migrations (generation, running and rollback).",
    "migrations_203535c85e7bb7824da0d937e8ab2fe0": "The available options for generating migrations are:",
    "migrations_360af274a46cce617945ea23ff912b4b": "Running this script without any parameters will simply dump every object (tables and views) from your database in migration classes.",
    "migrations_b726638947cbfbefc87e275c663b82a1": "Each migration has a version identifier associated to it. The version number allows us to identify if the migration is newer or older than the current 'version' of our database. Versions also inform Phalcon of the running order when executing a migration.",
    "migrations_6d7decd5070994a0afa0d63acb389aca": "When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.",
    "migrations_28e728f8b1f2d65ed3c758a61286d6d9": "By default :1: use the *app/migrations* directory to dump the migration files. You can change the location by setting one of the parameters on the generation script. Each table in the database has its respective class generated in a separated file under a directory referring its version:",
    "migrations_b673cb7a0ed9fb88408b3bb89ae3c1ef": "Migration Class Anatomy",
    "migrations_1dd1afd8dc05142d04a6cb584c4be3f3": "Each file contains a unique class that extends the Phalcon\\\\Mvc\\\\Model\\\\Migration These classes normally have two methods: up() and down(). Up() performs the migration, while down() rolls it back.",
    "migrations_cbe6b57bfb055245ecb16ec1e3e6fd23": "Up() also contains the *magic* method morphTable(). The magic comes when it recognizes the changes needed to synchronize the actual table in the database to the description given.",
    "migrations_5d8072dc56e4dcc8255178194d5001c1": "The class is called \"ProductsMigration_100\". Suffix 100 refers to the version 1.0.0. morphTable() receives an associative array with 4 possible sections:",
    "migrations_fdc42990e3b6f6fbdfa0c2091c3dd1b0": "Defining Columns",
    "migrations_d5dd06884d15100629a1a7efa90e4366": ":1: is used to define table columns. It encapsulates a wide variety of column related features. Its constructor receives as first parameter the column name and an array describing the column. The following options are available when describing columns:",
    "migrations_693f023ec4e718b7c0a6c9a231892599": "Database migrations support the following database column types:",
    "migrations_fe7ebd9868a24f4d94e7571d6ad9777d": "Phalcon\\\\Db\\\\Column::TYPE_INTEGER",
    "migrations_75f9a80d8632ac4324c0448868cf0a2f": "Phalcon\\\\Db\\\\Column::TYPE_DATE",
    "migrations_b3d1b996d6ec9ea4505f6d33bc37c0f1": "Phalcon\\\\Db\\\\Column::TYPE_VARCHAR",
    "migrations_71e6628e8bd0f49a16f167ff06a44092": "Phalcon\\\\Db\\\\Column::TYPE_DECIMAL",
    "migrations_8779dd20292f14882b4da2bd3cb06e73": "Phalcon\\\\Db\\\\Column::TYPE_DATETIME",
    "migrations_e1c672080a2ed8b106cae6b062a5ac78": "Phalcon\\\\Db\\\\Column::TYPE_CHAR",
    "migrations_66689482f9de2295ca0d59d4361a86f5": "Phalcon\\\\Db\\\\Column::TYPE_TEXT",
    "migrations_98592e9224abec7b6a4957b5f4b035b4": "Defining Indexes",
    "migrations_aeb3e98001a3a150150cefe12302d896": ":1: defines table indexes. An index only requires that you define a name for it and a list of its columns. Note that if any index has the name PRIMARY, Phalcon will create a primary key index in that table.",
    "migrations_18f0b0ff59a37b6adc6b8a16e4430559": "Defining References",
    "migrations_1f2b29d16db162f94052bbfd388e6954": ":1: defines table references (also called foreign keys). The following options can be used to define a reference:",
    "migrations_3288ae777aa932ca0f6a2a90da292c6d": "Writing Migrations",
    "migrations_bcfc0fca08f7f3bfb030bbba1fad022c": "Migrations aren't only designed to \"morph\" table. A migration is just a regular PHP class so you're not limited to these functions. For example after adding a column you could write code to set the value of that column for existing records. For more details and examples of individual methods, check the :1:.",
    "migrations_d7452f33e484571303e4cc4ab5b15ffe": "Running Migrations",
    "migrations_063f176fa57cf226a7d0a5d3b84c0935": "Once the generated migrations are uploaded on the target server, you can easily run them as shown in the following example:",
    "migrations_1c64e9a2a899094ccdcad4688e8b3b3d": "Depending on how outdated is the database with respect to migrations, Phalcon may run multiple migration versions in the same migration process. If you specify a target version, Phalcon will run the required migrations until it reaches the specified version.",
    "models-cache_839f3f9c5311b487faa792e0587aa2c6": "Caching in the ORM",
    "models-cache_95cb61056b392ac5982d769f3a94770a": "Every application is different, we could have models whose data change frequently and others that rarely change. Accessing database systems is often one of the most common bottlenecks in terms of performance. This is due to the complex connection/communication processes that PHP must do in each request to obtain data from the database. Therefore, if we want to achieve good performance we need to add some layers of caching where the application requires it.",
    "models-cache_e55c4c7c721ad73838373f9792e1c8c3": "This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.",
    "models-cache_6422e6a17a2941513403f9d3640a1c81": "Caching Resultsets",
    "models-cache_9bc17a041fe4fe724ea7d4fdbe869c0f": "A well established technique to avoid the continuous access to the database is to cache resultsets that don't change frequently using a system with faster access (usually memory).",
    "models-cache_30668f227cebea1ae50d33c013dfe0d6": "When :1: requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name \"modelsCache\".",
    "models-cache_2ab3778b45194507fc193d4168e9f30a": "As Phalcon provides a component to :1: any kind of data, we'll explain how to integrate it with Models. First, you must register it as a service in the services container:",
    "models-cache_c46ec7fd0baf68b0a0398abad10d045c": "Set the models cache service",
    "models-cache_83b746e3e149c65f5d387ee018ce18e1": "Cache data for one day by default",
    "models-cache_27c9c860a0e993fc9cd8fe1f98c2dd13": "Memcached connection settings",
    "models-cache_eb40dd6627183a961e507390d965a529": "You have complete control in creating and customizing the cache before being used by registering the service as an anonymous function. Once the cache setup is properly defined you could cache resultsets as follows:",
    "models-cache_d3f37d5d77852c3754f59d5c8bc38a1c": "Get products without caching",
    "models-cache_c90421ba39563a01954c9e38a0efa33d": "Just cache the resultset. The cache will expire in 1 hour (3600 seconds)",
    "models-cache_d210140ea7a975f5af5204a35990b6c6": "Cache the resultset for only for 5 minutes",
    "models-cache_051afb10c0cf687b846f3b6897f762d4": "Using a custom cache",
    "models-cache_157e77512eaf5de628c5f6d233869c8d": "Caching could be also applied to resultsets generated using relationships:",
    "models-cache_aa2e6bcafd60883ae49cc24e0cb61605": "Query some post",
    "models-cache_3207752bc461bd9261c3a11699997cc6": "Get comments related to a post, also cache it",
    "models-cache_ef555ec89407e63d3269ccd2b15d887d": "Get comments related to a post, setting lifetime",
    "models-cache_9d4f9253bcab3867f5842dcb634dede4": "When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.",
    "models-cache_1309780b72f30496b61631983bcbdc8c": "Note that not all resultsets must be cached. Results that change very frequently should not be cached since they are invalidated very quickly and caching in that case impacts performance. Additionally, large datasets that do not change frequently could be cached, but that is a decision that the developer has to make based on the available caching mechanism and whether the performance impact to simply retrieve that data in the first place is acceptable.",
    "models-cache_3ed32570bf1cb380cb4f367cc81bb281": "Overriding find/findFirst",
    "models-cache_3de9b13290d13e3419c6721aa9fdd48c": "As seen above, these methods are available in models that inherit :1::",
    "models-cache_373fe0ef7bf8bbc1062fa79aa92fe215": "By doing this, you're intercepting all the calls to these methods, this way, you can add a cache layer or run the query if there is no cache. For example, a very basic cache implementation, uses a static property to avoid that a record would be queried several times in a same request:",
    "models-cache_d96ab0d2abf8d06ac79f194da6dba4c9": "Create an unique key based on the parameters",
    "models-cache_119ef0030a2b09b65c226429b076f571": "Store the result in the memory cache",
    "models-cache_663cf45b9f459a24aa2ac47eaa908b67": "Return the result in the cache",
    "models-cache_af2c0186f6bd6b7836c204d7fbf89d42": "Access the database is several times slower than calculate a cache key, you're free in implement the key generation strategy you find better for your needs. Note that a good key avoids collisions as much as possible, this means that different keys returns unrelated records to the find parameters.",
    "models-cache_1684acf662dbb430e9bb369d7f6d9539": "In the above example, we used a cache in memory, it is useful as a first level cache. Once we have the memory cache, we can implement a second level cache layer like APC/XCache or a NoSQL database:",
    "models-cache_1678a76d8468b285a88907821276306c": "We're using APC as second cache",
    "models-cache_6d53a17bb9a5ffabff2ff97b2d171752": "There are no memory or apc cache",
    "models-cache_5f532865df03a51e71ee2083bc94aa1e": "Store the result in APC",
    "models-cache_3f0550c5ba8bc66b0145c05b696ba62f": "This gives you full control on how the the caches must be implemented for each model, if this strategy is common to several models you can create a base class for all of them:",
    "models-cache_4e1375f53ef0c978cf609acea7c76b38": ".. create a cache key based on the parameters",
    "models-cache_3e18e6fd93493211f25173d06798d74b": ".. custom caching strategy",
    "models-cache_cbef6dec996aaedacb875ab47b4a478c": "Then use this class as base class for each 'Cacheable' model:",
    "models-cache_f619f9e90a14811a9326ce3d6a6e6aca": "Forcing Cache",
    "models-cache_6bbeb0f3b3dfb43ae7d746922da64e28": "Earlier we saw how Phalcon\\\\Mvc\\\\Model has a built-in integration with the caching component provided by the framework. To make a record/resultset cacheable we pass the key 'cache' in the array of parameters:",
    "models-cache_5355522211efcea8d6cb4dddddc0d400": "This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the find/findFirst method to force every query to be cached:",
    "models-cache_124512375dc436ec89c8e2e17f355c43": "Convert the parameters to an array",
    "models-cache_0c9372806ffb6745c9c9adacd667b27b": "Check if a cache key wasn't passed",
    "models-cache_d983887368bc1aeeb8a7d0dbf37820a2": "and create the cache parameters",
    "models-cache_7f9169fdf457cb880ce9d25973c73f11": "Caching PHQL Queries",
    "models-cache_823b323401bce868288be958bb3ef207": "All queries in the ORM, no matter how high level syntax we used to create them are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:",
    "models-cache_2dc92ee793d02090370464d78ca48dac": "If you don't want to use the implicit cache just save the resulset into your favorite cache backend:",
    "models-cache_69ebf3305cc0af755ddf55bcad46f10c": "Reusable Related Records",
    "models-cache_aca1bd8a06b637f2491038b833ca4432": "Some models may have relationships to other models. This allows us to easily check the records that relate to instances in memory:",
    "models-cache_1a35fb79d9063249f16d3ca67bead727": "Get some invoice",
    "models-cache_8a4daeca65f733dbdc9dbca6527f851d": "Get the customer related to the invoice",
    "models-cache_e16166444362b0fe474040cd3eaad5e1": "Print his/her name",
    "models-cache_1450b2b316074644f2fd775d07035126": "This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:",
    "models-cache_734229e26203c940522b7093b2cf214a": "Get a set of invoices",
    "models-cache_fbb8a44bfd4a304b97d2d4207789550b": "A customer may have one or more bills, this means that the customer may be unnecessarily more than once. To avoid this, we could mark the relationship as reusable, this way, we tell the ORM to automatically reuse the records instead of re-querying them again and again:",
    "models-cache_cab4981195cf8fa7422a401ca5cd521f": "This cache works in memory only, this means that cached data are released when the request is terminated. You can add a more sophisticated cache for this scenario overriding the models manager:",
    "models-cache_fc7175adef9a2ba7477f57e9ec8cb1f5": "If the model is Products use the APC cache",
    "models-cache_5b802a5671396df846d4678aa45910c2": "For the rest, use the memory cache",
    "models-cache_7029c833677ccfbe1f854bc8642b9631": "Do not forget to register the custom models manager in the DI:",
    "models-cache_efe555e4b6c2aa4b091efcfdd07feba7": "Caching Related Records",
    "models-cache_167c1bde680b7a2a0bdf02e7f6a2a846": "When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using find/findFirst in the target model according to the following table:",
    "models-cache_ae2a8ea75f237e1665de20deddd187af": "This means that when you get a related record you could intercept how these data are obtained by implementing the corresponding method:",
    "models-cache_95b197310c9f475e448775744fbd67db": "Same as above",
    "models-cache_1f88a87fa11cb62e4d916071b5cf0ed4": "Accordingly, we could replace the findFirst method in the model Invoices and implement the cache we consider most appropriate:",
    "models-cache_22d2fa1350f9f3ee06e9af91feb8603f": "Caching Related Records Recursively",
    "models-cache_2bd99a946141b3039b298fa5dd8015c8": "In this scenario, we assume that everytime we query a result we also retrieve their associated records. If we store the records found together with their related entities perhaps we could reduce a bit the overhead required to obtain all entities:",
    "models-cache_46d72b8da1dd6d78ff8f4a7a776363dd": "returns data from a cache",
    "models-cache_3385399d048079251dee2de3ce0933c4": "stores data in the cache",
    "models-cache_3162d85b9d80a0d6168430d6792ccb08": "Create a unique key",
    "models-cache_2098f517516d00008a3963bd44c0b7bc": "Check if there are data in the cache",
    "models-cache_b2a7f24709a2fea9345b6059afe5a32f": "Valid data is an object",
    "models-cache_d91c9ea6ee79bfd38fd16847d2c76011": "Query the related customer",
    "models-cache_d92eea8a14ab0e4d417e5cb4b407dfa6": "Assign it to the record",
    "models-cache_fcbdd942176611635b18b4a09c2c4840": "Store the invoices in the cache + their customers",
    "models-cache_89e355a6cd118fbef59f6f3851d1ac1d": "add relations and initialize other stuff",
    "models-cache_b2328f272dbe20be455b22c19b1ff9d5": "Getting the invoices from the cache already obtains the customer data in just one hit, reducing the overall overhead of the operation. Note that this process can also be performed with PHQL following an alternative solution:",
    "models-cache_6eb6ea83e4137a5f45e1ec79b91ec252": "Caching based on Conditions",
    "models-cache_5e6828717b8ad3c64fa12c43a9647bc6": "In this scenario, the cache is implemented conditionally according to current conditions received. According to the range where the primary key is located we choose a different cache backend:",
    "models-cache_165c2321d4782029a5eccc88bbbd88f7": "The easiest way is adding an static method to the model that chooses the right cache to be used:",
    "models-cache_b4eb94aa4b707ff948987f11f2495f1b": "This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a find/findFirst:",
    "models-cache_e4b3c844d52b969d134289d33803be79": "To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:",
    "models-cache_49f732032f4ed83cde0f4665fd0fd0c5": "The first is create a custom builder, so we can generate a totally customized query:",
    "models-cache_272d7300204775890fec39f6cd0b2f4e": "Instead of directly returning a Phalcon\\\\Mvc\\\\Model\\\\Query, our custom builder returns a CustomQuery instance, this class looks like:",
    "models-cache_f1b035de1dc50b7dfd1086491b7ae3c8": "Parse the intermediate representation for the SELECT",
    "models-cache_ea774c2ceec533e35b2612b8ca97cc8f": "Check if the query has conditions",
    "models-cache_45aa40645c4c172881990fbb3fb9c2c3": "The fields in the conditions can have any order",
    "models-cache_84bd683466da005c46771e0f7857866a": "We need to recursively check the conditions tree",
    "models-cache_4b795271f09b698f34ca37f35a50c234": "to find the info we're looking for",
    "models-cache_ee145a2797f4511011485ecf69891e90": "Recursively visits the nodes",
    "models-cache_ad8dabad2ff8985fc4c2273aabaefe7a": "Select the cache according to the range",
    "models-cache_f161bcb6c3b55fd3a4badb79278d3c9e": "Check if the cache has data",
    "models-cache_d24ba4a062f845a259f6bd1397452bdd": "Execute the query",
    "models-cache_b5fdcd2ba8fb2872ce268fb85a100d41": "cache the result",
    "models-cache_581b25c6139a967f221c16f07b976187": "Implementing a helper (CustomNodeVisitor) that recursively checks the conditions looking for fields that tell us the possible range to be used in the cache:",
    "models-cache_054a0fc78f44ab0a1bb8c9c985de828b": "Finally, we can replace the find method in the Robots model to use the custom classes we've created:",
    "models-cache_ed63aed4efe90a846731cdb4b7dcf805": "Caching of PHQL planning",
    "models-cache_746ea0323975bebf6107bb63e8f3c362": "As well as most moderns database systems PHQL internally caches the execution plan, if the same statement is executed several times PHQL reuses the previously generated plan improving performance, for a developer to take better advantage of this is highly recommended build all your SQL statements passing variable parameters as bound parameters:",
    "models-cache_2a89882635811354d83208102969e432": "In the above example, ten plans were generated increasing the memory usage and processing in the application. Rewriting the code to take advantage of bound parameters reduces the processing by both ORM and database system:",
    "models-cache_d53e1af67acdb733459dec78b03de176": "Performance can be also improved reusing the PHQL query:",
    "models-cache_6c3362c2c834f5cd58f8d0aa52210e1c": "Execution plans for queries involving :1: are also cached by most database systems reducing the overall execution time, also protecting your application against :2:.",
    "models_34315da4fc43fd95809ef78d65f1b018": "Working with Models",
    "models_8f0e1f8b78c2a43f902d3f235a635750": "A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.",
    "models_fda8f2e4669b60c323af927eb41204c6": ":1: is the base for all models in a Phalcon application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services. :1: avoids the need of having to use SQL statements because it translates methods dynamically to the respective database engine operations.",
    "models_6fe6eff5591f581f3c7a8b8db8748e2d": "Creating Models",
    "models_d135e1d450a6ca13fa8c9bd4d3a24f1d": "A model is a class that extends from :1:. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:",
    "models_c6eeed8dc109d973af70ae10efb30dc7": "The above example shows the implementation of the \"Robots\" model. Note that the class Robots inherits from :1:. This component provides a great deal of functionality to models that inherit it, including basic database CRUD (Create, Read, Update, Delete) operations, data validation, as well as sophisticated search support and the ability to relate multiple models with each other.",
    "models_05e5dc99584f680738cd051b39df365b": "By default model \"Robots\" will refer to the table \"robots\". If you want to manually specify another name for the mapping table, you can use the getSource() method:",
    "models_8f3415d39ec51500d37f9ea2ea3dd208": "The model Robots now maps to \"the_robots\" table. In addition to the above method the 'initialize' method is available. This method aids in setting up the model with a custom behavior i.e. a different table:",
    "models_d9eddcbb0d3e0a61317e98124dcce918": "The initialize() method is only called once during the request, it's intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can 'onConstruct':",
    "models_1e97aa8d4dac7771bfc41fdd1894aef2": "Public properties vs. Setters/Getters",
    "models_8f39f4de8a4468ca1841f16ca911e887": "Models can be implemented with properties of public scope, meaning that each property can be read/updated from any part of the code that has instantiated that model class without any restrictions:",
    "models_4b84c28ff8c3a142e1ad871b64c58147": "By using getters and setters you can control which properties are visible publicly perform various transformations to the data (which would be impossible otherwise) and also add validation rules to the data stored in the object:",
    "models_9abd55be91e01075efab1307692d6146": "The name is too short?",
    "models_8d86bc9aa53ea8fff3895ce1b32f0d45": "Negative prices aren't allowed",
    "models_ffeb5a31ddd260dbc773168ae6f4513f": "Convert the value to double before be used",
    "models_9cf07cd93f23ce62d9699d5b32fbd557": "Public properties provide less complexity in development. However getters/setters can heavily increase the testability, extensibility and maintainability of applications. Developers can decide which strategy is more appropriate for the application they are creating. The ORM is compatible with both schemes of defining properties.",
    "models_edc8f4356afdd63c106c2e25e75e3a4a": "Models in Namespaces",
    "models_88ac463f7dbfa7bdbca9de455e37429b": "Namespaces can be used to avoid class name collision. The mapped table is taken from the class name, in this case 'Robots':",
    "models_0041176d3d251a7208621f2d87b1cb93": "Understanding Records To Objects",
    "models_d33935c04822b910b774c26ef3232937": "Every instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table \"robots\" with the records:",
    "models_a0af819e2255934cda03b3f923860f88": "You could find a certain record by its primary key and then print its name:",
    "models_f148d3c6d723babc42a5f764f131694c": "Find record with id = 3",
    "models_eb38e78fafe2c0c6b7f749968a4b9d97": "Prints \"Terminator\"",
    "models_5593dab00434cec6bd7ff9eb6a5e4fa8": "Once the record is in memory, you can make modifications to its data and then save changes:",
    "models_f96a615cf8822c8ecb1594128d824ad1": "As you can see, there is no need to use raw SQL statements. :1: provides high database abstraction for web applications.",
    "models_f1139dc3521d331b62f0df072477011a": "Finding Records",
    "models_a62df1bcce86e38056342166d562c27b": ":1: also offers several methods for querying records. The following examples will show you how to query one or more records from a model:",
    "models_1499c1af63a87b3cd78713aeabe53fc5": "How many robots are there?",
    "models_87078387b9e7d1df974b6134db85d304": "How many mechanical robots are there?",
    "models_8565a9d6967f26ce0d27ddb21a21ea4e": "Get and print virtual robots ordered by name",
    "models_815bac1c09b347d15b0d2a88e4b3cacd": "Get first 100 virtual robots ordered by name",
    "models_dca37eac806548a6c68a838011d99538": "You could also use the findFirst() method to get only the first record matching the given criteria:",
    "models_757b55639cb0428356f22a0f5233a1f4": "What's the first robot in robots table?",
    "models_fa26e0247c99764efc46dcd460d4ecdd": "What's the first mechanical robot in robots table?",
    "models_d3f491a4553e16e050d7435bc9820fba": "Get first virtual robot ordered by name",
    "models_1c335b086c81eff06a897a5fbfa8161e": "Both find() and findFirst() methods accept an associative array specifying the search criteria:",
    "models_2b5aacc034cc35eb04d354e3f362416d": "The available query options are:",
    "models_5d77a6c7de18b56c1eb8342c2e92d2d5": "If you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:",
    "models_eff92fa31585b7a86f16556298c5b9ba": "The static method query() returns a :1: object that is friendly with IDE autocompleters.",
    "models_5104248a4f23183095b6a1e1bd83e503": "All the queries are internally handled as :1: queries. PHQL is a high-level, object-oriented and SQL-like language. This language provide you more features to perform queries like joining other models, define groupings, add aggregations etc.",
    "models_be15026641c23ccd2162e2863a36cfa7": "Lastly, there is the findFirstBy<property-name>() method. This method expands on the \"findFirst()\" method mentioned earlier. It allows you to quickly perform a retrieval from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column. An example is in order, so taking our Robots model mentioned earlier :",
    "models_c645e4e62b0b20d0f4c8ddb621caafda": "We have three properties to work with here. $id, $name and $price. So, let's say you want to retrieve the first record in the table with the name 'Terminator'. This could be written like so :",
    "models_8958e99220592664d45664886ce5861e": "Notice that we used 'Name' in the method call and passed the variable $name to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.",
    "models_21a896556ad0bf6560957107ee309ba3": "Model Resultsets",
    "models_a89d6f4cf9795b5cd99ce6ebe01324b0": "While findFirst() returns directly an instance of the called class (when there is data to be returned), the find() method returns a :1:. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.",
    "models_5879a30ada37d9820f02d6bf881526b2": "These objects are more powerful than standard arrays. One of the greatest features of the :1: is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.",
    "models_7e08ae7d62fdc1b33551d43f9602812c": "Get all robots",
    "models_265d657995626c9d4f384ef11722eca8": "Traversing with a foreach",
    "models_d7da602c7908501e5ffe575acdf8f7e5": "Traversing with a while",
    "models_2c4f0d3e50ef2ca74fe3702595b073ba": "Count the resultset",
    "models_8374c526ffbe27df430472fd1f6b152d": "Alternative way to count the resultset",
    "models_03999b6dca3873a01a4b1bed75545c36": "Move the internal cursor to the third robot",
    "models_7bc4a21ddc2ad82cf1b38a888bf2b60f": "Access a robot by its position in the resultset",
    "models_61dce256ecb61e39d94f6fafab0735f2": "Check if there is a record in certain position",
    "models_f14d815df113ce11bee5066886764644": "Get the first record in the resultset",
    "models_9f3354bdfbb07b92c2feeaa0ea831464": "Get the last record",
    "models_a7eda3d33dae65bae1e3872506079451": "Phalcon's resultsets emulate scrollable cursors, you can get any row just by accessing its position, or seeking the internal pointer to a specific position. Note that some database systems don't support scrollable cursors, this forces to re-execute the query in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.",
    "models_889722c4fb3fe2f1e51e29ccbcc6fdd8": "Storing large query results in memory could consume many resources, because of this, resultsets are obtained from the database in chunks of 32 rows reducing the need for re-execute the request in several cases also saving memory.",
    "models_04994a739d95a892e21c0460202fc507": "Note that resultsets can be serialized and stored in a cache backend. :1: can help with that task. However, serializing data causes :2: to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.",
    "models_a5f8f286659fba574398fbf5fdcb780e": "Query all records from model parts",
    "models_ba104fa9c42d242e1a6af55bfe40e610": "Store the resultset into a file",
    "models_4510ece94d63d9839b50bf9fd8372bec": "Get parts from file",
    "models_a0cbb885ba6e3dc7c363a116760a7f17": "Traverse the parts",
    "models_8e1663749196053db8cdfcf3c68e1dc1": "Filtering Resultsets",
    "models_86e0576c863b930319c4291189b39a6a": "The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:",
    "models_7d19fb366e77789eb3890b49b6e2bad9": "Return only customers with a valid e-mail",
    "models_822e9e4f30d1487b43dff638b7288be9": "Binding Parameters",
    "models_a16930bc751cfe4911bc9b8184ca4fdc": "Bound parameters are also supported in :1:. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and integer placeholders are supported. Binding parameters can simply be achieved as follows:",
    "models_295356ede93fa03dad388a6197c2196b": "Query robots binding parameters with string placeholders",
    "models_f08282b4d4b0e7306d53eb5879c0f358": "Parameters whose keys are the same as placeholders",
    "models_26adb21e78d7ecdd3bb31de5537f0bc1": "Perform the query",
    "models_a1747fdc994f4f858ac8d08f10f8592b": "Query robots binding parameters with integer placeholders",
    "models_3c37368c296399eb7e88a056573aab64": "Query robots binding parameters with both string and integer placeholders",
    "models_b84a0dd9d5714b34df69484d2d568a9f": "When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case \"1\" or \"2\" are considered strings and not numbers, so the placeholder could not be successfully replaced.",
    "models_1cb6fccdb0e82654bd3c3c0a38be3797": "Strings are automatically escaped using PDO_. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.",
    "models_97a0dfe468ae9ccab829d71b5218b74d": "Additionally you can set the parameter \"bindTypes\", this allows defining how the parameters should be bound according to its data type:",
    "models_d94d15bdc1ff8b0f14b506e232f9a43e": "Bind parameters",
    "models_1d5061aa7100726f1c7aa8d9692a03c4": "Casting Types",
    "models_3b77c94021fad5966050602759289f10": "Bound parameters are available for all query methods such as find() and findFirst() but also the calculation methods like count(), sum(), average() etc.",
    "models_e3367d0cb8544964094a208970c13117": "Initializing/Preparing fetched records",
    "models_c78c4b381ccc68e2f068e656ecb1f40a": "May be the case that after obtaining a record from the database is necessary to initialise the data before being used by the rest of the application. You can implement the method 'afterFetch' in a model, this event will be executed just after create the instance and assign the data to it:",
    "models_680f042aa8c8e6a2c2c2871e00303b41": "Convert the array into a string",
    "models_1f219c33d76e9d0facb13cfd5fe8f691": "Convert the string to an array",
    "models_57ebcfcd3b49b156d81661da7aab7c33": "If you use getters/setters instead of/or together with public properties, you can initialize the field once it is accessed:",
    "models_0d9e9111f6bc1e0e1dc17a2561b5064f": "Relationships between Models",
    "models_4bc54330429e293995594ada1ed43cf9": "There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.",
    "models_4ea603f3ea62e73772697db5f1650fb8": "Unidirectional relationships",
    "models_107da6f7c5aa5bb8a906812d1d01e5a4": "Unidirectional relations are those that are generated in relation to one another but not vice versa.",
    "models_095247fb250888acc0b22d0143826fef": "Bidirectional relations",
    "models_5f0a1887228b0c923e22a57c7e338501": "The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.",
    "models_863202c90ac552ca019f552d58be5afd": "Defining relationships",
    "models_c7cb02eea3259c9b6054bb64ee43bff6": "In Phalcon, relationships must be defined in the initialize() method of a model. The methods belongsTo(), hasOne(), hasMany() and hasManyToMany() define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: local fields, referenced model, referenced fields.",
    "models_fe5294b94b279920eac0c40225f8ed4f": "The following schema shows 3 tables whose relations will serve us as an example regarding relationships:",
    "models_63f144f582941580c09c9b2538906f56": "Check the EER diagram to understand better the relations:",
    "models_2f75e58fb7e6bc12ae5bef57b20cc968": "The models with their relations could be implemented as follows:",
    "models_93833c12540f148aabe14953a12538e4": "The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.",
    "models_52f9d1599bbfcb7cc9ae67dafe8d7c5c": "Many to many relationships require 3 models and define the attributes involved in the relationship:",
    "models_2c2bc35a9e8125c1fe4646eb067470d3": "Taking advantage of relationships",
    "models_0ba5ccfa2677fd8a79b241b5c04e4412": "When explicitly defining the relationships between models, it is easy to find related records for a particular record.",
    "models_eaef5f5c0096ddca74ee216d9f6d5486": "Phalcon uses the magic methods __set/__get/__call to store or retrieve related data using relationships.",
    "models_4f0d578a33ba4d8a00c99107737b68a5": "By accessing an attribute with the same name as the relationship will retrieve all its related record(s).",
    "models_37634994dd76aceff8cc62e7660f001e": "all the related records in RobotsParts",
    "models_23ce3b5c26d63c47189e358eb6a0c062": "Also, you can use a magic getter:",
    "models_52cf0d0467fe9114e378ef9752ff0b3b": "passing parameters",
    "models_a91c13b9f41ef7d5c56349cf70da6736": "If the called method has a \"get\" prefix :1: will return a findFirst()/find() result. The following example compares retrieving related results with using magic methods and without:",
    "models_26a9f5f5d2a48a1772f7ec1683ec9af8": "Robots model has a 1-n (hasMany)",
    "models_e8edf474f27d462948b8b18e7efe17df": "relationship to RobotsParts then",
    "models_e8b7484473dbf1ac5ca48ed7c6589c4a": "Only parts that match conditions",
    "models_5cb44bdc8c5acee60dcbeb3a84e9074b": "Or using bound parameters",
    "models_60f3a49598ad9c89724ff31d05f76158": "RobotsParts model has a n-1 (belongsTo)",
    "models_7c5cfa3c28a89beb95ee67f2167a7e52": "Getting related records manually:",
    "models_322001a415014ca8eff038bc03561680": "relationship to RobotsParts, then",
    "models_7b6b7ee99bf2d2dc7a5f9a50fe0afa42": "The prefix \"get\" is used to find()/findFirst() related records. Depending on the type of relation it will use 'find' or 'findFirst':",
    "models_1cd1930780e738c9a6c7e46b9329ef22": "You can also use \"count\" prefix to return an integer denoting the count of the related records:",
    "models_54e332a56dc132b3e61043f709d4f3db": "Aliasing Relationships",
    "models_10f4a34f73f5d711081cd02fbea0d570": "To explain better how aliases work, let's check the following example:",
    "models_c1c8d588fd78b55da43042ea6e0e8c53": "Table \"robots_similar\" has the function to define what robots are similar to others:",
    "models_f18297cdcc691c5743187e61076b9dce": "Both \"robots_id\" and \"similar_robots_id\" have a relation to the model Robots:",
    "models_39a3c3172d2e4e1980c335914c3e6c94": "A model that maps this table and its relationships is the following:",
    "models_c271c8392737faa49a1be3302c2b8689": "Since both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:",
    "models_a4324525bbbe756f7c2058b85b8c4f17": "Returns the related record based on the column (robots_id)",
    "models_bb9996cf4ee81468968550efe88c2c7d": "Also as is a belongsTo it's only returning one record",
    "models_87a4e14fab9216e42cec72af533f2c34": "but the name 'getRobots' seems to imply that return more than one",
    "models_4586e0ef082b5df78af450b4d5824a94": "but, how to get the related record based on the column (similar_robots_id)",
    "models_f7ca57241c64cb4ec7f683044043b98b": "if both relationships have the same name?",
    "models_91c8cad15d031165dc93688f915cfc98": "The aliases allow us to rename both relationships to solve these problems:",
    "models_fb44b187803a7f753798591eae2e9c34": "With the aliasing we can get the related records easily:",
    "models_39856c93a5e5156f837d90a1fc59da3d": "Returns the related record based on the column (similar_robots_id)",
    "models_c0498d367be6f00cf53866b7a15650a9": "Magic Getters vs. Explicit methods",
    "models_61ea72907fef0cf5280b43a54ce12a13": "Most IDEs and editors with auto-completion capabilities can not infer the correct types when using magic getters, instead of use the magic getters you can optionally define those methods explicitly with the corresponding docblocks helping the IDE to produce a better auto-completion:",
    "models_b8ddd6c9fa9efe7f8b22d5ee64b4e038": "Virtual Foreign Keys",
    "models_ad089347bed015a469de37c65982646d": "By default, relationships do not act like database foreign keys, that is, if you try to insert/update a value without having a valid value in the referenced model, Phalcon will not produce a validation message. You can modify this behavior by adding a fourth parameter when defining a relationship.",
    "models_2807669f80c008114b3d11ad29bad56e": "The RobotsPart model can be changed to demonstrate this feature:",
    "models_c4769cdcd3b3ddfbef7d6179ed1815aa": "If you alter a belongsTo() relationship to act as foreign key, it will validate that the values inserted/updated on those fields have a valid value on the referenced model. Similarly, if a hasMany()/hasOne() is altered it will validate that the records cannot be deleted if that record is used on a referenced model.",
    "models_390f3980d9010ee42c5db1e409646b00": "Cascade/Restrict actions",
    "models_6d74d8a3eee3d85fb1e76211926aa2fb": "Relationships that act as virtual foreign keys by default restrict the creation/update/deletion of records to maintain the integrity of data:",
    "models_b52c5786f39bc338ec9a3f4758cb9cbf": "The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.",
    "models_c8243703df38120bbd35d539ca33d3a9": "Generating Calculations",
    "models_8f780a02e6339acff64e3f78b1e5fcf5": "Calculations (or aggregations) are helpers for commonly used functions of database systems such as COUNT, SUM, MAX, MIN or AVG. :1: allows to use these functions directly from the exposed methods.",
    "models_960fa28a7174efaf18899956c56050cf": "Count examples:",
    "models_8eff2fb5b476538a43fc570b4fcc9f84": "How many employees are?",
    "models_cc9f6c98548a5b9c1c3e9f912478c176": "How many different areas are assigned to employees?",
    "models_7401fc0cf3f05aa51ebaf6ff1677dc89": "How many employees are in the Testing area?",
    "models_e23af7315970cf6165ac1c9a2c28e5d3": "Count employees grouping results by their area",
    "models_9653a88cc1b5ebdcf5e2b9ba4a0d89b9": "Count employees grouping by their area and ordering the result by count",
    "models_b4df7af26d49273a9bba86f5f4e88793": "Avoid SQL injections using bound parameters",
    "models_4618d74d3fe8438c957047b340d64f9f": "Sum examples:",
    "models_e03121e9c09c30c2ce778a14db69b946": "How much are the salaries of all employees?",
    "models_8238beeb9435a210dcff925cdfe8a8ac": "How much are the salaries of all employees in the Sales area?",
    "models_4099511fa6c1d6d08506e81d986bf5b0": "Generate a grouping of the salaries of each area",
    "models_44d715b56c621684b25e81885815c045": "Generate a grouping of the salaries of each area ordering",
    "models_915ae8be0b495cfda0715d746b019424": "salaries from higher to lower",
    "models_a2b38ff9b1155040734f2bf3a05212c2": "Average examples:",
    "models_6be95309d8473a9a1029c83a2f8a7fea": "What is the average salary for all employees?",
    "models_0066aa381bcf5623295b342139748eee": "What is the average salary for the Sales's area employees?",
    "models_684946bc5648c219d794240b6b7dc740": "Max/Min examples:",
    "models_e8998c1c727a1702b25a3bd2217ebf84": "What is the oldest age of all employees?",
    "models_c1ffe08178ab27d8d93adcd8a1dc7c10": "What is the oldest of employees from the Sales area?",
    "models_2c63cde73a51a506e08d3eaa8ec2096c": "What is the lowest salary of all employees?",
    "models_da300e626c96660279800817373be665": "Hydration Modes",
    "models_6d7c6eb4758655c54dc6990ff7f19123": "As mentioned above, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database. These objects can be modified and saved again to persistence:",
    "models_ca5554acc480307928ad818e385d7549": "Manipulating a resultset of complete objects",
    "models_1eb6ffebaa894cc85477ab4658ef7574": "Sometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called 'hydration mode':",
    "models_0019ccf6219cda67bed6b40af0714e39": "Return every robot as an array",
    "models_658e3f6a02b314a0fe2ae851e9b85363": "Return every robot as an stdClass",
    "models_42c0b20a1762232fe05d204ce20a52d4": "Return every robot as a Robots instance",
    "models_cb3c4cbdce1e571a507dbbb9281a4af5": "Hydration mode can also be passed as a parameter of 'find':",
    "models_a7f6efdf628627cbfb0183f461cfcd29": "Creating Updating/Records",
    "models_62ded37b7cefd67930177b264d24a9a1": "The method Phalcon\\\\Mvc\\\\Model::save() allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of :1:. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.",
    "models_c7e343496bcfc784c6263a56f00b407d": "Also the method executes associated validators, virtual foreign keys and events that are defined in the model:",
    "models_e123024286ad4cb9eb2b5d92b25fd734": "An array could be passed to \"save\" to avoid assign every column manually. Phalcon\\\\Mvc\\\\Model will check if there are setters implemented for the columns passed in the array giving priority to them instead of assign directly the values of the attributes:",
    "models_76fcd45612dc70788c0ca6177fb231f7": "Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:",
    "models_45391c2973b138766ea846d6d7d85c61": "You can set an additional parameter in 'save' to set a whitelist of fields that only must taken into account when doing the mass assignment:",
    "models_7d4b758e7334c310d6b7a126d7eedbdc": "Create/Update with Confidence",
    "models_2e0f8969e5a5cf5d5c5674faf5409f74": "When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use Phalcon\\\\Mvc\\\\Model::save() to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the save() call with create() or update():",
    "models_c7fefc99b5694f422d636b5a64c270a6": "This record only must be created",
    "models_9afbc94d7c87924852bb6eaec4c24f2f": "These methods \"create\" and \"update\" also accept an array of values as parameter.",
    "models_47d10dbbf95de1e4e67a5f17a81c4370": "Auto-generated identity columns",
    "models_29c7ee3bdd564bd359523f21345ff7a8": "Some models may have identity columns. These columns usually are the primary key of the mapped table. :1: can recognize the identity column omitting it in the generated SQL INSERT, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:",
    "models_d55994b62e51e018089e422de3aea43e": "serial columns like in PostgreSQL or auto_increment columns in the case of MySQL.",
    "models_34e756014c1e42ff9eec737ec2e292e9": "PostgreSQL uses sequences to generate auto-numeric values, by default, Phalcon tries to obtain the generated value from the sequence \"table_field_seq\", for example: robots_id_seq, if that sequence has a different name, the method \"getSequenceName\" needs to be implemented:",
    "models_e0035a0f5ffbb4f6d432b4f70697cf78": "Storing related records",
    "models_501eac663748a2ce8ff81a0ca4077ee9": "Magic properties can be used to store a records and its related properties:",
    "models_87c4ab8d15fb6563d8be4dcbacfbb8ed": "Create an artist",
    "models_d4e71e6c320568f69f633bede4df9f5d": "Create an album",
    "models_5e64e7adb598b372ffc3d64a0a5ed89a": "Assign the artist",
    "models_aa0b953f6d350a5577ebc11cfed71a1e": "Save both records",
    "models_47f31897cd3d97d3789b57c50d7dc10e": "Saving a record and its related records in a has-many relation:",
    "models_2c79df378328e8dd2cd1d1b7bb1c7b07": "Get an existing artist",
    "models_2c7b195f3afca1886184d62caaa41191": "Create a first song",
    "models_5792f06dbb1bb6ded00d1b3ef541a484": "Create a second song",
    "models_2b4b34687271d7f155fb2dbaccf58ad3": "Assign the songs array",
    "models_c77858c47a2afaedb836fa45d116e489": "Save the album + its songs",
    "models_9482868dc98e03953151f38dd8c07038": "Saving the album and the artist at the same time implicitly makes use of a transaction so if anything goes wrong with saving the related records, the parent will not be saved either. Messages are passed back to the user for information regarding any errors.",
    "models_d939a1c7ef3aa44a932cfff1b2ee1110": "Note: Adding related entities by overloading the following methods is not possible:  - Phalcon\\Mvc\\Model::beforeSave()  - Phalcon\\Mvc\\Model::beforeCreate()  - Phalcon\\Mvc\\Model::beforeUpdate()",
    "models_14fef3e904b2f9aa6116cf7656675e02": "You need to overload Phalcon\\Mvc\\Model::save() for this to work from within a model.",
    "models_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "models_c1d232b39fe05b959dd845b2db801665": ":1: has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.",
    "models_7c9973d06444177ad84e1c25a39a6b63": "Each message consists of an instance of the class :1:. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:",
    "models_f958e80e660f56d42517de25c94720b1": "The method getMessages() can be overridden in a model to replace/translate the default messages generated automatically by the ORM:",
    "models_88dc8b91807ff4ba675e3c4d5fc6b7db": "Events and Events Manager",
    "models_490378dd5616a5b5dca102f7f4ba4b09": "Models allow you to implement events that will be thrown when performing an insert/update/delete. They help define business rules for a certain model. The following are the events supported by :1: and their order of execution:",
    "models_ffdc056a5ad04de3bf87e0e2bfb1cdb3": "Implementing Events in the Model's class",
    "models_4fba9529bed771a750169aea7fe11c01": "The easier way to make a model react to events is implement a method with the same name of the event in the model's class:",
    "models_3fa8d189cbd898ffa9232f5519462f06": "Events can be useful to assign values before performing an operation, for example:",
    "models_49f3de45257d0e5b7096556a30c385cb": "Set the creation date",
    "models_f74e28161b504a419d70d64f43d969de": "Set the modification date",
    "models_f11eaba96f0c61a573317f0a69292340": "Using a custom Events Manager",
    "models_1269794fb5e9ed3766ac39927a2fe7fa": "Additionally, this component is integrated with :1:, this means we can create listeners that run when an event is triggered.",
    "models_7b4ffbc5f44152ae745312315447e233": "Attach an anonymous function as a listener for \"model\" events",
    "models_c9534309ad139e07a87ea7518e861695": "Attach the events manager to the event",
    "models_bd80e1f4bd54bb03b2cc233f99866b2d": "In the example given above, EventsManager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when 'robots' are saved:",
    "models_9dba0dfb3be69611c21dd8738e27213f": "If we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager:",
    "models_8464ec16e7658d507e31c188e524c49d": "Registering the modelsManager service",
    "models_bc14603934930fe35354e4dcecb55c75": "Catch events produced by the Robots model",
    "models_c106c4e52bc599f6fe8708497906c4aa": "Setting a default EventsManager",
    "models_a99f116006a7e6f8e0beedf2fa1f7293": "If a listener returns false that will stop the operation that is executing currently.",
    "models_a2333fe1d4949c60e0ffa88a36ec8b24": "Implementing a Business Rule",
    "models_55a005b019c6e5cffa73b951673ab855": "When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.",
    "models_58acea561b884f8775c83234389a6c67": "We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.",
    "models_cca1ae2eb8ed215dc1a1202d65c9abf9": "The following example implements an event that validates the year cannot be smaller than 0 on update or insert:",
    "models_0d590ac8cf9976147c85986c173f0475": "Some events return false as an indication to stop the current operation. If an event doesn't return anything, :1: will assume a true value.",
    "models_53c9ef435efdc751976636021ca78ae8": "Validating Data Integrity",
    "models_8484829147088674434ff98d8df7f214": ":1: provides several events to validate data and implement business rules. The special \"validation\" event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.",
    "models_1cc9ab87bdb41eb59d0ed209160c60d8": "The following example shows how to use it:",
    "models_284e191d54feb148b504b19e86595cd5": "The above example performs a validation using the built-in validator \"InclusionIn\". It checks the value of the field \"type\" in a domain list. If the value is not included in the method then the validator will fail and return false. The following built-in validators are available:",
    "models_84bbc78bf253737de49fbc641775a65f": "In addition to the built-in validators, you can create your own validators:",
    "models_52bc5373d71ac2fdd32cbb2d8ab1facd": "Adding the validator to a model:",
    "models_21b521505501d7d235cf8c4486f015dc": "The idea of creating validators is make them reusable between several models. A validator can also be as simple as:",
    "models_a5b8ba4670620d3d0495cd4b993c2c36": "Avoiding SQL injections",
    "models_93b20b51cdce173a1a9d2feb2f37e64d": "Every value assigned to a model attribute is escaped depending of its data type. A developer doesn't need to escape manually each value before storing it on the database. Phalcon uses internally the :1: capability provided by PDO to automatically escape every value to be stored in the database.",
    "models_3cbc5493ec1d1fced277a1876a1d5bf6": "If we use just PDO to store a record in a secure way, we need to write the following code:",
    "models_e270c4873b9061d820db4505f1102e90": "The good news is that Phalcon do this for you automatically:",
    "models_e7d653d41a47b75951d0301d92fae13e": "Skipping Columns",
    "models_52905496ae0f50797717b9709adf5134": "To tell Phalcon\\\\Mvc\\\\Model that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:",
    "models_a6fafe677ab3a48d278aa87829b365c3": "Skips fields/columns on both INSERT/UPDATE operations",
    "models_9d5a1c3994f83675016b36e4b8718cb6": "Skips only when inserting",
    "models_fe8e2b615e1244280eeb6505979a1b3b": "Skips only when updating",
    "models_dff14ed91b9e1bfba3bbfd846b13c029": "This will ignore globally these fields on each INSERT/UPDATE operation on the whole application. Forcing a default value can be done in the following way:",
    "models_85946bc9767c0ac502ac9327d1eda99e": "A callback also can be used to create a conditional assignment of automatic default values:",
    "models_eeb5861768cb1d8e1b83f34166ba75e3": "Dynamic Update",
    "models_cae7b7f779c605b98263207fc0c50b74": "SQL UPDATE statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.",
    "models_de37cceeaaf2862d1cfebbc7e0214218": "In some cases this could improve the performance by reducing the traffic between the application and the database server, this specially helps when the table has blob/text fields:",
    "models_0dcecd441d09452dc45fa5fb8fdf84c9": "Deleting Records",
    "models_0e75de2f191dfee5ebf610adee2f593b": "The method Phalcon\\\\Mvc\\\\Model::delete() allows to delete a record. You can use it as follows:",
    "models_76bc4e0b0f94d49a3359b7b87d0e8082": "You can also delete many records by traversing a resultset with a foreach:",
    "models_1754d4c775f9d294061fd18347afd1a0": "The following events are available to define custom business rules that can be executed when a delete operation is performed:",
    "models_46fd4a379b90cb5f6446182c62871f6f": "With the above events can also define business rules in the models:",
    "models_9b8dadaae5e0186045cc25e173cc28e3": "Validation Failed Events",
    "models_1c5941aa841724d5c5c3b19995195e7b": "Another type of events are available when the data validation process finds any inconsistency:",
    "models_b9d973fddd00b0e7a636cdc2488b97c2": "Behaviors",
    "models_ba55633b90ce74fe56a1f26bc2caa70c": "Behaviors are shared conducts that several models may adopt in order to re-use code, the ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement Behaviors with more freedom.",
    "models_a4ae958a2c79dbebf8a92d103bddf65f": "A behavior must be added in the model initializer, a model can have zero or more behaviors:",
    "models_0eb0b021dd27e2aa85dba6af77dfbcf3": "The following built-in behaviors are provided by the framework:",
    "models_e7809539aa252eae6a52c0e6ae502cb6": "Timestampable",
    "models_bb8b7c604e76018faa85a3e26939e787": "This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:",
    "models_4a76abb3c06b31460f75d83a5e479f77": "Each event can have its own options, 'field' is the name of the column that must be updated, if 'format' is a string it will be used as format of the PHP's function date_, format can also be an anonymous function providing you the free to generate any kind timestamp:",
    "models_46ad3d1c14e7ffc25f0de5834a23d3fc": "If the option 'format' is omitted a timestamp using the PHP's function time_, will be used.",
    "models_af281cbd0128f9b889a08e8e6a23414d": "SoftDelete",
    "models_0141a60aa91a8b35e1b87ed208a7cf3e": "This behavior can be used in the following way:",
    "models_125217bbbd6bc34b9459e8b4a85c4085": "This behavior accepts two options: 'field' and 'value', 'field' determines what field must be updated and 'value' the value to be deleted. Let's pretend the table 'users' has the following data:",
    "models_41be3c2f9af2dde83473639a1bd8743e": "If we delete any of the two records the status will be updated instead of delete the record:",
    "models_ca12e23cdec236f897708b9d47dda460": "The operation will result in the following data in the table:",
    "models_6cdd8eeb2c674a7ca7d8f638e3908bf5": "Note that you need to specify the deleted condition in your queries to effectively ignore them as deleted records, this behavior doesn't support that.",
    "models_0387f5f8f86514fd76635c5b996298a7": "Creating your own behaviors",
    "models_e524ed516361608aad5f4a6b0b2a3b29": "The ORM provides an API to create your own behaviors. A behavior must be a class implementing the :1: Also, Phalon\\\\Mvc\\\\Model\\\\Behavior provides most of the methods needed to ease the implementation of behaviors.",
    "models_fbefc8402833e62596c10cc8fd57186b": "The following behavior is an example, it implements the Blamable behavior which helps identify the user that is performed operations over a model:",
    "models_8b6993d9acf4981ac8565639dd87f7ba": "... get the current user from session",
    "models_af04cd320ff5f0ea264a3121bc535e71": "Store in a log the username - event type and primary key",
    "models_019293c46f20180b538e4829b6b2bc3f": "The former is a very simple behavior, but it illustrates how to create a behavior, now let's add this behavior to a model:",
    "models_e0cf9ab962c4202ec86581e7ab5d8a50": "A behavior is also capable of intercept missing methods on your models:",
    "models_3127822a2aeb877c75788660804e7791": "if the method is 'getSlug' convert the title",
    "models_0e6c82a5255904cf8a06e50df659fee6": "Call that method on a model that implements Sluggable returns a SEO friendly title:",
    "models_86902028f578be3733203f273cf005f9": "Using Traits as behaviors",
    "models_15225e9a2356f6a977351d29714d8c55": "Starting from PHP 5.4 you can use :1: to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:",
    "models_a2114c4340289628297fd7fe404775e0": "Then you can use it in your model as follows:",
    "models_70f40070204552b5f24220685f1af1d5": "Transactions",
    "models_523caad38dca5a70a0f0df8adfa5392b": "When a process performs multiple database operations, it is often that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data are committed to the database.",
    "models_e3bf59100a4c3abaa191650a6f5136e7": "Transactions in Phalcon allow you to commit all operations if they have been executed successfully or rollback all operations if something went wrong.",
    "models_088212b633bc7551876ebcd09049afd5": "Manual Transactions",
    "models_1baaab4adfb83d440c5b42201356136b": "If an application only uses one connection and the transactions aren't very complex, a transaction can be created by just moving the current connection to transaction mode, doing a rollback or commit if the operation is successfully or not:",
    "models_40fbff140ccf45a6aebbd09ef8b19fdf": "Implicit Transactions",
    "models_4a388701aafbd80f2477b8eeef2d0e8b": "Existing relationships can be used to store records and their related instances, this kind of operation implicitly creates a transaction to ensure that data are correctly stored:",
    "models_d6eb181c63ee8d0d3e27606f53733df5": "Creates an implicit transaction to store both records",
    "models_b343a6effee4b8a33a6d3cd345196c36": "Isolated Transactions",
    "models_cde7e7a38238e1e4337277766e8d4882": "Isolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back/committed before ending the request:",
    "models_6b0527dc3798bd2c93b12c0a6fcc6bf1": "Create a transaction manager",
    "models_8730d34bec19e8e359d185f197e47aae": "Request a transaction",
    "models_6d85bdbbb75057a7a08583e805395628": "Everything goes fine, let's commit the transaction",
    "models_684fdc9b8b05dee0da51a3d679f5a2f2": "Transactions can be used to delete many records in a consistent way:",
    "models_9c6ea68e7c35029ab8340fc9f2ba420a": "Get the robots will be deleted",
    "models_a58a68df43013bf991dfe4e4b223fe63": "Something goes wrong, we should to rollback the transaction",
    "models_8d689b69315df96ae544989ca3c68823": "Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a commit() or rollback() is performed. You can use the service container to create the global transaction manager for the entire application:",
    "models_e9fa44065ffbf68c6b093ede30a4e5fe": "Then access it from a controller or view:",
    "models_6ecfae4116e66dc373c485de06019744": "Obtain the TransactionsManager from the services container",
    "models_3a2d5fe857d8f9541136a124c2edec6c": "Or",
    "models_fa2202eae95bafde3a1d0f80d04c9ea0": "While a transaction is active, the transaction manager will always return the same transaction across the application.",
    "models_b06efa6d21e5b000c6aa2d0359cf548b": "Independent Column Mapping",
    "models_42bf3fa32fab55ab4a3ff67d1d6c7c68": "The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:",
    "models_f3d1188d844ee3313ca095f96e2687af": "Keys are the real names in the table and",
    "models_25fd88df9256c457036b8c6ccf511e95": "the values their names in the application",
    "models_c64de284c082a2c913bd581410a8a31a": "Then you can use the new names naturally in your code:",
    "models_2986e6244ae5248fc2da3f6c053ab4d0": "Find a robot by its name",
    "models_c529a0ae3d36266db59f3c829f010f00": "Get robots ordered by type",
    "models_c57e823383479b57ac39125241d808e8": "Create a robot",
    "models_528e38143ba42116d5e4ec6c8c4ffb01": "Take into consideration the following the next when renaming your columns:",
    "models_ebec44960fff78ac93d2711bbf9be107": "References to attributes in relationships/validators must use the new names",
    "models_1c117cfa86f5dc3ca6740ae0b83bb8a7": "Refer the real column names will result in an exception by the ORM",
    "models_e5d5ce5eb3b45441404d550fba11b91b": "The independent column map allow you to:",
    "models_6a02475faa59cb9ca2d7b826ce4d7072": "Write applications using your own conventions",
    "models_839936ca7f6acc614527c615e5f09301": "Eliminate vendor prefixes/suffixes in your code",
    "models_3145ffe53d17ac7db75c7928cfcc82ca": "Change column names without change your application code",
    "models_4fec5c7316082223510a448180b8dad4": "Operations over Resultsets",
    "models_1c044d7aaef440ba786bdc767bda9fd9": "If a resultset is composed of complete objects, the resultset is in the ability to perform operations on the records obtained in a simple manner:",
    "models_b77e6d4bf8411c1cc8b034cc2a02b89a": "Updating related records",
    "models_5f5266b4beb59809046580a6b9a8d954": "Instead of doing this:",
    "models_6b440a04add8ea312c29b3e07271d4d2": "you can do this:",
    "models_fb5daf83af9643f8a08851dd5131850b": "Update all the parts except these whose type is basic",
    "models_3a148cb8c3ab4930a041c5abd3aa9bdb": "Deleting related records",
    "models_0fb2d18df6dcf886494ce6de22d3c615": "Delete only whose stock is greater or equal than zero",
    "models_68ad0c2d8a1b1d369991023ff57d29b7": "Record Snapshots",
    "models_f88a41ead0b918d0234e87adadb8f2b8": "Specific models could be set to maintain a record snapshot when they’re queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:",
    "models_d954f57ca241e469f69763172c6a9b69": "When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:",
    "models_af2ad94f6e64ec2420750c0b76ea5722": "Get a record from the database",
    "models_b0b01a0fefa818b1edb5bdc9770155fb": "Change a column",
    "models_4da47e07f5294b3af192e37566ca5503": "['name']",
    "models_b326b5062b2f0e69046810717534cb09": "true",
    "models_68934a3e9455fa72420237eb05902327": "false",
    "models_70374a9ca8493aae79270629e397bd00": "Models Meta-Data",
    "models_10a44ce65ee88b722fe348261f6527f9": "To speed up development :1: helps you to query fields and constraints from tables related to models. To achieve this, :2: is available to manage and cache table meta-data.",
    "models_a8a4fb9cdb3c450c510e3f24ce4f4253": "Sometimes it is necessary to get those attributes when working with models. You can get a meta-data instance as follows:",
    "models_923c421713a432036e3b787f7b957ac9": "Get Phalcon\\Mvc\\Model\\Metadata instance",
    "models_4880d88d5c6ff8820e22835d592966f7": "Get robots fields names",
    "models_7a76d480d3cafc2a67a1c4fa13b01789": "Get robots fields data types",
    "models_bfd71f3927f6c86526558f97925a5e8f": "Caching Meta-Data",
    "models_1440dbcf5f811b0cef85d8a3c4ee376a": "Once the application is in a production stage, it is not necessary to query the meta-data of the table from the database system each time you use the table. This could be done caching the meta-data using any of the following adapters:",
    "models_b6b0ff2517693e49750e1f7b648d0ba6": "As other ORM's dependencies, the metadata manager is requested from the services container:",
    "models_48c4ce1c4709155ccb67e65d2ee625ce": "Create a meta-data manager with APC",
    "models_55ca78ce00d3f2722f71be1173f6b3ce": "Meta-Data Strategies",
    "models_f8d1077a4feeb4ed05c90c606db3dc50": "As mentioned above the default strategy to obtain the model's meta-data is database introspection. In this strategy, the information schema is used to know the fields in a table, its primary key, nullable fields, data types, etc.",
    "models_b0c27aa05dcb7d1c9b7811f112ad76d8": "You can change the default meta-data introspection in the following way:",
    "models_a6e8f466f78ee591bd17ab565a03cc24": "Instantiate a meta-data adapter",
    "models_435b2b97d8852f4de4435b0662f1e971": "Set a custom meta-data introspection strategy",
    "models_fb54cb01fbccd42cd7a3b5b4b29c760f": "Database Introspection Strategy",
    "models_9d03c973b5fc84b79884ffb6e8dabef1": "This strategy doesn't require any customization and is implicitly used by all the meta-data adapters.",
    "models_ea3cffb13799871aefa54facf52160c4": "Annotations Strategy",
    "models_554bbb7c9e96dfc5bddb7298f9d0f42f": "This strategy makes use of :1: to describe the columns in a model:",
    "models_2b2322672392dd3dea9fff06ede98691": "Annotations must be placed in properties that are mapped to columns in the mapped source. Properties without the @Column annotation are handled as simple class attributes.",
    "models_15b215324dfe32956e0c8e2aa256e0d9": "The following annotations are supported:",
    "models_18288132ec8f3aca3a23d0d6d61a616a": "The annotation @Column supports the following parameters:",
    "models_3fd9c7c7f0beb190f4f9394614ba70de": "The annotations strategy could be set up this way:",
    "models_6e1f5392a679a2a0f5f1116c0e86d1c6": "Set a custom meta-data database introspection",
    "models_e2245e0ad6ce4309e33f9319c2be6b9c": "Manual Meta-Data",
    "models_67cc3bdd8608baa67d5af54d1cb344e4": "Phalcon can obtain the metadata for each model automatically without the developer must set them manually using any of the introspection strategies presented above.",
    "models_16d0fb50c035c6c0bda4e4df25a95edc": "The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the  meta-data manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.",
    "models_cd5f7a9c3139a9a56bd0033b779d4cd7": "The following example shows how to define the meta-data manually:",
    "models_28dab1e1d1767233c25463a992f0b1d4": "Every column in the mapped table",
    "models_b5da62993c5209ad418f4de5e4a4df68": "Every column part of the primary key",
    "models_5d59fb8f300a540fca45964ed2531bfc": "Every column that isn't part of the primary key",
    "models_255fc2b28f319aea951b90720fe0995d": "Every column that doesn't allows null values",
    "models_4cd43e829c57883c03ee4d3d15d568f7": "Every column and their data types",
    "models_998be7a72bbf5c744723eab09c9847d1": "The columns that have numeric data types",
    "models_5f935649f26859885cb22260217a68a5": "The identity column, use boolean false if the model doesn't have",
    "models_4777c5d4a477e02489dde31350734ba2": "an identity column",
    "models_f211e4d989807e64d736aa0c4a7a08f4": "How every column must be bound/casted",
    "models_d7f10e08f74aa352297ef297211a4775": "Fields that must be ignored from INSERT SQL statements",
    "models_5afce0b8bb54ca0aff5f871b7cf30342": "Fields that must be ignored from UPDATE SQL statements",
    "models_56d911cac7c77478592e074bfe9e0460": "Pointing to a different schema",
    "models_13738e1aa3deb47d73c26d2c1d47b25b": "If a model is mapped to a table that is in a different schemas/databases than the default. You can use the getSchema method to define that:",
    "models_78d81576bf0a8efea929a760098c2829": "Setting multiple databases",
    "models_f762fdcf65979470be761b730b35105a": "In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when :1: needs to connect to the database it requests the \"db\" service in the application's services container. You can overwrite this service setting it in the initialize method:",
    "models_719b0dc2e967ab897b04083c1a8a28a6": "This service returns a MySQL database",
    "models_a796f07dab600aaacedc16a2bc376c77": "This service returns a PostgreSQL database",
    "models_aae5be7f170ab14ae4df454c73a9fc63": "Then, in the Initialize method, we define the connection service for the model:",
    "models_b5ca7287e02d9aa96e5539d8c935b459": "But Phalcon offers you more flexibility, you can define the connection that must be used to 'read' and for 'write'. This is specially useful to balance the load to your databases implementing a master-slave architecture:",
    "models_d15589e70e20a93dc6fcba29c1570a2c": "The ORM also provides Horizontal Sharding facilities, by allowing you to implement a 'shard' selection according to the current query conditions:",
    "models_a6f9cb1ddd0720ae9f587d9b54ea9893": "Check if there is a 'where' clause in the select",
    "models_3d0deca9ed049c11d36dc2c657e59e57": "Choose the possible shard according to the conditions",
    "models_d7b311d89d5329dc2b956e8084f7e704": "Use a default shard",
    "models_6d5fa925b83f6aa8e7a9f922539e963e": "The method 'selectReadConnection' is called to choose the right connection, this method intercepts any new query executed:",
    "models_97bf04884de98c0f2516aba8c1820c0a": "Logging Low-Level SQL Statements",
    "models_b2e5d8f0af6d33cc287434310bacbfd3": "When using high-level abstraction components such as :1: to access a database, it is difficult to understand which statements are finally sent to the database system. :1: is supported internally by :3:. :4: interacts with :3:, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.",
    "models_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "models_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "models_c98b4e61c4cf65ed96146755ecde763b": "As models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:",
    "models_0088d92ba0746f6ca32168e18b0acd69": "As above, the file *app/logs/db.log* will contain something like this:",
    "models_f7dc7675831e283edd54b6e7e3501a7e": "Profiling SQL Statements",
    "models_8897cc2c3e448f5e8a8702db423ee722": "Thanks to :1:, the underlying component of :2:, it's possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.",
    "models_ddf27bc91efad33c6b4ffec992cb261b": "Get a shared instance of the DbProfiler",
    "models_41c61785167c1dcf8f87ed63af11cddc": "Profiling some queries:",
    "models_7a89bc08139ccf8e34cdd183e25474ee": "Send some SQL statements to the database",
    "models_f0d818119815d52445837e3e63169003": "Get the generated profiles from the profiler",
    "models_6c6b6fc7cddd80dc56fd5605ee79726d": "Each generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.",
    "models_bf20ac68334be437956a656824fc4005": "Injecting services into Models",
    "models_4b0148a30c76d202c67e8fd1fd0e8642": "You may be required to access the application services within a model, the following example explains how to do that:",
    "models_208f521f101d584f8d276e843032b6c2": "Obtain the flash service from the DI container",
    "models_b15e59a4e29ae0f51c934d824558da35": "Show validation messages",
    "models_f651a3f30dbfb9e7186a28cc284e8ce5": "The \"notSave\" event is triggered every time that a \"create\" or \"update\" action fails. So we're flashing the validation messages obtaining the \"flash\" service from the DI container. By doing this, we don't have to print messages after each save.",
    "models_6b15f5193c9dc33fd43d3c2de2f7a3fe": "Disabling/Enabling Features",
    "models_e90dafd6a6d737e3f11771c9e2615633": "In the ORM we have implemented a mechanism that allow you to enable/disable specific features or options globally on the fly. According to how you use the ORM you can disable that you aren't using. These options can also be temporarily disabled if required:",
    "models_4a145c294a5e052cf51f7f37bac8dcc7": "The available options are:",
    "models_d3e54f7c04408d6d1a884897bca4169e": "Stand-Alone component",
    "models_4066bb86ebbf825c613167cf60cdd5bf": "Using :1: in a stand-alone mode can be demonstrated below:",
    "motivation_2cf7c3b0f6f192ab0ca9a6c5e3f6be54": "Our motivation",
    "motivation_31aa4f0f4306fd7924f89b407792a90c": "There are many PHP frameworks nowadays, but none of them is like Phalcon (Really, trust us on this one).",
    "motivation_f7e0a4b2b71788f6b30215f0ac8f861a": "Almost all programmers prefer to use a framework. This is primarily because it provides a lot of functionality that is already tested and ready to use, therefore keeping code DRY (Don't Repeat Yourself). However, the framework itself demands a lot of file inclusions and hundreds of lines of code to be interpreted and executed on each request from the actual application. Object-Oriented frameworks also add a lot of overhead to execution making complex application slow. All these operations slows the application down and subsequently impacts the end user experience.",
    "motivation_6363257aaa03bef325c3de40b385f535": "The Question",
    "motivation_66a38207d3e6995d23d285160259e14e": "Why can't we have a robust framework with all of its advantages but with none or very few disadvantages?",
    "motivation_0c3ed55f2ca0d223f619d59be08cfb12": "This is why Phalcon was born!",
    "motivation_755ad80bdc55e333c6ada6bdeaca1d25": "During the last few months, we have extensively researched PHP's behavior, investigating areas for significant optimizations (big or small). Through this understanding, we managed to remove unnecessary validations, compacted code, performed optimizations and generated low-level solutions so as to achieve maximum performance from Phalcon.",
    "motivation_ec9f8029927c311867f863442dd5cddb": "The use of frameworks has become mandatory in professional development with PHP",
    "motivation_51c6be0d829dbe8e16245b7d8fe51029": "Frameworks offer a structured philosophy to easily maintain projects writing less code and making work more fun",
    "motivation_785c234918e08fa44c46d7507c346968": "We love PHP and we think it can be used to create larger and more ambitious projects",
    "motivation_4d438f231d6424ee70922e09c2df9724": "Why?",
    "motivation_281dd40d538d9a0d69d18250125da2ac": "PHP has dynamic and weak variable types. Every time a binary operation is made (ex. 2 + \"2\"), PHP checks the operand types to perform potential conversions",
    "motivation_1621bc2b370ee9b4c2eb017934f459ec": "PHP is interpreted and not compiled. The major disadvantage is performance loss",
    "motivation_4b5b2f25e7abe5bd415b4506f4716271": "Every time a script is requested it must be first interpreted",
    "motivation_4eb83634b85a2df37fcd67833a0bed44": "If a bytecode cache (like APC) isn't used, syntax checking is performed every time for every file in the request",
    "motivation_0a5bf8b427d2ab7bd54e898c9bf7f01d": "Inner workings of PHP?",
    "motivation_fa999ad7dcad3ea05b05dd0bbcec2d22": "Many files with classes and functions are read on every request made. Disk reading is expensive in terms of performance, especially when the file structure includes deep folders",
    "motivation_7b7b0ec06f715cbbff4a1e599eb69946": "Modern frameworks use lazy loading (autoload) to increase performance (for load and execute only the code needed)",
    "motivation_3ca03139b43db73601e2856b31c5ea6d": "Some of these classes contain methods that aren't used in every request but they're loaded always consuming memory",
    "motivation_a48079ebc1484434264adb90bcbf45e9": "Continuous loading or interpreting is expensive and impacts performance",
    "motivation_aff62a4c18e94d1a36493191f33b9346": "The framework code does not change very often, and yet an application needs to load and interpret it every time a request is made",
    "motivation_aac322c48602e8d313a212b30222a680": "How do traditional PHP frameworks work?",
    "motivation_9c32bd2e0e451c8e01afdebde87c1223": "C extensions are loaded together with PHP one time on the web server's daemon start process",
    "motivation_6bef0bb7dd70602ab6bbb0089a06153e": "Classes and functions provided by the extension are ready to use for any application",
    "motivation_42c50a137ca5f27c27ef33965ecc9e61": "The code isn't interpreted because is already compiled to a specific platform and processor",
    "motivation_79a660da7ec1997a23748a330d479e3a": "How does a PHP C-extension work?",
    "motivation_69989fa33647fed4fe59ef5791389fa8": "Components are loosely coupled. With Phalcon, nothing is imposed on you: you're free to use the full framework, or just some parts of it as a glue components.",
    "motivation_0a6b4f1c9ffe1a3a73e2f0690e7e4d60": "Low-level optimizations provides the lowest overhead for MVC-based applications",
    "motivation_0156cf3e7b980048120e481275d2198b": "Interact with databases with maximum performance by using a C-language ORM for PHP",
    "motivation_e495469727ebbcb06f01d3e31fd5dbd9": "Phalcon directly accesses internal PHP structures optimizing execution in that way as well",
    "motivation_0e6f1eda7c3cf86b124eb0e9e1650229": "How does Phalcon work?",
    "motivation_1ae79d4ac325ff0f13fc776875753ce8": "Why do I need Phalcon?",
    "motivation_22ecb0f80aa084024995252186d8f8aa": "Each application requirements and tasks are different than another's. Some for instance are designed to do a set of tasks and generate content that rarely changes. These applications can be created with any programming language or framework. Using a front-end cache usually makes such an application, no matter how poorly designed or slow it might be, perform very fast.",
    "motivation_dfefc40824bf8a32ed3b45bc2c406852": "Other applications generate content almost immediately that changes from request to request. In this case, PHP is used to address all requests and generate the content. These applications can be APIs, discussion forums with high traffic loads, blogs with a high number of comments and contributors, statistic applications, admin dashboards, enterprise resource planners (ERP), business-intelligence software dealing with real time data and more.",
    "motivation_56a14b97b95cb74da861ebd6f81d6d46": "An application will be as slow as its slowest component/process. Phalcon offers a very fast yet feature rich framework that allows developers to concentrate on making their applications/code faster. Following proper coding processes, Phalcon can deliver a lot more functionality/requests with less memory consumption and processing cycles.",
    "mvc_fb51bf6fae14a2ebff47eac849ee61c5": "The MVC Architecture",
    "mvc_d8571cb594a03fd7c6de0f33dcc56318": "Phalcon offers the object-oriented classes, necessary to implement the Model, View, Controller architecture (often referred to as MVC_) in your application. This design pattern is widely used by other web frameworks and desktop applications.",
    "mvc_ab4eaca614bb9a4a5b676917c9924aeb": "MVC benefits include:",
    "mvc_763188904d3da3b65e8daa7b30ccd710": "Isolation of business logic from the user interface and the database layer",
    "mvc_1a753292925dd5471f423520fcb43aa0": "Making it clear where different types of code belong for easier maintenance",
    "mvc_8762dff10e7e0030292723f2be7af463": "If you decide to use MVC, every request to your application resources will be managed by the :1: architecture. Phalcon classes are written in C language, offering a high performance approach of this pattern in a PHP based application.",
    "mvc_927b1c3f8d9b894ec7be4c9139fd1501": "Models",
    "mvc_740eecca4eaf8027cc318a76084871fd": "A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models. :1:",
    "mvc_6dd3305031fd2571d16b707ed91ccb13": "Views",
    "mvc_83184bfa7c999fa67c2deb6a6fd29869": "Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. :1:",
    "mvc_50f1458a9054f560cf1f8a37014e7aa6": "Controllers",
    "mvc_6dd7586e22b50745e01d428f140fc9b6": "The controllers provide the \"flow\" between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. :1:",
    "namespaces_410df5ec08cfd7e81928a0f39812fa26": "Working with Namespaces",
    "namespaces_42fcdb4e0d8452859da49e9a5808053e": ":1: can be used to avoid class name collisions; this means that if you have two controllers in an application with the same name, a namespace can be used to differentiate them. Namespaces are also useful for creating bundles or modules.",
    "namespaces_5034b5fe11096b4eeb1043135044bc64": "Setting up the framework",
    "namespaces_6d2109c5d5dd2e689723029517e3f6f8": "Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:",
    "namespaces_7675ee208c8bd2dc92bde0fa3f1b5d1f": "Use an autoload strategy that takes into account the namespaces, for example with Phalcon\\\\Loader:",
    "namespaces_6e2541a84721a5f09ef6f57df2158147": "Specify it in the routes as a separate parameter in the route's paths:",
    "namespaces_25a51770d16d8b9a04ca828a7e814611": "Passing it as part of the route:",
    "namespaces_b4e0ae25071fd246a818cd472f38d085": "If you are only working with the same namespace for every controller in your application, then you can define a default namespace in the Dispatcher, by doing this, you don't need to specify a full class name in the router path:",
    "namespaces_d3477be4fcfb5b2e53eb426e85a84ad1": "Registering a dispatcher",
    "namespaces_2b7e1df011b57331144cfd6ed3f998cb": "Controllers in Namespaces",
    "namespaces_80fa39b535ea176e88e04c27287bce90": "The following example shows how to implement a controller that use namespaces:",
    "namespaces_edc8f4356afdd63c106c2e25e75e3a4a": "Models in Namespaces",
    "namespaces_f5ea85eb2efe77db362c5d04e5f5f118": "Take the following into consideration when using models in namespaces:",
    "namespaces_f272cbbd53cdcd2e714c5918e8c811ce": "If models have relationships they must include the namespace too:",
    "namespaces_1047b252842d7d62176454c6c8b8f677": "In PHQL you must write the statements including namespaces:",
    "nginx_6bb6d356501587cdcc495f1a8fa2073f": "Nginx Installation Notes",
    "nginx_703537526a0c2eb0802d1c8091f2648b": ":1: is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. Unlike traditional servers, :1: doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.",
    "nginx_3a6a1339cfce179e86b462fdf346efd0": "The :1: (FastCGI Process Manager) is usually used to allow :4: to process PHP files. Nowadays, :1: is bundled with any Unix PHP distribution. Phalcon + :4: + :1: provides a powerful set of tools that offer maximum performance for your PHP applications.",
    "nginx_78202a14fc06eb13905c98df74daefea": "Configuring Nginx for Phalcon",
    "nginx_7f7917062f284058784dc2cb1844fe2f": "The following are potential configurations you can use to setup nginx with Phalcon:",
    "nginx_839322a0f1a181663d7634673806c4a0": "Basic configuration",
    "nginx_ca4e50852f253e0259dec38dbbeb7cf9": "Using $_GET['_url'] as source of URIs:",
    "nginx_a93f8ef6b3921aa42339f436605c377d": "Using $_SERVER['REQUEST_URI'] as source of URIs:",
    "nginx_b166a645493a42ae90176ee6541a9025": "Dedicated Instance",
    "nginx_680e3dd6ca9727cba90ee64c7d7840ba": "Configuration by Host",
    "nginx_79faffba7d0ce9018b84c3ba2cfec9ca": "And this second configuration allow you to have different configurations by host:",
    "odm_48cb4cd9833b519dd8ca15aa818b67a3": "ODM (Object-Document Mapper)",
    "odm_5cd77d38a46eb510f58924bb82a2a03b": "In addition to its ability to :1: in relational databases, Phalcon can map documents from NoSQL databases. The ODM offers a CRUD functionality, events, validations among other services.",
    "odm_2643e1e9a609735194337259764e21a5": "Due to the absence of SQL queries and planners, NoSQL databases can see real improvements in performance using the Phalcon approach. Additionally, there are no SQL building reducing the possibility of SQL injections.",
    "odm_3d5d84c358d390d9d3d3e0fb17408a3a": "The following NoSQL databases are supported:",
    "odm_6fe6eff5591f581f3c7a8b8db8748e2d": "Creating Models",
    "odm_f27c3435f5c49bb60b13469960aad742": "A model is a class that extends from :1:. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:",
    "odm_711543eda4f95a18fd009d91e6579757": "By default model \"Robots\" will refer to the collection \"robots\". If you want to manually specify another name for the mapping collection, you can use the getSource() method:",
    "odm_c0d736e3c6dc4ae7feeaca79f5a3119c": "Understanding Documents To Objects",
    "odm_cef9c90442496b28c2daa4792f41dffe": "Every instance of a model represents a document in the collection. You can easily access collection data by reading object properties. For example, for a collection \"robots\" with the documents:",
    "odm_edc8f4356afdd63c106c2e25e75e3a4a": "Models in Namespaces",
    "odm_9438dc6649ff6249a00b13fcc1e94764": "Namespaces can be used to avoid class name collision. In this case it is necessary to indicate the name of the related collection using getSource:",
    "odm_a5e5e27596c85370e46e013c6edb33cd": "You could find a certain document by its id and then print its name:",
    "odm_a8dde2fd8d68b987095ea611515887ae": "Find record with _id = \"5087358f2d42b8c3d15ec4e2\"",
    "odm_b7bf91428c8ca18fb00a45b797a06be6": "Prints \"Bender\"",
    "odm_5593dab00434cec6bd7ff9eb6a5e4fa8": "Once the record is in memory, you can make modifications to its data and then save changes:",
    "odm_c2ebf821b71d105eb45a15fb41e418a2": "Setting a Connection",
    "odm_d4babb87a5be4b7ee76640eab4290f07": "Connections are retrieved from the services container. By default, Phalcon tries to find the connection in a service called \"mongo\":",
    "odm_8f607121278f2c25aae4f33cdcdb34b1": "Simple database connection to localhost",
    "odm_fb044871c011d2b2fd2a8988073dbb20": "Connecting to a domain socket, falling back to localhost connection",
    "odm_c395e1e396d378f13260b962ebc4d212": "Finding Documents",
    "odm_2b8c5d301342701b5cd4ff179ae6e9fd": "As :1: relies on the Mongo PHP extension you have the same facilities to query documents and convert them transparently to model instances:",
    "odm_1499c1af63a87b3cd78713aeabe53fc5": "How many robots are there?",
    "odm_87078387b9e7d1df974b6134db85d304": "How many mechanical robots are there?",
    "odm_374f2d32d70da2192748c10713fd747c": "Get and print mechanical robots ordered by name upward",
    "odm_cdd7f2c6e82f62f45ef918ef6fbd7c85": "Get first 100 mechanical robots ordered by name",
    "odm_dca37eac806548a6c68a838011d99538": "You could also use the findFirst() method to get only the first record matching the given criteria:",
    "odm_2ccf3ab58d817b1f80e6e0471dc7c44b": "What's the first robot in robots collection?",
    "odm_ce2141ebed99ef973b51d2858b4cc2fb": "What's the first mechanical robot in robots collection?",
    "odm_1c335b086c81eff06a897a5fbfa8161e": "Both find() and findFirst() methods accept an associative array specifying the search criteria:",
    "odm_f6e55c84bc61550224f8718ddb8901aa": "First robot where type = \"mechanical\" and year = \"1999\"",
    "odm_3478af64cc93c0cbb71db7996450e769": "All virtual robots ordered by name downward",
    "odm_2b5aacc034cc35eb04d354e3f362416d": "The available query options are:",
    "odm_22afe60a1f96737ce439e64ec9eb6978": "If you have experience with SQL databases, you may want to check the :1:.",
    "odm_0c496866e3b7ef5ccb7d7b86d29300ac": "Aggregations",
    "odm_3caf9d464b54373a7674873bd5475df2": "A model can return calculations using :1: provided by Mongo. The aggregated values are calculate without having to use MapReduce. With this option is easy perform tasks such as totaling or averaging field values:",
    "odm_a7f6efdf628627cbfb0183f461cfcd29": "Creating Updating/Records",
    "odm_3b001039ec2a5a2213110c9fac9e57a5": "The method Phalcon\\\\Mvc\\\\Collection::save() allows you to create/update documents according to whether they already exist in the collection associated with a model. The 'save' method is called internally by the create and update methods of :1:.",
    "odm_3985ac741064a84b198fbfb559b38e0a": "Also the method executes associated validators and events that are defined in the model:",
    "odm_e27841ee99e14fc6519e0db9d17c2333": "The \"_id\" property is automatically updated with the :1: object created by the driver:",
    "odm_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "odm_6f54fffd794d508feef234f7f943ce91": ":1: has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.",
    "odm_7c9973d06444177ad84e1c25a39a6b63": "Each message consists of an instance of the class :1:. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:",
    "odm_291df405bc7e94cd5137b3f35777fe55": "Validation Events and Events Manager",
    "odm_b82342dd6696ebd5e04869ea5399cf89": "Models allow you to implement events that will be thrown when performing an insert or update. They help define business rules for a certain model. The following are the events supported by :1: and their order of execution:",
    "odm_8634db265f5cadee561f9981abadd4a3": "To make a model to react to an event, we must to implement a method with the same name of the event:",
    "odm_3fa8d189cbd898ffa9232f5519462f06": "Events can be useful to assign values before performing an operation, for example:",
    "odm_49f3de45257d0e5b7096556a30c385cb": "Set the creation date",
    "odm_f74e28161b504a419d70d64f43d969de": "Set the modification date",
    "odm_2556c223454d29db0e8dd8f903b797bf": "Additionally, this component is integrated with :1:, this means we can create listeners that run when an event is triggered.",
    "odm_7b4ffbc5f44152ae745312315447e233": "Attach an anonymous function as a listener for \"model\" events",
    "odm_f9081cbced23976e340a4dd7d1c9137a": "In the example given above the EventsManager only acted as a bridge between an object and a listener (the anonymous function). If we want all objects created in our application use the same EventsManager, then we need to assign this to the Models Manager:",
    "odm_32c6165efcca9e50e36b5db22a9cf784": "Registering the collectionManager service",
    "odm_c106c4e52bc599f6fe8708497906c4aa": "Setting a default EventsManager",
    "odm_a2333fe1d4949c60e0ffa88a36ec8b24": "Implementing a Business Rule",
    "odm_55a005b019c6e5cffa73b951673ab855": "When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.",
    "odm_58acea561b884f8775c83234389a6c67": "We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.",
    "odm_cca1ae2eb8ed215dc1a1202d65c9abf9": "The following example implements an event that validates the year cannot be smaller than 0 on update or insert:",
    "odm_ea5b9392a3d91ff90e9edf5c28e6b3b9": "Some events return false as an indication to stop the current operation. If an event doesn't return anything, :1: will assume a true value.",
    "odm_53c9ef435efdc751976636021ca78ae8": "Validating Data Integrity",
    "odm_c3dc434cabb06d604424dcc15b04874e": ":1: provides several events to validate data and implement business rules. The special \"validation\" event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.",
    "odm_1cc9ab87bdb41eb59d0ed209160c60d8": "The following example shows how to use it:",
    "odm_6fc5673ab45b31b06590374c8a04678a": "The example given above performs a validation using the built-in validator \"InclusionIn\". It checks the value of the field \"type\" in a domain list. If the value is not included in the method, then the validator will fail and return false. The following built-in validators are available:",
    "odm_84bbc78bf253737de49fbc641775a65f": "In addition to the built-in validators, you can create your own validators:",
    "odm_52bc5373d71ac2fdd32cbb2d8ab1facd": "Adding the validator to a model:",
    "odm_54b18d3c6c9a0bde772d9da50d583189": "The idea of creating validators is make them reusable across several models. A validator can also be as simple as:",
    "odm_0dcecd441d09452dc45fa5fb8fdf84c9": "Deleting Records",
    "odm_40af205b9a04743ad351275a69f4b65a": "The method Phalcon\\\\Mvc\\\\Collection::delete() allows to delete a document. You can use it as follows:",
    "odm_99549cf17570de7a53de04a9b45de1bc": "You can also delete many documents by traversing a resultset with a foreach:",
    "odm_1754d4c775f9d294061fd18347afd1a0": "The following events are available to define custom business rules that can be executed when a delete operation is performed:",
    "odm_9b8dadaae5e0186045cc25e173cc28e3": "Validation Failed Events",
    "odm_e5566c1a40baf6c9892dc4174579074f": "Another type of events is available when the data validation process finds any inconsistency:",
    "odm_8198f64c5bcb74146e7192fa3f9a5a40": "Implicit Ids vs. User Primary Keys",
    "odm_bc3fa5701dfa4336c5777693f4cfb7c6": "By default Phalcon\\\\Mvc\\\\Collection assumes that the _id attribute is automatically generated using MongoIds_. If a model uses custom primary keys this behavior can be overridden:",
    "odm_78d81576bf0a8efea929a760098c2829": "Setting multiple databases",
    "odm_ca96fd64131e176aed89c1b30c2e062e": "In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when :1: needs to connect to the database it requests the \"mongo\" service in the application's services container. You can overwrite this service setting it in the initialize method:",
    "odm_30cd4ac5551309dc7c0bc54a17b89201": "This service returns a mongo database at 192.168.1.100",
    "odm_d196fbb3e7afe012a3c3eae42ad22c26": "This service returns a mongo database at localhost",
    "odm_aae5be7f170ab14ae4df454c73a9fc63": "Then, in the Initialize method, we define the connection service for the model:",
    "odm_bf20ac68334be437956a656824fc4005": "Injecting services into Models",
    "odm_4b0148a30c76d202c67e8fd1fd0e8642": "You may be required to access the application services within a model, the following example explains how to do that:",
    "odm_208f521f101d584f8d276e843032b6c2": "Obtain the flash service from the DI container",
    "odm_b15e59a4e29ae0f51c934d824558da35": "Show validation messages",
    "odm_7b6fb7c569102e80d110f55f0042fe72": "The \"notSave\" event is triggered whenever a \"creating\" or \"updating\" action fails. We're flashing the validation messages obtaining the \"flash\" service from the DI container. By doing this, we don't have to print messages after each saving.",
    "pagination_60deaacce0f1f3cc4e94b46e35691696": "Pagination",
    "pagination_799fb5780c1b0529974833d16211798b": "The process of pagination takes place when we need to present big groups of arbitrary data gradually. Phalcon\\\\Paginator offers a fast and convenient way to split these sets of data browsable pages.",
    "pagination_23053199ed34e8dc893947624d563fe4": "Data Adapters",
    "pagination_0a355558f3d14bbc0f7654611acd11fa": "This component makes use of adapters to encapsulate different sources of data:",
    "pagination_3482ed7db8c97c78ab45723816e21818": "Examples",
    "pagination_7c4638677d770640bb9b67cfd532d297": "In the example below, the paginator will use as its source data the result of a query from a model, and limit the displayed data to 10 records per page:",
    "pagination_f95c5f9340bd0ebb39c000195d0f6c12": "Current page to show",
    "pagination_8df2863da0e367967d74af7b1638136c": "In a controller this can be:",
    "pagination_7528035a93ee69cedb1dbddb2f0bfcc8": "GET",
    "pagination_a02439ec229d8be0e74b0c1602392310": "POST",
    "pagination_4ddbeca7bae6f55c7a824cfee8681109": "The data set to paginate",
    "pagination_baa3cc342b3b7c5519509d895fff0a0d": "Create a Model paginator, show 10 rows by page starting from $currentPage",
    "pagination_2b3eb2def0da7d6ee05b4fe4b867fa17": "Get the paginated results",
    "pagination_0dda7a9eb9896cd0d29e6cdc6aa5cf41": "Variable $currentPage controls the page to be displayed. The $paginator->getPaginate() returns a $page object that contains the paginated data. It can be used for generating the pagination:",
    "pagination_2307615c1ae9cb8d43842f1d27a74209": "The $page object also contains navigation data:",
    "pagination_7adb3af83be2dd478bded6e721c5ede7": "Adapters Usage",
    "pagination_0454adfc71c34584645b430c7f2774e8": "An example of the source data that must be used for each adapter:",
    "pagination_ff06a5dcaeaa18f9a45a230208187d78": "Passing a resultset as data",
    "pagination_33b04729090d87478135ac4d33177b70": "Passing an array as data",
    "pagination_8bafd6c18ec1d78c3a1cfef140d8d3ae": "Passing a querybuilder as data",
    "pagination_52875227488d1bdeb8d30f3af376835d": "Page Attributes",
    "pagination_69242c86723cb0a67eade45edb11be0e": "The $page object has the following attributes:",
    "pagination_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "pagination_58dd2b6eef040fd62a0a551a1baa3039": "The :1: interface must be implemented in order to create your own paginator adapters or extend the existing ones:",
    "phql_5386430706e3d70dcd6721cfffc4e04d": "Phalcon Query Language (PHQL)",
    "phql_b876fbd21078f3f503088a28152f5c24": "Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.",
    "phql_770e44dedceb2f0e5f5b89dbad1cae91": "To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as SQLite_. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.",
    "phql_7befb3258cfb156f4f2a5ad9fad387a6": "The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.",
    "phql_a7c2ad8614a5f3c85370ac420ac4f2de": "In PHQL, we've implemented a set of features to make your access to databases more secure:",
    "phql_c99643ab0e3888897db70e8b2476b80e": "Bound parameters are part of the PHQL language helping you to secure your code",
    "phql_46d54e8fadbdace19fb90b882bc1b473": "PHQL only allows one SQL statement to be executed per call preventing injections",
    "phql_73cc168ca64d92ccf976aa588a36b792": "PHQL ignores all SQL comments which are often used in SQL injections",
    "phql_11404c2131f16a9c23ed9a8bbe64b395": "PHQL only allows data manipulation statements, avoiding altering or dropping tables/databases by mistake or externally without authorization",
    "phql_4020e687fabadfb9960f68a5980d05e0": "PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes",
    "phql_b2923a136099a523e93b60cda2e7677e": "Usage Example",
    "phql_d22afdc2a2ef5fa71cb68ec9cee108e3": "To better explain how PHQL works consider the following example. We have two models “Cars” and “Brands”:",
    "phql_a1b67fe5a612a433c7b35828bbc11a19": "And every Car has a Brand, so a Brand has many Cars:",
    "phql_99e03f118557b526d8879d653323d7e0": "Creating PHQL Queries",
    "phql_fbd53b85ed0193a035d9a2e10e612704": "PHQL queries can be created just by instantiating the class :1::",
    "phql_96b97a7069cbf855c8b71352e096c536": "Instantiate the Query",
    "phql_3ddf5c225412a7acb145b96766a5d0b7": "Execute the query returning a result if any",
    "phql_0080a39b5259541169eff46ea9c5ea5c": "From a controller or a view, it's easy to create/execute them using an injected :1::",
    "phql_5ce486f3c35ba7079a88a64cafcc6a29": "Executing a simple query",
    "phql_ec4a20140e92c98c7367b42fb86fcf5d": "With bound parameters",
    "phql_eb08feb94389f4e5366ba4264095493f": "Or simply execute it:",
    "phql_1a92af3c6a25bedc035a9bd3d94cafc2": "Executing with bound parameters",
    "phql_0afa7a4c7c005ec76d601567c48161aa": "Selecting Records",
    "phql_e893a9b9e54a8e1c795bb12607cc5d30": "As the familiar SQL, PHQL allows querying of records using the SELECT statement we know, except that instead of specifying tables, we use the models classes:",
    "phql_0c20a135c062e555fe12e8c814499f4b": "Classes in namespaces are also allowed:",
    "phql_ffc487d3932c4ba21aba660d1dd667d3": "Most of the SQL standard is supported by PHQL, even nonstandard directives as LIMIT:",
    "phql_916cd70dd9c9093314fa736afb3fa271": "Result Types",
    "phql_bc4220d30d228afa326f33c7a14e364b": "Depending on the type of columns we query, the result type will vary. If you retrieve a single whole object, then the object returned is a :1:. This kind of resultset is a set of complete model objects:",
    "phql_218768eb16a53531d34ee07eb961bf54": "This is exactly the same as:",
    "phql_f4ae99b03590be12389bbabf4251f7eb": "Complete objects can be modified and re-saved in the database because they represent a complete record of the associated table. There are other types of queries that do not return complete objects, for example:",
    "phql_f5d0f1eb448afd6d210e17c26cb318a1": "We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resulset of type :1:. However, each element is a standard object that only contain the two columns that were requested.",
    "phql_78dcbe0c98269dba3f1d5ed10a082def": "These values that don't represent complete objects we call them scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:",
    "phql_94f09089ff33f445caba711f4f2097fc": "As we can query complete objects or scalars, we can also query both at once:",
    "phql_dbdab4ba0af00fb264476765639c133f": "The result in this case is an object :1:. This allows access to both complete objects and scalars at once:",
    "phql_c0989395fd723b460ecba688406c428f": "Scalars are mapped as properties of each \"row\", while complete objects are mapped as properties with the name of its related model.",
    "phql_949a9ea10ee823acc28ef307f9bca73c": "Joins",
    "phql_f8d1d2d3bb81b845d9ea4aa7975d2fa3": "It's easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:",
    "phql_c1a585f858c40fc2f0d6b434f6a02bf4": "By default, an INNER JOIN is assumed. You can specify the type of JOIN in the query:",
    "phql_e3447c732565d148d43c0879a9e4dee4": "Also is possible set manually the conditions of the JOIN:",
    "phql_3bf6a4bfa18e0de13229380cef912515": "Also, the joins can be created using multiple tables in the FROM clause:",
    "phql_9a4aaaeb812b9935609f9041f47b04df": "If an alias is used to rename the models in the query, those will be used to name the attributes in the every row of the result:",
    "phql_2e5cafc991790cd62cbd6dfcaed033a4": "When the joined model has a many-to-many relation to the 'from' model, the intermediate model is implicitly added to the generated query:",
    "phql_17534ddfe740a0ccb36157f6d52484c1": "This code produces the following SQL in MySQL:",
    "phql_0c496866e3b7ef5ccb7d7b86d29300ac": "Aggregations",
    "phql_46101d69c165924fce0b932d0b0548ba": "The following examples show how to use aggregations in PHQL:",
    "phql_da101dffc8bf2fe5d404bc86a3d5a3c8": "How much are the prices of all the cars?",
    "phql_79449ef9cedde3a7d5cfb29d813baf4d": "How many cars are by each brand?",
    "phql_4c177f8dae8049f5081efe9068def226": "Count distinct used brands",
    "phql_ec9a533445b22960d8dee63554092547": "Conditions",
    "phql_d3190497c5ffa0d31b5787a970b17b92": "Conditions allow us to filter the set of records we want to query. The WHERE clause allows to do that:",
    "phql_fa566cbb733c476d210a11ffb47e71f6": "Simple conditions",
    "phql_081927ac33f9f150d6cba295931352d2": "Also, as part of PHQL, prepared parameters automatically escape the input data, introducing more security:",
    "phql_d70f9732a93804895552d4041ad92122": "Inserting Data",
    "phql_a7834c88201ad71e5c5127802aad3100": "With PHQL it's possible to insert data using the familiar INSERT statement:",
    "phql_339142904822f30efbe178bc1b91f24c": "Inserting without columns",
    "phql_1e867d775737fee641d19fdde4f6b32f": "Specifying columns to insert",
    "phql_e78dba49a628db072a3b6d3899d71510": "Inserting using placeholders",
    "phql_ae74d4ec26f07635bb94fe0da8e72228": "Phalcon not just only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. Let's add a business rule on the model cars. A car cannot cost less than $ 10,000:",
    "phql_a8d62b862354f089a65b6cbe59b30486": "If we made the following INSERT in the models Cars, the operation will not be successful because the price does not meet the business rule that we implemented:",
    "phql_7e95ceac582a15ef3f27c690a4862c5a": "Updating Data",
    "phql_596650f1fbee737a2e58cffc3309beb2": "Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.",
    "phql_cb7cdc9ff650fd9ee33c32456a68aa30": "Updating a single column",
    "phql_2f2b6de24506145eebe079fdc7de25ce": "Updating multiples columns",
    "phql_729b62ead26f158b5b215693a4fbe495": "Updating multiples rows",
    "phql_a4249c82cce91f8052a47c301a8b9d78": "Using placeholders",
    "phql_0979c3765dec192eaa96d839b8f054d7": "An UPDATE statement performs the update in two phases:",
    "phql_030bd3a5553ac5013d1dcaf54323e23f": "First, if the UPDATE has a WHERE clause it retrieves all the objects that match these criteria,",
    "phql_41a22f40f6b4936bd2b05c488954f049": "Second, based on the queried objects it updates/changes the requested attributes storing them to the relational database",
    "phql_69ef98663df382b084d84d6fd923f0dd": "This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:",
    "phql_b4a5b5bc261949098989806892c8d360": "is somewhat equivalent to:",
    "phql_12f49100cf21592b1bed0daa5b42bcd9": "Deleting Data",
    "phql_d901c3161bdaf00898323fc337f3bc75": "When a record is deleted the events related to the delete operation will be executed for each row:",
    "phql_d3745656787965ae2c701756124845b8": "Deleting a single row",
    "phql_6a51fd768ce8d80ccf5b2c080e22f694": "Deleting multiple rows",
    "phql_ce996524e4b2ec0b5dfd262e78b54e70": "DELETE operations are also executed in two phases like UPDATEs.",
    "phql_c45f0d6895e27b7d482aae69f4248daa": "Creating queries using the Query Builder",
    "phql_9ec79915f86b984af84bfed7258f981f": "A builder is available to create PHQL queries without the need to write PHQL statements, also providing IDE facilities:",
    "phql_ec957aedb592e4673349ba1d2eb417a8": "Getting a whole set",
    "phql_9a25ed76d4f7a3538d2d4b0cecf4e538": "Getting the first row",
    "phql_5622680411b3dd3c93fe1bb97610f387": "That is the same as:",
    "phql_d2d5790eccbd79c211951e7466073c59": "More examples of the builder:",
    "phql_1f784a870292bdaabbe7fc60b31ed9fd": "Bound Parameters",
    "phql_e390c52bab27bb0f6db5df479386930e": "Bound parameters in the query builder can be set as the query is constructed or past all at once when executing:",
    "phql_01f8500886a672440ad7fc7034ebdb11": "Passing parameters in the query construction",
    "phql_d7706a31e381b4c891339311dfba09bf": "Passing parameters in query execution",
    "phql_a134584ccac2fddfcf5b203f45920a47": "Disallow literals in PHQL",
    "phql_95562861ff6ac47d167e77c98715380c": "Literals can be disabled in PHQL, this means that directly using strings, numbers and boolean values in PHQL strings will be disallowed. If PHQL statements are created embedding external data on them, this could open the application to potential SQL injections:",
    "phql_773e416c79c434f2c5f22029dc850d62": "If $login is changed to ' OR '' = ', the produced PHQL is:",
    "phql_f06b05c12d90f04b3a5b708f0054c863": "Which is always true no matter what the login stored in the database is.",
    "phql_d74e9e775e3f0555e8d4801bdc57cba1": "If literals are disallowed strings can be used as part of a PHQL statement, thus an exception will be thrown forcing the developer to use bound parameters. The same query can be written in a secure way like this:",
    "phql_fa72ca62b13daccc542cb8fa8c2ac158": "You can disallow literals in the following way:",
    "phql_40a67d40a5341adea99c58b52c7b3cd0": "Bound parameters can be used even if literals are allowed or not. Disallowing them is just another security decision a developer could take in web applications.",
    "phql_10a77d4c1d136c3f869772725d0dd66f": "Escaping Reserved Words",
    "phql_82759b93009043bc9741c004abc098cb": "PHQL has a few reserved words, if you want to use any of them as attributes or models names, you need to escape those words using the cross-database escaping delimiters '[' and ']':",
    "phql_80b58ea91a646d68e6caf9009bceec79": "The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.",
    "phql_c69f6d0581529e1032622e5cbdfe36d4": "PHQL Lifecycle",
    "phql_861e30126232847422608f9c138961de": "Being a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:",
    "phql_ef3e24987078ebff7f462877847823ec": "The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system",
    "phql_e43721a9801312d362816e7039e4455e": "The IR is converted to valid SQL according to the database system associated to the model",
    "phql_dcd66346494733efa89f19314da80e61": "PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution",
    "phql_49c62a60348782860b0968b26fbc1d74": "Using Raw SQL",
    "phql_5cac6cfb9413d2ca60be37b78373e5ef": "A database system could offer specific SQL extensions that aren't supported by PHQL, in this case, a raw SQL can be appropriate:",
    "phql_526648eefa48ae4fc46e912e0ba3b02a": "A raw SQL statement",
    "phql_bcd0bbc0f07716044bbe40aa8894896e": "Base model",
    "phql_d24ba4a062f845a259f6bd1397452bdd": "Execute the query",
    "phql_2a6e6ccb82a04bd0b277a8af40196603": "If Raw SQL queries are common in your application a generic method could be added to your model:",
    "phql_e7641f4f450d4d75e3cdcf49a66b1143": "The above findByRawSql could be used as follows:",
    "phql_f07747c719e154f6ba1384e010ddc59e": "Troubleshooting",
    "phql_acfbc5f424a4b0cc8fbc9c7662993076": "Some things to keep in mind when using PHQL:",
    "phql_f3ac81ad5b263e1751119c762ae96024": "Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux.",
    "phql_38e4bbc7f6baf279ed76b7411805153a": "Correct charset must be defined in the connection to bind parameters with success",
    "phql_1dd8b481d687801bac5391715fd7d92a": "Aliased classes aren't replaced by full namespaced classes since this only occurs in PHP code and not inside strings",
    "phql_11d61b7dfcefe77621d61aec7d754cca": "If column renaming is enabled avoid using column aliases with the same name as columns to be renamed, this may confuse the query resolver",
    "queue_6332f1db13668447736410ecc6fbfa07": "Queueing",
    "queue_4effefab7e75769f5442bf260b5babd8": "Perform activities like process a video, resize images or send emails aren't suitable to be executed online or in real time because it may slow the loading time of pages, impacting the user experience.",
    "queue_505fd6da56ac07ad21003663bf14dc05": "The best solution here is implementing background jobs. A web application must put the job into a queue and wait that it will be processed.",
    "queue_b344a7c6d42394ffa5dcbd6360c9fe46": "While you can find more sophisticated PHP extensions to address queueing in your applications like RabbitMQ_; Phalcon provides a client for Beanstalk_, a job queueing backend inspired by Memcache_. It’s simple, lightweight, and completely specialized on job queueing.",
    "queue_d861a4bdd04064beee0ad4280b891a07": "Putting Jobs into the Queue",
    "queue_4f0f692e09e17e4965af1c96ee80c35e": "After connecting to Bens can insert as many jobs as required. The developer can define the message structure according to the needs of the application:",
    "queue_2a3800c31fb6ed307886a661769c5729": "Connect to the queue",
    "queue_b2d990e5adc30102881181c0c68bda78": "Insert the job in the queue",
    "queue_7dfd67b804f06fd719dc552d4dc87303": "Available connection options are:",
    "queue_97c986c9576036cdfaf9caa988b20129": "In the above example we stored a message which will allow a background job to process a video. The message is stored in the queue immediately and does not have a certain time to life.",
    "queue_50037fc1e92a52022435c16bd4fa4115": "Additional options as time to run, priority and delay could be passed as second parameter:",
    "queue_e1f0588bcc119cfc8b55c2b58722f953": "Insert the job in the queue with options",
    "queue_adefa153f60c1a9713e386ee3ef52b3a": "The following options are available:",
    "queue_792805419afcd14aa9b9ade1c8b637ae": "Every job put into the queue returns a \"job id\" the developer can use to track the status of the job:",
    "queue_d005fd4b7ced2a8f6064edcbd43f7614": "Retrieving Messages",
    "queue_6194507a7a197e897f39cdf27349775a": "Once a job is placed into the queue, those messages can be consumed by a background job which have enough time to complete the task:",
    "queue_fa84d1fa18924ca5203ffeccd04eaafd": "Jobs must be removed from the queue to avoid double processing. If multiple background jobs workers are implemented, jobs must be \"reserved\" so other workers don't re-process them while other workers have them reserved:",
    "queue_8259d74e2240c8655ba5a57864dc70ea": "Our client implement a basic set of the features provided by Beanstalkd but enough to allow you to build applications implementing queues.",
    "request_a50294fe0538101f2bfedce1815453aa": "Request Environment",
    "request_2f435d803fad403c05876324d0a7b6ec": "Every HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc. A web based application needs to parse that information so as to provide the correct response back to the requester. :1: encapsulates the information of the request, allowing you to access it in an object-oriented way.",
    "request_19eb4b9c4e266a3822f3d8083911f599": "Getting a request instance",
    "request_c9e98245beed95fd652a2682b771cd56": "Check whether the request was made with method POST",
    "request_4e019698bb9685f8beb2a830672970e7": "Check whether the request was made with Ajax",
    "request_899ae8c8c6f297e6f17a0e342ee1c8d7": "Getting Values",
    "request_37e9f6d7a2193eea17a3a32a85db4be8": "PHP automatically fills the superglobal arrays $_GET and $_POST depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to :1: or :2: attacks.",
    "request_d461eeca6203f16ba181388e0ea3b83f": ":1: allows you to access the values stored in the $_REQUEST, $_GET and $_POST arrays and sanitize or filter them with the 'filter' service, (by default :2:). The following examples offer the same behavior:",
    "request_4afe48265ac499e0f703be47c118db15": "Manually applying the filter",
    "request_fa7737760531508cb38f1218b2781e3e": "Manually applying the filter to the value",
    "request_9025fdaefa38abc33dc58eaef7aa7136": "Automatically applying the filter",
    "request_b1cd4d7a0c707635d3398a4e5d43928f": "Setting a default value if the param is null",
    "request_8d04f54895c220dcfbb08e37558197af": "Setting a default value if the param is null without filtering",
    "request_1f06d150904fb2ba123010b2372d8c20": "Accessing the Request from Controllers",
    "request_cc550a9c713528ac1964917901bd9c8d": "The most common place to access the request environment is in an action of a controller. To access the :1: object from a controller you will need to use the $this->request public property of the controller:",
    "request_eeef46c52d2f8fda1b6593681b414c9f": "Check if request has made with POST",
    "request_7bc4b7c3a07971acba3c23c3ae0de905": "Access POST data",
    "request_07281573ecd855c65543d67cc8843963": "Uploading Files",
    "request_b8e048181f6b8dd735e39dc704871d5f": "Another common task is file uploading. :1: offers an object-oriented way to achieve this task:",
    "request_22c08743ae48bdf32897571caee40414": "Check if the user has uploaded files",
    "request_ec560cec4db2cb9ab9f57c78dcf221d7": "Print the real file names and sizes",
    "request_84ef21579fd9fb268ff0067e2b735725": "Print file details",
    "request_27ad6dac0ad15d19643a05ed6f81e5b7": "Move the file into the application",
    "request_e4e08fd578ce1f71a6312ddda25b1e8f": "Each object returned by Phalcon\\\\Http\\\\Request::getUploadedFiles() is an instance of the :1: class. Using the $_FILES superglobal array offers the same behavior. :1: encapsulates only the information related to each file uploaded with the request.",
    "request_58c353e11cfea9c1d6ef0400e69c35a4": "Working with Headers",
    "request_37f5d0719b1f0054959ab5fc7b6ea44a": "As mentioned above, request headers contain useful information that allow us to send the proper response back to the user. The following examples show usages of that information:",
    "response_96018889300caae7d7d05f83cd8e858c": "Returning Responses",
    "response_4aa13d66c64755d60950cd5c4cd6f2eb": "Part of the HTTP cycle is returning responses to clients. :1: is the Phalcon component designed to achieve this task. HTTP responses are usually composed by headers and body. The following is an example of basic usage:",
    "response_1fbb6c758e419fa3efbf4d3a0c956c99": "Getting a response instance",
    "response_914758add4c694d28dadec4dd7c6ef5f": "Set status code",
    "response_9c076963f5e3331719a1f8db1d2af585": "Set the content of the response",
    "response_aa1a37369701ddc784751431397df792": "Send response to the client",
    "response_6a4ab19f81223959f4ee8a1f7d9e0906": "If you are using the full MVC stack there is no need to create responses manually. However, if you need to return a response directly from a controller's action follow this example:",
    "response_cdba798da6f0e1b6eb9297e81fbe6ed8": ".. load here the feed",
    "response_0511ba07cfb3ddd1a0fced413a2fe537": "Return the response",
    "response_58c353e11cfea9c1d6ef0400e69c35a4": "Working with Headers",
    "response_06f96555b3a97dae4120c22caa515138": "Headers are an important part of the HTTP response. It contains useful information about the response state like the HTTP status, type of response and much more.",
    "response_040c328569c535b4a7a8542911d38a67": "You can set headers in the following way:",
    "response_c98f280c75ec46f7936f592d213cba50": "Setting a header by it's name",
    "response_d226b4fe440905826f7b70a11486e790": "Setting a raw header",
    "response_41a2b129cf88a20c4428a7fa3027d461": "A :1: bag internally manages headers. This class retrieves the headers before sending it to client:",
    "response_2ffbc7f9f7c644be708651dbbd5fac18": "Get the headers bag",
    "response_55586855a40b549141ac56733ae91a42": "Get a header by its name",
    "response_85ebb8b1fe35876ecb488660ec541ddb": "Making Redirections",
    "response_0e05cb1ea142cac273618b77cc428e5b": "With :1: you can also execute HTTP redirections:",
    "response_27650a5399862211ca8aa3c4e344f388": "Redirect to the default URI",
    "response_cef659bc53ea809b5b8b70d7fa9d82a4": "Redirect to the local base URI",
    "response_8e030e877e3f99149b0a994107b881b5": "Redirect to an external URL",
    "response_88eeb693f326e0e11441130f002200ab": "Redirect specifyng the HTTP status code",
    "response_c4d63c5ab656959797d68ed59d14fd18": "All internal URIs are generated using the 'url' service (by default :1:). This example demonstrates how you can redirect using a route you have defined in your application:",
    "response_6e1daebce48ccd4d93872c8322e9c909": "Redirect based on a named route",
    "response_1c0880121fbd5fbb3ec25161f3f89ee2": "Note that a redirection doesn't disable the view component, so if there is a view associated with the current action it will be executed anyway. You can disable the view from a controller by executing $this->view->disable();",
    "response_c39d99e2c813a3297d5010729c65001d": "HTTP Cache",
    "response_dde8dc5a1c8921320d8383726bdf80cc": "One of the easiest ways to improve the performance in your applications and reduce the server traffic is using HTTP Cache. Most modern browsers support HTTP caching. HTTP Cache is one of the reasons many websites are currently fast.",
    "response_a1b56a2d3c1bf4146eff9541966fb92d": "HTTP Cache can be altered in the following header values sent by the application when serving a page for the first time:",
    "response_9b0654c16db64ed8a4c5cabfcafdcea0": "*Expires:* With this header the application can set a date in the future or the past telling the browser when the page must expire.",
    "response_c5371d3a088af13b4b2e73ae140aac8e": "*Cache-Control:* This header allows to specify how much time a page should be considered fresh in the browser.",
    "response_7861c86ff99a668771415c788624049c": "*Last-Modified:* This header tells the browser which was the last time the site was updated avoiding page re-loads",
    "response_7df27d50fa8a8d99c43e17e4f300dc57": "*ETag:* An etag is a unique identifier that must be created including the modification timestamp of the current page",
    "response_241e831b798a5b2b7d5a163e9d381113": "Setting an Expiration Time",
    "response_b2fa40bfebca062b4674810e4352266f": "The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:",
    "response_fdf5c10ec31fbeea93f8b6dae9e8cbf8": "The Response component automatically shows the date in GMT timezone as expected in an Expires header.",
    "response_795dfff0f4595f60ff9da72900dff158": "If we set this value to a date in the past the browser will always refresh the requested page:",
    "response_5c02e69f9df0a1141eac838690110ed9": "Browsers rely on the client's clock to assess if this date has passed or not. The client clock can be modified to make pages expire and this may represent a limitation for this cache mechanism.",
    "response_8e676f776be373f5471d3db1665683fa": "Cache-Control",
    "response_637975a76962dc440ceb603a263c1464": "This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:",
    "response_670d40994bd62b5d72f6de24627a93e0": "Starting from now, cache the page for one day",
    "response_4e89ba02099c4b7eee0e1c421b42dcf8": "The opposite effect (avoid page caching) is achieved in this way:",
    "response_6353bb62bb3473693f12934ef1ae7c4c": "Never cache the served page",
    "response_5b261d26baa708955489b948c0a8496e": "E-Tag",
    "response_d7f987ce71ea42374b851bae4a1252d5": "An \"entity-tag\" or \"E-tag\" is a unique identifier that helps the browser realize if the page has changed or not between two requests. The identifier must be calculated taking into account that this must change if the previously served content has changed:",
    "routing_476a8980062af9e778f675c1bc4f73ef": "Routing",
    "routing_80737ee348be4a387eda622d15b10c75": "The router component allows defining routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.",
    "routing_a8a25f2aac05af019b129455c8d4e2eb": "Defining Routes",
    "routing_9dcf17896733a4c6184918c1fe10972e": ":1: provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers/actions that you require. A route is defined as follows:",
    "routing_e438afb7b123fb30fd783c39fe3c0d64": "Create the router",
    "routing_36675dba0f45d3bd219c6fb8053e6597": "Define a route",
    "routing_f538757510169716dd05ec2568e198ce": "Another route",
    "routing_af70bfef086f9becd40e8868981bfbc4": "The method add() receives as first parameter a pattern and optionally a set of paths as second parameter. In this case, if the URI is exactly: /admin/users/my-profile, then the \"users\" controller with its action \"profile\" will be executed. Currently, the router does not execute the controller and action, it only collects this information to inform the correct component (ie. :1:) that this is controller/action it should to execute.",
    "routing_e337359c3e1a34b84cd25564e88c6b8f": "An application can have many paths, define routes one by one can be a cumbersome task. In these cases we can create more flexible routes:",
    "routing_8cd210a54ff282e87a6ed0f7f1494972": "In the example above, using wildcards we make a route valid for many URIs. For example, by accessing the following URL (/admin/users/a/delete/dave/301) then:",
    "routing_0208788d55bbb89d8d903679f676ad94": "The method add() receives a pattern that optionally could have predefined placeholders and regular expression modifiers. All the routing patterns must start with a slash character (/). The regular expression syntax used is the same as the :1:. Note that, it is not necessary to add regular expression delimiters. All routes patterns are case-insensitive.",
    "routing_bd30a2c3f46b46c876a14459bb37cb3f": "The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (:controller) is the controller part of the route, the second the action and so on.",
    "routing_9eca21e6ab3780f7e55f26df9d3bb9f9": "These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:",
    "routing_7eb946b0fa36e208b3b987f9503af17e": "Controller names are camelized, this means that characters (-) and (_) are removed and the next character is uppercased. For instance, some_controller is converted to SomeController.",
    "routing_463cf83ff1da5fa1aead4c5adc6d8870": "Since you can add many routes as you need using add(), the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until :1: finds the one that matches the given URI and processes it, while ignoring the rest.",
    "routing_3540d24c854e30bda17e43acc7db78b9": "Parameters with Names",
    "routing_acae6bad7acef0f5d14865c3b631c44e": "The example below demonstrates how to define names to route parameters:",
    "routing_f5cd639e60abaf5c70770f2193039edd": "([0-9]{4})",
    "routing_e7d05a2cd2e98588676c451035df748b": "([0-9]{2})",
    "routing_c8faf368354ddcf09a540ed33a5078be": ":params",
    "routing_5d916475254ea486a884d1f6046ae413": "In the above example, the route doesn't define a \"controller\" or \"action\" part. These parts are replaced with fixed values (\"posts\" and \"show\"). The user will not know the controller that is really dispatched by the request. Inside the controller, those named parameters can be accessed as follows:",
    "routing_988f54d638ea3c28b4dcd672d992a39e": "Return \"year\" parameter",
    "routing_7bc6d7d26fb4625b3c367d05cbecb6f3": "Return \"month\" parameter",
    "routing_19dc82172aefe683b521b7932ce43432": "Return \"day\" parameter",
    "routing_3b64696f43025f9debdd28b92dcc3d55": "Note that the values of the parameters are obtained from the dispatcher. This happens because it is the component that finally interacts with the drivers of your application. Moreover, there is also another way to create named parameters as part of the pattern:",
    "routing_478aded91934b807494433f5e157b553": "You can access their values in the same way as before:",
    "routing_996e65daa812df4b6a59f6ca18e6d5e5": "Returns \"name\" parameter",
    "routing_e1c87a801511011720872a707a895b74": "Returns \"type\" parameter",
    "routing_40d3496dd82862acf7fa645cf5843ca9": "Short Syntax",
    "routing_21979d3e12775abb02b191341aff60c1": "If you don't like using an array to define the route paths, an alternative syntax is also available. The following examples produce the same result:",
    "routing_5808d93b5a62a02626e69461545b42c9": "Short form",
    "routing_ac5a335ee540c64c78ddf133ca4e11f4": "Array form",
    "routing_f3080b2f6ccf5d03da8f1da2560e2d1a": "Mixing Array and Short Syntax",
    "routing_ad3d45d5acd8299cd58843284585bf79": "Array and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:",
    "routing_afbe3625aff91a4008df9b8e148191ee": "First position must be skipped because it is used for",
    "routing_0199201654ca4047c6811d3ae92f2f4c": "the named parameter 'country'",
    "routing_e072558226ceb8372cf5c7434ae277d6": "Positions start with 2",
    "routing_ab5679a42afac0c7b0181219d03ba29b": "Routing to Modules",
    "routing_9add85d11b871eaff3e948f9c4c4b82d": "You can define routes whose paths include modules. This is specially suitable to multi-module applications. It's possible define a default route that includes a module wildcard:",
    "routing_7a02084b284a14555e834818e8512471": "In this case, the route always must have the module name as part of the URL. For example, the following URL: /admin/users/edit/sonny, will be processed as:",
    "routing_b75389cde16eadf81bfc0a68ff6150b9": "Or you can bind specific routes to specific modules:",
    "routing_6a0fab83164f4079d3ab6ddd5b16264d": "Or bind them to specific namespaces:",
    "routing_a9e57af3ec6ccf5159eeaa8524c3259b": "Namespaces/class names must be passed separated:",
    "routing_453efd9a5cf676ae2ae88a43c16a616b": "HTTP Method Restrictions",
    "routing_1477452518ac56e7c127ba9b933bf10e": "When you add a route using simply add(), the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:",
    "routing_7272c11d5377d57012f4df49534d1ead": "This route only will be matched if the HTTP method is GET",
    "routing_2f6bc0fd4cacf07a48d67d8311c9dd5c": "This route only will be matched if the HTTP method is POST",
    "routing_c2eafcef2064372c43e67d99455710c0": "This route will be matched if the HTTP method is POST or PUT",
    "routing_cf90cec6f911c38eece8ebb5aa3b4b23": "Using convertions",
    "routing_8f5321b91956f88f2b4d583c0f1e846b": "Convertions allow to freely transform the route's parameters before passing them to the dispatcher, the following examples show how to use them:",
    "routing_04d68506c522a4896657a897a9cba94c": "The action name allows dashes, an action can be: /products/new-ipod-nano-4-generation",
    "routing_085f85bc9842588f9ab10a2733d9fd68": "Transform the slug removing the dashes",
    "routing_89645649e65162817ae5591359c8a198": "Groups of Routes",
    "routing_9ed218f28edb65d2e1ce51f6ce34c1ec": "If a set of routes have common paths they can be grouped to easily maintain them:",
    "routing_d3dbf364456e79dff31c012172d8aa25": "Create a group with a common module and controller",
    "routing_43735061c13b24a7f591a1c8b8137f0e": "All the routes start with /blog",
    "routing_5a86a91ac4dd449f3cc00d7b3f775ec4": "Add a route to the group",
    "routing_7aa3c893d6c37ebe73797b11b3af0e1d": "Add another route to the group",
    "routing_82fc3962e12dabb102c57c8fab55dc3f": "This route maps to a controller different than the default",
    "routing_cf0d7a079879f96295a227eb381c89f0": "Add the group to the router",
    "routing_d18d7dd959e51180c33e8fe7efd1adbe": "You can move groups of routes to separate files in order to improve the organization and code reusing in the application:",
    "routing_5431d95786f0749df40cb772cb0a299f": "Default paths",
    "routing_b1851b1c2fa5c5307d595bfaaff976ac": "Then mount the group in the router:",
    "routing_87641826c33ca36481c575395f04a269": "Matching Routes",
    "routing_c9305535339c97f0535de63c1c82b540": "A valid URI must be passed to Router in order to let it checks the route that matches that given URI. By default, the routing URI is taken from the $_GET['_url'] variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:",
    "routing_57b493be47ed19be107d98ad207df3e6": "The following example shows how to use this component in stand-alone mode:",
    "routing_5b470d05b5291e2e87fb259d20aecc64": "Creating a router",
    "routing_54a213830db9190215d220cee8eabbc8": "Define routes here if any",
    "routing_d9ec1142c3f874114cbdca3f614f5e2b": "Taking URI from $_GET[\"_url\"]",
    "routing_d4e886c0e6bef2a13fd1e4c362ec0492": "or Setting the URI value directly",
    "routing_d35b79aa0c8abf254abb62fc4c778f1d": "Getting the processed controller",
    "routing_7573649970696f9e238184c76d5505b6": "Getting the processed action",
    "routing_407e0df96b74082fe285eb53fafb7028": "Get the matched route",
    "routing_7ff55897ca1eac97569667483eccf29c": "Naming Routes",
    "routing_87997b24529888023044e0ac18a908b6": "Each route that is added to the router is stored internally as an object :1:. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.",
    "routing_db357fb8b3bf605ae3443a085fd2ae31": "or just",
    "routing_99826062e7ee46bb65b29bd1bdc47f6c": "Then, using for example the component :1: we can build routes from its name:",
    "routing_4374667393d71c92776bc6ca2ba8a756": "returns /posts/2012/phalcon-1-0-released",
    "routing_33df0f1f046d5ea7d528ae7e04b5b00f": "Usage Examples",
    "routing_7d3cc177511a959a88a38ebc77f371bc": "The following are examples of custom routes:",
    "routing_c2cc5818f72720cf5db29c705f87230e": "matches \"/system/admin/a/edit/7001\"",
    "routing_3bc55ac109f7512abc97d69edfb95c44": "matches \"/es/news\"",
    "routing_8adc7a12513b80e1ef71a38992a26d81": "matches \"/admin/posts/edit/100\"",
    "routing_57cffdf1c525d359d4056155dbd687df": "matches \"/posts/2010/02/some-cool-content\"",
    "routing_bc95ef7ead0f90292bb09f73c0e2aa7e": "matches \"/manual/en/translate.adapter.html\"",
    "routing_5ae86815d99a6284b10996cf6a15afae": "matches /feed/fr/le-robots-hot-news.atom",
    "routing_a74af9f2887a549af527cf5c6816171e": "matches /api/v1/users/peter.json",
    "routing_455c64f03d8a2db20778f630271ab7eb": "Default Behavior",
    "routing_12b50c61cc98da6d971a5884a6f36ea2": ":1: has a default behavior providing a very simple routing that always expects a URI that matches the following pattern: /:controller/:action/:params",
    "routing_d6b9352467b77e061070a12d9d8b2d6c": "For example, for a URL like this *http://phalconphp.com/documentation/show/about.html*, this router will translate it as follows:",
    "routing_64e1f6d7e8bd1348c4afc274d26d571a": "If you don't want use this routes as default in your application, you must create the router passing false as parameter:",
    "routing_8c0d2307d542718a5f44f362bc75a0e6": "Create the router without default routes",
    "routing_5aef7c16fc00974efa801f11d5ab1674": "Setting the default route",
    "routing_f263d36de6652a9b4a6d419ea3dc8359": "When your application is accessed without any route, the '/' route is used to determine what paths must be used to show the initial page in your website/application:",
    "routing_b09e95ff2020febabcc69da62f468438": "Not Found Paths",
    "routing_b1656daeb0be1c3b453eed446ec80368": "If none of the routes specified in the router are matched, you can define a group of paths to be used in this scenario:",
    "routing_0afb82ff58fddb0c28885460b76288dc": "Set 404 paths",
    "routing_33a1d5e7ebac5b03e011b0a0f5ef8c27": "Setting default paths",
    "routing_4e85ee960ebc91e99e100ebc61abfceb": "It's possible to define default values for common paths like module, controller or action. When a route is missing any of those paths they can be automatically filled by the router:",
    "routing_f1a2dc7a4a6a3a08ece6672cae6bbd56": "Setting a specific default",
    "routing_b95bdc68566652e92902b5a4d919035c": "Using an array",
    "routing_45a6a55a7d1f271400e66f477bc919c8": "Dealing with extra/trailing slashes",
    "routing_84eb8a6b4c6bfbdc6313b9fae680e929": "Sometimes a route could be accessed with extra/trailing slashes and the end of the route, those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:",
    "routing_4c419e391a1a280d8cdef97f61e105d8": "Remove trailing slashes automatically",
    "routing_cb88012b458e6b55753d6ab71de09ed4": "Or, you can modify specific routes to optionally accept trailing slashes:",
    "routing_2617728469525c66288abb69d182cb15": "Match Callbacks",
    "routing_eeec2b22d72619afda05414dbc3c90ff": "Sometimes, routes must be matched if they meet specific conditions, you can add arbitrary conditions to routes using the 'beforeMatch' callback, if this function return false, the route will be treaded as non-matched:",
    "routing_807bbe76d40d1fa78e437c5c686c7eca": "Check if the request was made with Ajax",
    "routing_e2baf3be5f2a60d1ec516e51de94661d": "You can re-use these extra conditions in classes:",
    "routing_dbdc46e51cbe0f58cb90ef9001dab2a7": "And use this class instead of the anonymous function:",
    "routing_700fdbb69619d592622aa670b3e4aaa2": "Hostname Constraints",
    "routing_f5bb43969cf1dfaf2ed5786dcfbcb3b1": "The router allow to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:",
    "routing_3b6265dc31b17ad6d85aa03a282ad603": "Hostname can also be regular expressions:",
    "routing_358162dafe136cd0f52ead45bf46f6fa": "In groups of routes you can set up a hostname constraint that apply for every route in the group:",
    "routing_765ae5df8f323f1106da26fef964c21d": "Hostname restriction",
    "routing_1e80b472e30224022737c22cc9d6532a": "Default route",
    "routing_d95c9cb668c864c98ce0f13b7cfbb094": "URI Sources",
    "routing_fe0a2ee2c90f9752b2a978bfd4b55d83": "By default the URI information is obtained from the $_GET['_url'] variable, this is passed by the Rewrite-Engine to Phalcon, you can also use $_SERVER['REQUEST_URI'] if required:",
    "routing_18c5a9d018efa117de87ba83036d7d8f": "use $_GET['_url'] (default)",
    "routing_c464d18bc721cb189482c8a99bec39b0": "use $_SERVER['REQUEST_URI'] (default)",
    "routing_af97ddd2a6081ddf9a013328616ad06e": "Or you can manually pass a URI to the 'handle' method:",
    "routing_4336bee9ffb2243f3e531eee35935fc2": "Testing your routes",
    "routing_b8b538e16c15ca88ca07203a60c075e5": "Since this component has no dependencies, you can create a file as shown below to test your routes:",
    "routing_59e8834cf2165c2b6e5f2f1b520ed01c": "These routes simulate real URIs",
    "routing_bca1dc0f79cc18ea5d3dfed1135a3cff": "Add here your custom routes",
    "routing_209f4427a0e381c51b1d73f897704d79": "Testing each route",
    "routing_bc7914700c0a9e19a85b9b37f683a9c7": "Handle the route",
    "routing_14ffb2211d7c0485944a73776865eca6": "Check if some route was matched",
    "routing_3b78bfeabfbeef7d8e6fdb177e468dbe": "Annotations Router",
    "routing_9efa5035be571cb114e90dfd1d23d7ca": "This component provides a variant that's integrated with the :1: service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:",
    "routing_b9d666c79f94f3cfada1ecd17e50f52d": "Use the annotations router",
    "routing_42ad74eedd24d64a34e68882a101f024": "Read the annotations from ProductsController if the uri starts with /api/products",
    "routing_f6932f89eb45ce7de0ead2fd92c7c9a7": "The annotations can be defined in the following way:",
    "routing_e8d954fb39fefaf42280b0ba17212b1e": "Only methods marked with valid annotations are used as routes. List of annotations supported:",
    "routing_ef6ddf2ec08b278c4cae5d3de4ecc4bd": "For annotations that add routes, the following parameters are supported:",
    "routing_2a8d24e00c808b565546152a64c186d3": "If routes map to controllers in modules is better use the addModuleResource method:",
    "routing_cbebe00549b82fb07298ec65494d85ca": "Read the annotations from Backend\\Controllers\\ProductsController if the uri starts with /api/products",
    "routing_ac44f232dbf5ec48d8c0868482c9ff0d": "Registering Router instance",
    "routing_ac9e9e05ba519f705c4df55d20b55ac7": "You can register router during service registration with Phalcon dependency injector to make it available inside controller. You need to add code below in your bootstrap file (for example index.php or app/config/services.php if you use :1:)",
    "routing_76c01d03be138f0ca89687a425f32b0d": "You need to create app/config/routes.php and add router initialization code, for example:",
    "routing_6946292c838dafe294782c973703999a": "Implementing your own Router",
    "routing_de0764d78260a6bae6b3dc64f4b95bd7": "The :1: interface must be implemented to create your own router replacing the one provided by Phalcon.",
    "samples_68d46d7499604661d0f5ca8a8aa416c2": "List of examples",
    "samples_937db97642eccb89e75421dddda3f9ec": "Following examples are full applications you can use to learn more about Phalcon and use them as base for your own websites/applications:",
    "security_e0ef2e95a1440df19d63e9e955ae6abf": "Security",
    "security_559a9f19f25768b1c7d3fd048bb1440b": "This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).",
    "security_964a2cfc27d9a6128aded38b913c6f1b": "Password Hashing",
    "security_c4051b348232ee1179906b7dfa5cb325": "Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods “md5_” and “sha1_”. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as :1:.",
    "security_97e50a912d71f47c3fc9a4d2d602e559": "To solve this problem we can use hash algorithms as bcrypt_. Why bcrypt? Thanks to its “Eksblowfish_” key setup algorithm we can make the password encryption as “slow” as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.",
    "security_5a90a95f09c27a892b48f618ca39e207": "This component gives you the ability to use this algorithm in a simple way:",
    "security_0ab97edf50fd5ec2569aa910deba8f89": "Store the password hashed",
    "security_c517b7bfa84e40c992a4c1cfa12d83a8": "We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:",
    "security_d6c5533d83067194760edb4307f97b3d": "The password is valid",
    "security_7f3aba84d7bd4d1a7655091b43a9cda6": "The validation has failed",
    "security_bd4619c4495c0a9ae0993f0c89a3a4ee": "The salt is generated using pseudo-random bytes with the PHP's function openssl_random_pseudo_:1: so is required to have the :2: extension loaded.",
    "security_e7b1ff65893c115cca3b6108c16ccc9c": "Cross-Site Request Forgery (CSRF) protection",
    "security_d22af5e2a1eeba75c4b48781faf0085d": "This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.",
    "security_b7e8084b42539d7c45ad1acb575cf3ef": "The idea is to prevent the form values from being sent outside our application. To fix this, we generate a :1: (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:",
    "security_8217074a00f1ee08b580e160acd002b9": "Then in the controller's action you can check if the CSRF token is valid:",
    "security_d18843843677d4214d39430e547164b0": "The token is ok",
    "security_a9096615e5d0b316628d6d46d809dc17": "Remember to add a session adapter to your Dependency Injector, otherwise the token check won't work:",
    "security_d389e6c51ec7250e99f9bd4004f0e8d4": "Adding a :1: to the form is also recommended to completely avoid the risks of this attack.",
    "security_09fcbfa5b4310f13bfd02a2a7730defa": "Setting up the component",
    "security_9457196fa73d45bf471dcfe6ab181165": "This component is automatically registered in the services container as 'security', you can re-register it to setup it's options:",
    "security_655fb53228f3035a6214d0c03ff391f7": "Set the password hashing factor to 12 rounds",
    "security_d2e637c73fdc7fd2339c5e857f77430d": ":1:, is a sample application that uses the Security component for avoid CSRF and password hashing, [:2:]",
    "security_b0492394b589b5ff8f6fb98048d65d8f": "External Resources",
    "security_53c525ce454ebba9887fc2e265a32e9f": ".. _sha1 : http://php.net/manual/en/function.sha1.php .. _md5 : http://php.net/manual/en/function.md5.php .. _openssl_random_pseudo_bytes : http://php.net/manual/en/function.openssl-random-pseudo-bytes.php .. _openssl : http://php.net/manual/en/book.openssl.php .. _captcha : http://www.google.com/recaptcha .. _`random nonce`: http://en.wikipedia.org/wiki/Cryptographic_nonce .. _bcrypt : http://en.wikipedia.org/wiki/Bcrypt .. _Eksblowfish : http://en.wikipedia.org/wiki/Bcrypt#Algorithm",
    "session_961ade92d171ac826834b6f63182e0b1": "Storing data in Session",
    "session_56daaf4c7a750ae3122b3e809deba99f": "The :1: provides object-oriented wrappers to access session data.",
    "session_38d2fe6e9c58265de29d17ae9b99a96b": "Reasons to use this component instead of raw-sessions:",
    "session_dae600b68345b115f97afabba25c9e0f": "You can easily isolate session data across applications on the same domain",
    "session_d9a7fb9510a74b0502263f5d7f61452a": "Intercept where session data is set/get in your application",
    "session_42ca17971b451fadfb2de0213e911134": "Change the session adapter according to the application needs",
    "session_61d74fee93771ffdddeab2a05d73d187": "Starting the Session",
    "session_c036a3eb6338211e378a3e7b6e1699fa": "Some applications are session-intensive, almost any action that performs requires access to session data. There are others who access session data casually. Thanks to the service container, we can ensure that the session is accessed only when it's clearly needed:",
    "session_f700b9cef8843a4ab8f824640f637637": "Start the session the first time when some component request the session service",
    "session_abc90f1094f9dbe4b58d5a265c369631": "Storing/Retrieving data in Session",
    "session_231c5d26b99f3ebcb4c7d4fa58173200": "From a controller, a view or any other component that extends :1: you can access the session service and store items and retrieve them in the following way:",
    "session_fda95d2732416a25a000e397454ec98b": "Set a session variable",
    "session_982181258da22edbf3bb53590b36053c": "Check if the variable is defined",
    "session_ee433eaada1b253c7e95e182f476cdae": "Retrieve its value",
    "session_02fd8072d25fb0bc8a802a753f8714a2": "Removing/Destroying Sessions",
    "session_74cbe7902d402d8c9a49df86d72665b8": "It's also possible remove specific variables or destroy the whole session:",
    "session_262d69448626454d1e163b4b515dd963": "Remove a session variable",
    "session_35837c66952906c2e7f1e3e0626e47b3": "Destroy the whole session",
    "session_628bce7a00ed8678f1687552bce2c536": "Isolating Session Data between Applications",
    "session_5cc00375b165d0d4f0c8aa130b12e07d": "Sometimes a user can use the same application twice, on the same server, in the same session. Surely, if we use variables in session, we want that every application have separate session data (even though the same code and same variable names). To solve this, you can add a prefix for every session variable created in a certain application:",
    "session_0390f99e84e91d9289ec90111a12944f": "Isolating the session data",
    "session_cebed604aa5015b17aab37dc330ea8c8": "All variables created will prefixed with \"my-app-1\"",
    "session_9f2d377c6b1d6a3308b97290c79339b2": "Session Bags",
    "session_b610736ecc58a9c50fb6048524b03ba2": ":1: is a component that helps separating session data into \"namespaces\". Working by this way you can easily create groups of session variables into the application. By only setting the variables in the \"bag\", it's automatically stored in session:",
    "session_e19c5c57ed64b3c3b7b34a9e22e1ebaa": "Persistent Data in Components",
    "session_7aa6ce2eeaa1521067a8e46555fc143c": "Controller, components and classes that extends :1: may inject a :2:. This class isolates variables for every class. Thanks to this you can persist data between requests in every class in an independent way.",
    "session_e6e14abeec0ee634ee4ff9f356bb8333": "Create a persistent variable \"name\"",
    "session_7c0521393288a294669cf9d6429a9452": "In a component:",
    "session_ff9875bf58f62ce9648ffc3204ab1753": "The data added to the session ($this->session) are available throughout the application, while persistent ($this->persistent) can only be accessed in the scope of the current class.",
    "session_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "session_48588cac7e0db092898287389fcf5296": "The :1: interface must be implemented in order to create your own session adapters or extend the existing ones.",
    "tags_c3144b8ef940c1ebff02551da1193039": "View Helpers",
    "tags_26fe4984f9926a35133255f4c1ed5fb8": "Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering :1:, which in turn offers view helpers to generate HTML markup.",
    "tags_97e74baff8001359e1323244c3c485b2": "This component can be used in a plain HTML+PHP view or in a :1: template.",
    "tags_a05301caf81de2b012d3bcc32aadf8d1": "Document Type of Content",
    "tags_306666c1bdfab58d2a111c8245c7d5e9": "Phalcon provides Phalcon\\\\Tag::setDoctype() helper to set document type of the content. Document type setting may affect HTML output produced by other tag helpers. For example, if you set XHTML document type family, helpers that return or output HTML tags will produce self-closing tags to follow valid XHTML standard.",
    "tags_b9f573d409350f9ad0b4b4431e38898e": "Available document type constants in Phalcon\\\\Tag namespace are:",
    "tags_3ec97a9123bae742ac913d408397293e": "Setting document type.",
    "tags_745b00594b4893899ed2d060be8eea7a": "Getting document type.",
    "tags_a913248b009b9ce67a2e616972b49e9e": "The following HTML will be produced.",
    "tags_addde1f388bfd384d461b352d0146aeb": "W3C//DTD HTML 4.01//EN\"",
    "tags_ed32e12c95a9410e0f495bc5380cda76": "www.w3.org/TR/html4/strict.dtd\">",
    "tags_85e055ff09040f1f1797f06641d93389": "Volt syntax:",
    "tags_ebe7861f32b5b88f1adc5867bd84d41a": "Generating Links",
    "tags_6fed5e5e83eff83835948f2a3633d97b": "A real common task in any web application or website is to produce links that allow us to navigate from one page to another. When they are internal URLs we can create them in the following manner:",
    "tags_5fff0e2c5e8c35e7d396d640174ca309": "Actually, all produced URLs are generated by the component :1: (or service \"url\" failing)",
    "tags_27a89fa6a2d3db6cdb4d3ed5af1e0d93": "Same links generated with Volt:",
    "tags_d80e3bdaef8244040a542f67fcd04075": "Creating Forms",
    "tags_da11624fa19e8cda2e99e676ea2e41e3": "Forms in web applications play an essential part in retrieving user input. The following example shows how to implement a simple search form using view helpers:",
    "tags_d27e4aae0aae3fac6c653f7cb2b03c28": "This last code will generate the following HTML:",
    "tags_06a36510fed4747629d50856f444a826": "Same form generated in Volt:",
    "tags_acb82f62c8bdc466dfa1f8efbbc35409": "Phalcon also provides a :1: to create forms in an object-oriented manner.",
    "tags_f78e5a2f28f870991d16a021368871dc": "Helpers to Generate Form Elements",
    "tags_76edb8ec0dcb4c5d496f53dcb6f6b8b3": "Phalcon provides a series of helpers to generate form elements such as text fields, buttons and more. The first parameter of each helper is always the name of the element to be generated. When the form is submitted, the name will be passed along with the form data. In a controller you can get these values using the same name by using the getPost() and getQuery() methods on the request object ($this->request).",
    "tags_9d358ff3057e3a6fa9c7e6b31c120392": "Making Select Boxes",
    "tags_abfc004a0ef802ba25505abf41857949": "Generating select boxes (select box) is easy, especially if the related data is stored in PHP associative arrays. The helpers for select elements are Phalcon\\\\Tag::select() and Phalcon\\\\Tag::selectStatic(). Phalcon\\\\Tag::select() has been was specifically designed to work with :1:, while Phalcon\\\\Tag::selectStatic() can with PHP arrays.",
    "tags_593e894d72a9c17f82834fb178282e10": "Using data from a resultset",
    "tags_fc9f87deb8feffec031d70d96cf85553": "Using data from an array",
    "tags_9c02c8367d177c1f294065a3edecfdd2": "The following HTML will generated:",
    "tags_2942cd92191a7671ed47ae8e39c6fe4c": "You can add an \"empty\" option to the generated HTML:",
    "tags_f298c863c1906cf5c321226577ad23d8": "Creating a Select Tag with an empty option",
    "tags_4314ad10978d6e5295430fcaddb76476": "Creating a Select Tag with an empty option with default text",
    "tags_0c04dce33fdd9d575e3ae484205cd477": "Volt syntax for above example:",
    "tags_d7b369e25a0fd32a072012ae2eac6dff": "Assigning HTML attributes",
    "tags_96133c6dea59a8e21c1dd8830d7d77d4": "All the helpers accept an array as their first parameter which can contain additional HTML attributes for the element generated.",
    "tags_f1cc9e4206867580dc22af76768cc7c5": "or using Volt:",
    "tags_2dee12a8009caf9941e26e95aa5529e9": "The following HTML is generated:",
    "tags_90680a0d6ea8d96ae9c3d278eee75491": "Setting Helper Values",
    "tags_d1f65b9d28d406d8c7cf83f5775c49e1": "From Controllers",
    "tags_ee6a94af060dc0d282ab7dc0ea202ca0": "It is a good programming principle for MVC frameworks to set specific values for form elements in the view. You can set those values directly from the controller using Phalcon\\\\Tag::setDefault(). This helper preloads a value for any helpers present in the view. If any helper in the view has a name that matches the preloaded value, it will use it, unless a value is directly assigned on the helper in the view.",
    "tags_3a082c1e05df761cc8022226bfc86488": "At the view, a selectStatic helper matches the same index used to preset the value. In this case \"color\":",
    "tags_be7e6e74365b955a1bc65b29d77f1561": "This will generate the following select tag with the value \"Blue\" selected:",
    "tags_6ac76522c00c412a4fbb903ea19d6032": "From the Request",
    "tags_a4c4d2b129dc240a15408fa1a7606e48": "A special feature that the :1: helpers have is that they keep the values of form helpers between requests. This way you can easily show validation messages without losing entered data.",
    "tags_30b618a7301fb8d8b32e47c2a8be084f": "Specifying values directly",
    "tags_f8114bbc24aaa6312eb398a26ea2066a": "Every form helper supports the parameter \"value\". With it you can specify a value for the helper directly. When this parameter is present, any preset value using setDefault() or via request will be ignored.",
    "tags_f8c9fc84fa74d911f322224af7074c29": "Changing dynamically the Document Title",
    "tags_910b594f8c82327d21d73614dd2c72c6": ":1: offers helpers to change dynamically the document title from the controller. The following example demonstrates just that:",
    "tags_11fa3ca18323c73cebd6841cd4dcaafe": "Static Content Helpers",
    "tags_8b872a9b81bce0e4f64179a652555204": ":1: also provide helpers to generate tags such as script, link or img. They aid in quick and easy generation of the static resources of your application",
    "tags_0709149fe66b40772db8d4f138ad844f": "Generate <img src=\"/your-app/img/hello.gif\">",
    "tags_c703dc13a5fa39bc5dba3fcb1fc64b82": "Generate <img alt=\"alternative text\" src=\"/your-app/img/hello.gif\">",
    "tags_d7e6e0ce3a4102593931f158735cde7a": "Images",
    "tags_39de7b34ab09608768d7fa2dbe2e7b17": "Generate <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Rosario\" type=\"text/css\">",
    "tags_d49fec88842962de27a096734913d9de": "Generate <link rel=\"stylesheet\" href=\"/your-app/css/styles.css\" type=\"text/css\">",
    "tags_693fb39361177ed6925aa84de2b9e7d3": "Stylesheets",
    "tags_9e78f902697eeb6bedcdcb0883215e92": "fonts.googleapis.com/css?family=Rosario\" type=\"text/css\"> #}",
    "tags_cf68bb2dedfa37e577f0f9f69b7b3b4d": "fonts.googleapis.com/css?family=Rosario\", false) }}",
    "tags_6fd356e8df150e822932c73af2d86aa6": "Generate <script src=\"http://localhost/javascript/jquery.min.js\" type=\"text/javascript\"></script>",
    "tags_9f915dcabdf67591f1c9d4fe162447ec": "Generate <script src=\"/your-app/javascript/jquery.min.js\" type=\"text/javascript\"></script>",
    "tags_39404202e17269c2366ceb1a4c9caf3f": "Javascript",
    "tags_be7ba5686121df0cebfd766b926ba664": "localhost/javascript/jquery.min.js\" type=\"text/javascript\"></script> #}",
    "tags_4baa9b794a54c1bc8cbab56d43e5cbb7": "localhost/javascript/jquery.min.js\", false) }}",
    "tags_70a9b234bde9b99d278cdf4eddefc89b": "HTML5 elements - generic HTML helper",
    "tags_98a764ec8520f16e70ae318adaa88522": "Phalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper.",
    "tags_32b919d18cfaca89383f6000dcc9c031": "Generate",
    "tags_b76450a52dc43274830b299ffdf5abbc": "<canvas id=\"canvas1\" width=\"300\" class=\"cnvclass\">",
    "tags_e338f861bd877b46f1df36aaeada2cad": "This is my canvas",
    "tags_f75bfd31238d957b9712bdc1be2d77b7": "</canvas>",
    "tags_5240a19e8081f79e65b6199ffe9897b9": "Tag Service",
    "tags_a8481a14be068e60748f0e6ead523064": ":1: is available via the 'tag' service, this means you can access it from any part of the application where the services container is located:",
    "tags_3ca9c99957e6c6ec9f86e78e21a79362": "You can easily add new helpers to a custom component replacing the service 'tag' in the services container:",
    "tags_f966ce4e181e49ba9d6fe934973cfe5c": "Create a new helper",
    "tags_6fd0cb7fb64538c542262c9f78e75e69": "Override an existing method",
    "tags_859b2f6f2834e80ef6e97f2a196af08b": "Then change the definition of the service 'tag':",
    "tags_0df7dba379145f570f6ddc01d9fe58f4": "Creating your own helpers",
    "tags_c7e9e5f23cbef8182b99090172b248c9": "You can easily create your own helpers. First, start by creating a new folder within the same directory as your controllers and models. Give it a title that is relative to what you are creating. For our example here, we can call it \"customhelpers\". Next we will create a new file titled ``MyTags.php`` within this new directory. At this point, we have a structure that looks similar to : ``/app/customhelpers/MyTags.php``. In ``MyTags.php``, we will extend the :1: and implement your own helper. Below is a simple example of a custom helper:",
    "tags_82e5133b47aff3dff8db1618e0d02fde": "Converting parameters to array if it is not",
    "tags_5b61a84694979fe52641a07dd1e7f588": "Determining attributes \"id\" and \"name\"",
    "tags_90e92b9aab56703491b18c329c1b14f6": "Determining widget value,",
    "tags_b86a822c4cf76cc90cfa038245f5c71f": "\\Phalcon\\Tag::setDefault() allows to set the widget value",
    "tags_bef75aee935f560f9eb31732710d1d5e": "Generate the tag code",
    "tags_2db6c35c6ecf455bd52455a38f5e72fe": "After creating our custom helper, we will autoload the new directory that contains our helper class from our \"index.php\" located in the public directory.",
    "tags_bcdc4f4ee80e6a76b92dedcef33a115f": "Add the new helpers folder",
    "tags_40d58c968eee754cd56b2edcc365e93e": "Assign our new tag a definition so we can call it",
    "tags_250b8998fa225422145c1c8c5c0bfc85": "Now you are ready to use your new helper within your views:",
    "tools_f16ba89ee7afed1f5adf9ccfab7fc774": "Phalcon Developer Tools",
    "tools_5f86a37a76c402c9a7ef8e85ea9b8fe9": "These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.",
    "tools_d779ffb4113a9aa6902414524b888ae6": "Download",
    "tools_e0d8720ef3987ed002683da3d43b08b9": "You can download or clone a cross platform package containing the developer tools from Github_.",
    "tools_c0277e63a218ee84b1414b2c467dfbe2": "Installation",
    "tools_618388d79fb02b4b00cdda6d5a1f4242": "These are detailed instructions on how to install the developer tools on different platforms:",
    "tools_16dcaef43f145e3d6763695db14944f3": "Getting Available Commands",
    "tools_111c7ef624beb6d4338c718ef0d22708": "You can get a list of available commands in Phalcon tools by typing: phalcon commands",
    "tools_6a9c831bc5c1ae5b32aabbc1fe4a3788": "Generating a Project Skeleton",
    "tools_6ae7fb5b78692a0f18c712f21f66682c": "You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:",
    "tools_c1e0d3d651727e5163a3f4250dc7ff45": "The above recommended project structure was generated:",
    "tools_dd36a0f52c3ae7025e3b72d5e380e40e": "You could add the parameter *--help* to get help on the usage of a certain script:",
    "tools_f911e2ec92e2456b37496da17a606409": "Phalcon DevTools (1.2.3)",
    "tools_23ac6acc0e34590f4de7567323ba9276": "Help:   Creates a project",
    "tools_eb4f9090943e6671f13c7881aae28c56": "Usage:   project [name] [type] [directory] [enable-webtools]",
    "tools_46378e7968dc488b8ee87396d91c52ac": "Arguments:   help\tShows this help text",
    "tools_61204847703c2789b23a92c79e1833ea": "Example   phalcon project store simple",
    "tools_04f17bfd175fbc6c9ddc99f5d75fec62": "Options:  --name               Name of the new project  --enable-webtools    Determines if webtools should be enabled [optional]  --directory=s        Base path on which project will be created [optional]  --type=s             Type of the application to be generated (micro, simple, modules)  --template-path      Specify a template path [optional]  --use-config-ini     Use a ini file as configuration file [optional]  --trace              Shows the trace of the framework in case of exception. [optional]  --help               Shows this help",
    "tools_89bd1ab95dfdabc96068f90960c91a31": "Accessing the project from the web server will show you:",
    "tools_d7281d770a3c367a891c86662c961e99": "Generating Controllers",
    "tools_40d723c00197dab564136975660379ab": "The command \"create-controller\" generates controller skeleton structures. It's important to invoke this command inside a directory that already has a Phalcon project.",
    "tools_3b61a911a3744d3ff3959a2502bb4e16": "The following code is generated by the script:",
    "tools_26686a2cd6d0eae99caeca53e31c49e6": "Preparing Database Settings",
    "tools_2476ca1c4e1fdf94a9a720dd10d3cae8": "When a project is generated using developer tools. A configuration file can be found in *app/config/config.ini* To generate models or scaffold, you will need to change the settings used to connect to your database.",
    "tools_efc2231631071970e3c45b53b4bc2840": "Change the database section in your config.ini file:",
    "tools_103eb217645d47c61117060bf3a071b9": "Generating Models",
    "tools_bbc4c78364dd5d44f17b00b7f76a6b30": "There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.",
    "tools_e3f69c7f20b479a18d7035ceb3674fce": "Options:  --name=s             Table name  --schema=s           Name of the schema. [optional]  --namespace=s        Model's namespace [optional]  --get-set            Attributes will be protected and have setters/getters. [optional]  --extends=s          Model extends the class name supplied [optional]  --doc                Helps to improve code completion on IDEs [optional]  --directory=s        Base path on which project will be created [optional]  --force              Rewrite the model. [optional]  --trace              Shows the trace of the framework in case of exception. [optional]  --mapcolumn          Get some code for map columns. [optional]",
    "tools_806d1bdc5625ca89cb015ee23299a7e2": "The simplest way to generate a model is:",
    "tools_887926b8b25f33cc752b00608d55a548": "All table fields are declared public for direct access.",
    "tools_b697bd502539c77c3cb6107ecc595ce8": "By adding the *--get-set* you can generate the fields with protected variables and public setter/getter methods. Those methods can help in business logic implementation within the setter/getter methods.",
    "tools_d1cae8a930c6e65aab57aa3cb21832e2": "A nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the addition or removal of fields and properties, without worrying about losing changes made to the model itself. The following screencast shows you how it works:",
    "tools_444dcb6e4ab792f7a397678de08b5b12": "Scaffold a CRUD",
    "tools_dcce99b2bb012a713c31b24feddf3d1b": "Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.",
    "tools_547d2484a1540272d09dc63d614bb925": "Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The screenshot below shows a scaffold based on the table \"products\":",
    "tools_499e3e858ae84fcd7bc4c32289d2244e": "The scaffold generator will build several files in your application, along with some folders. Here's a quick overview of what will be generated:",
    "tools_4ccaf4063adc4214d4aef23d413ac506": "When browsing the recently generated controller, you will see a search form and a link to create a new Product:",
    "tools_c15d7b85481e3cf75e363a0483bf475e": "The \"create page\" allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.",
    "tools_4ef7d998c728fa863b606b964af5285b": "After performing a search, a pager component is available to show paged results. Use the \"Edit\" or \"Delete\" links in front of each result to perform such actions.",
    "tools_45996c72348c9fda516a66dcf9992659": "Web Interface to Tools",
    "tools_eccae8f5452d061f5aa2cdbfa332b277": "Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:",
    "tools_642c39544aab1f7c922b02712472d40a": "Integrating Tools with PhpStorm IDE",
    "tools_6ac7cfa1e44097cc1a0002e16e1746a8": "The screencast below shows how to integrate developer tools with the :1:. The configuration steps could be easily adapted to other IDEs for PHP.",
    "tools_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tools_c7953dac4a7034ef255b13fdac1919f3": "Phalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors.",
    "translate_98c9d4681c477ea707d4970e7778f6a8": "Multi-lingual Support",
    "translate_e2a32b33e39ede9f0811702ad8db95e8": "The component :1: aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user's chosen language supported by the application.",
    "translate_59016d3191a4f3dbf5870903d350a278": "Adapters",
    "translate_db2308e32b86da819830c6c2e5abd251": "This component makes use of adapters to read translation messages from different sources in a unified way.",
    "translate_8a2060f36ca4f202fdf743f442c4474a": "Component Usage",
    "translate_52e146ffe8d9422a0563efc4216170b8": "Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:",
    "translate_5f21c2607542fbb7686ddd3b43fa3682": "Each file contains an array of the translations in a key/value manner. For each translation file, keys are unique. The same array is used in different files, where keys remain the same and values contain the translated strings depending on each language.",
    "translate_8b0b12a88ef5128b39666de8b788b264": "app/messages/es.php",
    "translate_cc3b719c877ead78d454923a5e5d7420": "app/messages/fr.php",
    "translate_8a5da1e9769e7aef5ff07e8ee18d8f46": "Implementing the translation mechanism in your application is trivial but depends on how you wish to implement it. You can use an automatic detection of the language from the user's browser or you can provide a settings page where the user can select their language.",
    "translate_b0a1958fe3562413949683b75c11bb9b": "A simple way of detecting the user's language is to parse the $_SERVER['HTTP_ACCEPT_LANGUAGE'] contents, or if you wish, access it directly by calling $this->request->getBestLanguage() from an action/controller:",
    "translate_c0f47784dfc36ca54240ce06646e7ccd": "Ask browser what is the best language",
    "translate_567208363f055f6525775a8bb47210ff": "Check if we have a translation file for that lang",
    "translate_d95196f5979412387168a9a2b0c5d6cf": "fallback to some default",
    "translate_8cc0522120c34ed36d85b89756eed0b7": "Return a translation object",
    "translate_2ff7c999eb2ae79e0b87ae7cbf371ac7": "The _getTranslation method is available for all actions that require translations. The $t variable is passed to the views, and with it, we can translate strings in that layer:",
    "translate_7eb87d7bf9fe530fd9fae17b33249c82": "The \"_\" function is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the \"_ function. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:",
    "translate_09613af9cbc9a0e2587a2beaac3dec73": "Some applications implement multilingual on the URL such as http://www.mozilla.org/**es-ES**/firefox/. Phalcon can implement this by using a :1:.",
    "translate_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "translate_203d60c4b261829f5f0f43be5147b498": "The :1: interface must be implemented in order to create your own translate adapters or extend the existing ones:",
    "tutorial-invo_7f678843ac2d35108253ef04bcf88ddb": "Tutorial 2: Explaining INVO",
    "tutorial-invo_28c87f3f9c6f429bc7d90c5c7ede0254": "In this second tutorial, we'll explain a more complete application in order to deepen the development with Phalcon. INVO is one of the applications we have created as samples. INVO is a small website that allows their users to generate invoices, and do other tasks such as manage their customers and products. You can clone its code from Github_.",
    "tutorial-invo_ed36a879763a72ad2eee0265880afedc": "Also, INVO was made with :1: as client-side framework. Although the application does not generate invoices, it still serves as an example to understand how the framework works.",
    "tutorial-invo_3709570c902e1a2ffa6c5fba641e54c6": "Project Structure",
    "tutorial-invo_3595f28c91fe068a1929221da9da0b1f": "Once you clone the project in your document root you'll see the following structure:",
    "tutorial-invo_75908b9dde1d89de02a927f9f76ffa2d": "As you know, Phalcon does not impose a particular file structure for application development. This project provides a simple MVC structure and a public document root.",
    "tutorial-invo_6e14d8418b95f3a464b13f043e60823c": "Once you open the application in your browser http://localhost/invo you'll see something like this:",
    "tutorial-invo_fa6a84822536f4cbe05b457b2cc3889e": "The application is divided into two parts, a frontend, that is a public part where visitors can receive information about INVO and request contact information. The second part is the backend, an administrative area where a registered user can manage his/her products and customers.",
    "tutorial-invo_476a8980062af9e778f675c1bc4f73ef": "Routing",
    "tutorial-invo_d7b7bba4cbcbb48d2596f87e32f1c450": "INVO uses the standard route that is built-in with the Router component. These routes match the following pattern: /:controller/:action/:params. This means that the first part of a URI is the controller, the second the action and the rest are the parameters.",
    "tutorial-invo_5c32f015aa0d105ddec5444b5185b6b6": "The following route /session/register executes the controller SessionController and its action registerAction.",
    "tutorial-invo_577e542402540b811d7f352af537ba5b": "Configuration",
    "tutorial-invo_0f64b3448ec641451739dbeb43924bd0": "INVO has a configuration file that sets general parameters in the application. This file is read in the first few lines of the bootstrap file (public/index.php):",
    "tutorial-invo_b4d7f51ad0fa394bbe43700f43672ce5": "Read the configuration",
    "tutorial-invo_cedd34fb9d17470ea65834728f1e26fd": "contains the following settings:",
    "tutorial-invo_588f03a27c4c29f99bed53ee23b0025a": "Phalcon hasn't any pre-defined convention settings. Sections help us to organize the options as appropriate. In this file there are three sections to be used later.",
    "tutorial-invo_adfc9fa0f9bf18986bec56424adfc389": "Autoloaders",
    "tutorial-invo_12beceff46c93213f99a13d60b70ac77": "The second part that appears in the bootstrap file (public/index.php) is the autoloader. The autoloader registers a set of directories in which the application will look for the classes that it eventually will need.",
    "tutorial-invo_137ec25fc74fb514ac12ab593b829ff4": "Note that the above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the viewsDir, because it contains HTML + PHP files but no classes.",
    "tutorial-invo_02b8283e2b5e81cef94cd2a9e239e791": "Handling the Request",
    "tutorial-invo_fc0446f7b7e5aadf1071f94bea6efb6f": "If we skip to the end of the file, the request is finally handled by Phalcon\\\\Mvc\\\\Application which initializes and executes all that is necessary to make the application run:",
    "tutorial-invo_e287a0208a30ff5691eec26a26f4053f": "Dependency Injection",
    "tutorial-invo_3ec6f2564704e630120e116745184575": "Look at the first line of the code block above, the Application class constructor is receiving the variable $di as an argument. What is the purpose of that variable? Phalcon is a highly decoupled framework, so we need a component that acts as glue to make everything work together. That component is Phalcon\\\\DI. It is a service container that also performs dependency injection, instantiating all components as they are needed by the application.",
    "tutorial-invo_a8fb6fc5ad16bcd173179410158ff3a1": "There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.",
    "tutorial-invo_9c2337296eba2c2cc99ed9dbcb8f1d9f": "For instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:",
    "tutorial-invo_a53ecd6d59ae8e71e9c509c31fad61f4": "Start the session the first time a component requests the session service",
    "tutorial-invo_91c3fc975a1658e292ecac25e55fc970": "Here, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name \"session\". This is a convention that will allow the framework to identify the active service in the services container.",
    "tutorial-invo_708c7328d83cde6ff62a3cacc6b28de9": "A request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of Phalcon\\\\DI called Phalcon\\\\DI\\\\FactoryDefault whose task is to register all services providing a full-stack framework.",
    "tutorial-invo_83a2afdf8653199f242fc72420d594b4": "The FactoryDefault Dependency Injector automatically registers the",
    "tutorial-invo_d1a71d84103a9d4b6d8ba6bcce6b9f93": "right services providing a full-stack framework",
    "tutorial-invo_a787ad22760b1f73e9cda20f50d5c344": "It registers the majority of services with components provided by the framework as standard. If we need to override the definition of some service we could just set it again as we did above with \"session\". This is the reason for the existence of the variable $di.",
    "tutorial-invo_5b97780299ed550071e7955b0517768a": "Log into the Application",
    "tutorial-invo_322e594cab612f0c807bacfaee7406a6": "A \"log in\" facility will allow us to work on backend controllers. The separation between backend controllers and frontend ones is only logical. All controllers are located in the same directory (app/controllers/).",
    "tutorial-invo_95f9d3b98ad50727cfe19a6f922de35b": "To enter the system, users must have a valid username and password. Users are stored in the table \"users\" in the database \"invo\".",
    "tutorial-invo_f36053e45a4135190a5fbe3a2e761548": "Before we can start a session, we need to configure the connection to the database in the application. A service called \"db\" is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure a service:",
    "tutorial-invo_b93b3566ee61b9b153fb8a20c91b6bc1": "Database connection is created based on parameters defined in the configuration file",
    "tutorial-invo_e0578ace1f9cd8cacb5b476d51cafd0d": "Here, we return an instance of the MySQL connection adapter. If needed, you could do extra actions such as adding a logger, a profiler or change the adapter, setting it up as you want.",
    "tutorial-invo_abb08affd2830c36019591cee0d408e0": "The following simple form (app/views/session/index.phtml) requests the login information. We've removed some HTML code to make the example more concise:",
    "tutorial-invo_b729f426196bb65221a48821be88864a": "The SessionController::startAction function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:",
    "tutorial-invo_7629e660109c94f016c45e89d657ca33": "Receiving the variables sent by POST",
    "tutorial-invo_e189c36be6ca20f2b7d227aaa8761db1": "Find the user in the database",
    "tutorial-invo_63fb26bc4d9c7ab8bf81502da870e512": "Forward to the 'invoices' controller if the user is valid",
    "tutorial-invo_c33aa491286ca250046f8a93cfd687e8": "Forward to the login form again",
    "tutorial-invo_e1691ff99f6bd12634fef3d7fda85e98": "For simplicity, we have used \"sha1_\" to store the password hashes in the database, however, this algorithm is not recommended in real applications, use \":1:\" instead.",
    "tutorial-invo_6dacbb6b00b1e8395f607c3934435e81": "Note that multiple public attributes are accessed in the controller like: $this->flash, $this->request or $this->session. These are services defined in the services container from earlier. When they're accessed the first time, they are injected as part of the controller.",
    "tutorial-invo_e2c9b701c0e9e94a581b2d2986ea9b74": "These services are shared, which means that we are always accessing the same instance regardless of the place where we invoke them.",
    "tutorial-invo_0ab5be587254263ea652f29c1eb8edd3": "For instance, here we invoke the \"session\" service and then we store the user identity in the variable \"auth\":",
    "tutorial-invo_aef0bb1a5d3d66a8332cef8e6a94b36b": "Securing the Backend",
    "tutorial-invo_7ff4f2f6d194c678c5b2a677ad52b0ca": "The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren't logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:",
    "tutorial-invo_4530981ad58b22a504c8538bb2ba1c1a": "Every time someone attempts to access any controller/action, the application verifies that the current role (in session) has access to it, otherwise it displays a message like the above and forwards the flow to the home page.",
    "tutorial-invo_2c90b734d651f10cc7131ac076b7ebd3": "Now let's find out how the application accomplishes this. The first thing to know is that there is a component called :1:. It is informed about the route found by the :2: component. Then, it is responsible for loading the appropriate controller and execute the corresponding action method.",
    "tutorial-invo_3e0157a6079d73b316fe4f72545941b8": "Normally, the framework creates the Dispatcher automatically. In our case, we want to perform a verification before executing the required action, checking if the user has access to it or not. To achieve this, we have replaced the component by creating a function in the bootstrap:",
    "tutorial-invo_5a3f2590fed451483c9290184dc1c83a": "We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called :1: allows us to intercept the events produced by a component, routing the events to listeners.",
    "tutorial-invo_c9f4b22767d8d72f8d8f7c31ef2e8f39": "Events Management",
    "tutorial-invo_9cc9a9a4bdef843f9c92207a75b41875": "An :1: allows us to attach listeners to a particular type of event. The type that interests us now is \"dispatch\". The following code filters all events produced by the Dispatcher:",
    "tutorial-invo_f4d9a2e02e14cc0acafaa042c1a85a33": "Obtain the standard eventsManager from the DI",
    "tutorial-invo_dfd6fe9068ad78c81e62a83693421bd8": "Instantiate the Security plugin",
    "tutorial-invo_a80818b6ed36ce329c3f05566a104c64": "Listen for events produced in the dispatcher using the Security plugin",
    "tutorial-invo_14ed8db418ae27c9461874df48e65089": "Bind the EventsManager to the Dispatcher",
    "tutorial-invo_49945e223fac5fff337e28082f473b56": "The Security plugin is a class located at (app/plugins/Security.php). This class implements the method \"beforeDispatch\". This is the same name as one of the events produced in the Dispatcher:",
    "tutorial-invo_abbbb05b3359e05192b20ea78670538d": "The hook events always receive a first parameter that contains contextual information of the event produced ($event) and a second one that is the object that produced the event itself ($dispatcher). It is not mandatory that plugins extend the class Phalcon\\\\Mvc\\\\User\\\\Plugin, but by doing this they gain easier access to the services available in the application.",
    "tutorial-invo_d91b1e0723209030c21df36ca0546361": "Now, we're verifying the role in the current session, checking if the user has access using the ACL list. If the user does not have access we redirect to the home screen as explained before:",
    "tutorial-invo_61890578f73112f18e21cbc1c54d5233": "Check whether the \"auth\" variable exists in session to define the active role",
    "tutorial-invo_d71df499ae6087485fdf76c17c4fe5e5": "Take the active controller/action from the dispatcher",
    "tutorial-invo_84e64d27d45cc985b15fcfe4f4368d18": "Obtain the ACL list",
    "tutorial-invo_91e1a311fe450061f625e66a7e0e53aa": "Check if the Role have access to the controller (resource)",
    "tutorial-invo_223b2be953d2a6535350d55f547bffab": "If he doesn't have access forward him to the index controller",
    "tutorial-invo_77e7f5fb0cc4657a13957948354e36fe": "Returning \"false\" we tell to the dispatcher to stop the current operation",
    "tutorial-invo_9cea4724960c835baa2852b846dd6016": "Providing an ACL list",
    "tutorial-invo_bee07cbc99e3a264008d9ed852f41c71": "In the above example we have obtained the ACL using the method $this->_getAcl(). This method is also implemented in the Plugin. Now we are going to explain step-by-step how we built the access control list (ACL):",
    "tutorial-invo_24fdb2fe8ae69a7e3dd95739aa21609d": "Create the ACL",
    "tutorial-invo_142985241bac55e61f67b3f8df1b2d3b": "The default action is DENY access",
    "tutorial-invo_540e48a3dcfa4ad701652cdf74c37733": "Register two roles, Users is registered users",
    "tutorial-invo_1bb51fb376980fe00d07697d579e918e": "and guests are users without a defined identity",
    "tutorial-invo_7026c3b77198230256acb465f3a9c2f4": "Now we define the resources for each area respectively. Controller names are resources and their actions are accesses for the resources:",
    "tutorial-invo_db7b9266f48492d4019507f9bc43f0ef": "Private area resources (backend)",
    "tutorial-invo_cd4d3ce711c8db1b1f18a3a315420722": "Public area resources (frontend)",
    "tutorial-invo_c07226da143bc2c3f942a0848decadcc": "The ACL now have knowledge of the existing controllers and their related actions. Role \"Users\" has access to all the resources of both frontend and backend. The role \"Guests\" only has access to the public area:",
    "tutorial-invo_d7e8f62a25954bc85f63c86ed94f1be4": "Grant access to public areas to both users and guests",
    "tutorial-invo_1e19fec469d8ac4bdf7a077cd03ef0f1": "Grant access to private area only to role Users",
    "tutorial-invo_e9dbb0059898c51f12006f932f8c1dd5": "Hooray!, the ACL is now complete.",
    "tutorial-invo_344fc05aa62dcb9673334da792893b93": "User Components",
    "tutorial-invo_26c19d581f9b8adcf67e0ff5d40fa07a": "All the UI elements and visual style of the application has been achieved mostly through :1:. Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link \"Log in / Sign Up\" changes to \"Log out\" if an user is logged into the application.",
    "tutorial-invo_ced89705bbf6110384fbd0acf9fda9c2": "This part of the application is implemented in the component \"Elements\" (app/library/Elements.php).",
    "tutorial-invo_9531e943076090778f9c27bde71c4471": "This class extends the Phalcon\\\\Mvc\\\\User\\\\Component, it is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we register this class in the services container:",
    "tutorial-invo_97a543993153e65120d2f152d0644545": "Register an user component",
    "tutorial-invo_3298ad06f43c0854b544871881d467fb": "As controllers, plugins or components within a view, this component also has access to the services registered in the container and by just accessing an attribute with the same name as a previously registered service:",
    "tutorial-invo_f6fceb057eb0510f64c434de3c040a62": "The important part is:",
    "tutorial-invo_d6159fee9dcdb02f83a84e5963335e0c": "Working with the CRUD",
    "tutorial-invo_9ee5803894783396314a436a4cb0106a": "Most options that manipulate data (companies, products and types of products), were developed using a basic and common :1: (Create, Read, Update and Delete). Each CRUD contains the following files:",
    "tutorial-invo_4acb74ee1cce36f3fbebc37e5621a553": "Each controller has the following actions:",
    "tutorial-invo_004196ab227c39c85765e52a45bbe66e": "The Search Form",
    "tutorial-invo_5227de8e3efb5114e3fc9a1d26df81bd": "Every CRUD starts with a search form. This form shows each field that has the table (products), allowing the user creating a search criteria from any field. Table \"products\" has a relationship to the table \"products_types\". In this case, we previously queried the records in this table in order to facilitate the search by that field:",
    "tutorial-invo_ba1e50925dfae3c5dd6293072ca8c965": "All the \"product types\" are queried and passed to the view as a local variable \"productTypes\". Then, in the view (app/views/index.phtml) we show a \"select\" tag filled with those results:",
    "tutorial-invo_c593bd8013467e104dd0642ebaaeffad": "Note that $productTypes contains the data necessary to fill the SELECT tag using Phalcon\\\\Tag::select. Once the form is submitted, the action \"search\" is executed in the controller performing the search based on the data entered by the user.",
    "tutorial-invo_878b6c9b94eecff7d42c40c0a88f17fc": "Performing a Search",
    "tutorial-invo_49e69e1a6ce42e203e7f24dd3d5cc6d2": "The action \"search\" has a dual behavior. When accessed via POST, it performs a search based on the data sent from the form. But when accessed via GET it moves the current page in the paginator. To differentiate one from another HTTP method, we check it using the :1: component:",
    "tutorial-invo_540375dd31a0814ecfd754d945897e44": "create the query conditions",
    "tutorial-invo_22c40cca3e11b36e34a4fe9d587303db": "paginate using the existing conditions",
    "tutorial-invo_638ffdc8e55f3eb959f56cd4f1d377e3": "With the help of :1:, we can create the search conditions intelligently based on the data types and values sent from the form:",
    "tutorial-invo_d1186bc6648b7a474a9cf8ec6f717938": "This method verifies which values are different from \"\" (empty string) and null and takes them into account to create the search criteria:",
    "tutorial-invo_c00849c5e1f7ba1dad71566e6eafd63b": "If the field data type is text or similar (char, varchar, text, etc.) It uses an SQL \"like\" operator to filter the results.",
    "tutorial-invo_775ac062be1a34f55d93c2a3e39de18b": "If the data type is not text or similar, it'll use the operator \"=\".",
    "tutorial-invo_f16803e5e4e4781ab80b5e3af828d753": "Additionally, \"Criteria\" ignores all the $_POST variables that do not match any field in the table. Values are automatically escaped using \"bound parameters\".",
    "tutorial-invo_6caf2bedd153027659b27aac568be957": "Now, we store the produced parameters in the controller's session bag:",
    "tutorial-invo_9bbd0c833b1acdd7298af8955b8d2a90": "A session bag, is a special attribute in a controller that persists between requests. When accessed, this attribute injects a :1: service that is independent in each controller.",
    "tutorial-invo_c338b2537f1f16b3ca021730bbdd2a14": "Then, based on the built params we perform the query:",
    "tutorial-invo_2ac0ffc01b2e7a5127175e85f1df122a": "If the search doesn't return any product, we forward the user to the index action again. Let's pretend the search returned results, then we create a paginator to navigate easily through them:",
    "tutorial-invo_14d76d54ab3780f362707c0c1a6aa341": "Data to paginate",
    "tutorial-invo_3995e76cfbc85dea7472c8a1aa627244": "Rows per page",
    "tutorial-invo_37dda05f52e43d78e8a236067e4f3a6f": "Active page",
    "tutorial-invo_d3f60f2e030e7abb46c7b667f889dd88": "Get active page in the paginator",
    "tutorial-invo_4f82dd83f8b26b62f125100bf36329dc": "Finally we pass the returned page to view:",
    "tutorial-invo_e34ffd22274b86356c4d1be9f9683881": "In the view (app/views/products/search.phtml), we traverse the results corresponding to the current page:",
    "tutorial-invo_aa52b2b622e15d091d9cc395b0f14db8": "Creating and Updating Records",
    "tutorial-invo_78e83a0627fcaf60669852c539e75834": "Now let's see how the CRUD creates and updates records. From the \"new\" and \"edit\" views the data entered by the user are sent to the actions \"create\" and \"save\" that perform actions of \"creating\" and \"updating\" products respectively.",
    "tutorial-invo_498ec53e4e2584b114f9af6eae419474": "In the creation case, we recover the data submitted and assign them to a new \"products\" instance:",
    "tutorial-invo_d100834542c3422f40ed6487d235b62c": "Data is filtered before being assigned to the object. This filtering is optional, the ORM escapes the input data and performs additional casting according to the column types.",
    "tutorial-invo_b32e8a40b7344f7cb1fe0ebb7ec3dc11": "When saving we'll know whether the data conforms to the business rules and validations implemented in the model Products:",
    "tutorial-invo_565702a96de97f534f750ff24ec7240e": "The store failed, the following messages were produced",
    "tutorial-invo_45eed66953916c4823a5a774ef5bdc14": "Now, in the case of product updating, first we must present to the user the data that is currently in the edited record:",
    "tutorial-invo_34bb04a68cd7071e63e0532e69dfd5cb": "The \"setDefault\" helper sets a default value in the form on the attribute with the same name. Thanks to this, the user can change any value and then sent it back to the database through to the \"save\" action:",
    "tutorial-invo_18d0cfa0302d0892b52b2f31cae98c00": "Find the product to update",
    "tutorial-invo_1870ec2d65eb717be0cd826df7b226fa": "... assign the values to the object and store it",
    "tutorial-invo_d3e60867c9d627bfaa7532c66363a4b4": "Changing the Title Dynamically",
    "tutorial-invo_3d8283201c2745d21e667cb1c6c849c0": "When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:",
    "tutorial-invo_e40f3f04296994421b72cd0ebe40983c": "Set the document title",
    "tutorial-invo_2a146b29effa81a28c1281d71026db93": "Note, that the method parent::initialize() is also called, it adds more data to the title:",
    "tutorial-invo_ced1d5f8a71cc3b20eb5edd43467ca9c": "Prepend the application name to the title",
    "tutorial-invo_f363a6391b33a732adff55762bd3fb44": "Finally, the title is printed in the main view (app/views/index.phtml):",
    "tutorial-invo_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tutorial-invo_2e7acbb8a1808a4356beef6e2c853ba9": "This tutorial covers many more aspects of building applications with Phalcon, hope you have served to learn more and get more out of the framework.",
    "tutorial-rest_84d6814c39aad10b26d97af056279a18": "Tutorial 3: Creating a Simple REST API",
    "tutorial-rest_26bb72e995bd5df1986ace55a4facb04": "In this tutorial, we will explain how to create a simple application that provides a :1: API using the different HTTP methods:",
    "tutorial-rest_0cc1ad4752268f38af4100ec4035489e": "GET to retrieve and search data",
    "tutorial-rest_32bd0860278777ce2a7da547d6560eb7": "POST to add data",
    "tutorial-rest_fa32eb46b48d58290bc042872eafd930": "PUT to update data",
    "tutorial-rest_57f7893025e584e5b3967f545fdc2d4a": "DELETE to delete data",
    "tutorial-rest_de7a3eed9a59d47b9d09135314d297b0": "Defining the API",
    "tutorial-rest_dc2ae90fdb0e1a1b5ed87ba88e60d3d6": "The API consists of the following methods:",
    "tutorial-rest_5c324116ca038c813884951ceaef82a6": "Creating the Application",
    "tutorial-rest_832519444cf8cf8cfddf582691cb6002": "As the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a :1: to meet our goal.",
    "tutorial-rest_3de37a33c247c456a388861f2bdcc755": "The following file structure is more than enough:",
    "tutorial-rest_b52d147d1fe56301a39815a548fa9c8c": "First, we need an .htaccess file that contains all the rules to rewrite the URIs to the index.php file, that is our application:",
    "tutorial-rest_2de10b838279f7a1b98fbf81f84c855e": "Then, in the index.php file we create the following:",
    "tutorial-rest_539b3e63c25aa801f010dbc03afd004b": "define the routes here",
    "tutorial-rest_c5bdd1dcaebc8333b5ee2aa4fdf59edb": "Now we will create the routes as we defined above:",
    "tutorial-rest_19ff92d2013609de09201b6a1442d60c": "Retrieves all robots",
    "tutorial-rest_fcccedd69d1b9bb08f7c0bc6ce78ff8e": "Searches for robots with $name in their name",
    "tutorial-rest_2ecc05873abdbd9f5c2f34228b8a100f": "Retrieves robots based on primary key",
    "tutorial-rest_ba09a4f2dfcf0f791aa6a30cbda7f65a": "Adds a new robot",
    "tutorial-rest_9f4ce8962a6eb3d3e4f77eb498535139": "Updates robots based on primary key",
    "tutorial-rest_b9c7c89947c393f32a8ae30e2606925f": "Deletes robots based on primary key",
    "tutorial-rest_190c1cf65b799928f06a3169276c224a": "Each route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: '/api/robots/{id:[0-9]+}', by example, explicitly sets that the \"id\" parameter must have a numeric format.",
    "tutorial-rest_aff08db4a501b540bbefb8d4a7d06a4b": "When a defined route matches the requested URI then the application executes the corresponding handler.",
    "tutorial-rest_0199fa0781bc2af2736301fc88a34dff": "Creating a Model",
    "tutorial-rest_248a5b13f805b6df66e79e4a4a6a80bb": "Our API provides information about 'robots', these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application:",
    "tutorial-rest_5e65e76efd7358de97543f933cccef32": "Type must be: droid, mechanical or virtual",
    "tutorial-rest_c096a65878ddaac4ce0b5ffc8753aa76": "Robot name must be unique",
    "tutorial-rest_5a50ccbf7dc2a5082848a95ef3713649": "Year cannot be less than zero",
    "tutorial-rest_76db80d81b38e1a1ddb78641d3191f9f": "Check if any messages have been produced",
    "tutorial-rest_27aad3837a5f3a11f2ca1050a32c6680": "Now, we must set up a connection to be used by this model and load it within our app:",
    "tutorial-rest_9c0e7e2aff8e1bbecc3e75d851f8c89b": "Use Loader() to autoload our model",
    "tutorial-rest_d4fdac308ee18799a8777c00c85cffcd": "Set up the database service",
    "tutorial-rest_cb96f1919ab7315846cc2ad0249ddcac": "Create and bind the DI to the application",
    "tutorial-rest_afcfb569def26d4afb31ed1fd293b041": "Retrieving Data",
    "tutorial-rest_e8decbd7ff3d33202bfa8c228b44d4b3": "The first \"handler\" that we will implement is which by method GET returns all available robots. Let's use PHQL to perform this simple query returning the results as JSON:",
    "tutorial-rest_c7b41850d249a062e80610b6dcca6b07": "translates to the right SQL statements depending on the database system we are using. The clause \"use\" in the anonymous function allows us to pass some variables from the global to local scope easily.",
    "tutorial-rest_5d05802c2034051acc6e92d4c60d9413": "The searching by name handler would look like:",
    "tutorial-rest_12e76a2b259ba344f07fbe50be73c2e6": "Searching by the field \"id\" it's quite similar, in this case, we're also notifying if the robot was found or not:",
    "tutorial-rest_ea25894af54d5d28a23fb08f9f153999": "Create a response",
    "tutorial-rest_d70f9732a93804895552d4041ad92122": "Inserting Data",
    "tutorial-rest_ea7792bcb128f13873a0b38875008365": "Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:",
    "tutorial-rest_f5c14028b1e679c69928688cc85a571c": "Check if the insertion was successful",
    "tutorial-rest_119ca4b05ef54588a2c7015f0293e6e1": "Change the HTTP status",
    "tutorial-rest_9b9c03a98a2fcb2d04f11a1d6ec7584c": "Send errors to the client",
    "tutorial-rest_7e95ceac582a15ef3f27c690a4862c5a": "Updating Data",
    "tutorial-rest_7ee3d9762d971ea9098b67c73223862a": "The data update is similar to insertion. The \"id\" passed as parameter indicates what robot must be updated:",
    "tutorial-rest_12f49100cf21592b1bed0daa5b42bcd9": "Deleting Data",
    "tutorial-rest_a22e0afc3c116152d64bb2ffd8f8e2be": "The data delete is similar to update. The \"id\" passed as parameter indicates what robot must be deleted:",
    "tutorial-rest_51eee60ebdb66fb5770c4b406440fa69": "Testing our Application",
    "tutorial-rest_a444b76b57459a80926fdb40855d43a2": "Using :1: we'll test every route in our application verifying its proper operation:",
    "tutorial-rest_3d2d6a49b68a620826b98699fcf385c7": "Obtain all the robots:",
    "tutorial-rest_41285e4a0ec6a25351e2d5edc06f7314": "localhost/my-rest-api/api/robots",
    "tutorial-rest_bf489f2e18b48c2f62bc412fafde1f6e": "Search a robot by its name:",
    "tutorial-rest_b6f9a34fc994c4ceb77dbc8ec3a3c2c0": "localhost/my-rest-api/api/robots/search/Astro",
    "tutorial-rest_b9dffca52615184a38ea1e4489835f73": "Obtain a robot by its id:",
    "tutorial-rest_9d198cf3c21c49511427348e222c8873": "localhost/my-rest-api/api/robots/3",
    "tutorial-rest_65b7312d59b7814f9bfa796c27ab68b6": "Insert a new robot:",
    "tutorial-rest_d4a9e00a9a3acabf59087aa2cf8fadba": "Try to insert a new robot with the name of an existing robot:",
    "tutorial-rest_f92c146e69ddce8c07d9e73c23321f2a": "Or update a robot with an unknown type:",
    "tutorial-rest_76e5a40776e0a1197e6a888715e1a49d": "localhost/my-rest-api/api/robots/4",
    "tutorial-rest_b66492ddc59541e4dd170275cf479f68": "Finally, delete a robot:",
    "tutorial-rest_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tutorial-rest_dfa8686bc5cdfc90ec5aea91e2f73291": "As we have seen, develop a RESTful API with Phalcon is easy. Later in the documentation we'll explain in detail how to use micro applications and the :1: language.",
    "tutorial_9abbbf47909e7ad733fa62e85cb0db75": "Tutorial 1: Let's learn by example",
    "tutorial_b5a5e9e57656d19a8547aa34121891f4": "Throughout this first tutorial, we'll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework's behavior. If you are interested in automatic code generation tools for Phalcon, you can check our :1:.",
    "tutorial_37ce9f89b0b1cb6b762c7196bc18ec5f": "Checking your installation",
    "tutorial_1b7c81bdd8889e1c836ffb605111f96e": "We'll assume you have Phalcon installed already. Check your phpinfo() output for a section referencing \"Phalcon\" or execute the code snippet below:",
    "tutorial_2254c8131756bb51a2ecac8179a78b7b": "The Phalcon extension should appear as part of the output:",
    "tutorial_bcd21c14594d49fe915b68d70495a843": "Creating a project",
    "tutorial_264e9e5fa61443e3d949a5b9c3b5af4c": "The best way to use this guide is to follow each step in turn. You can get the complete code :1:.",
    "tutorial_e43ba4039b13f24962a8c6077d982e4b": "File structure",
    "tutorial_61cd3d35ca698a2955d9cb11fa63ca24": "Phalcon does not impose a particular file structure for application development. Due to the fact that it is loosely coupled, you can implement Phalcon powered applications with a file structure you are most comfortable using.",
    "tutorial_e213c33711b80713e577d9c25337c509": "For the purposes of this tutorial and as a starting point, we suggest the following structure:",
    "tutorial_d69fe7a293029155d4f8eb9706d65cc1": "Note that you don't need any \"library\" directory related to Phalcon. The framework is available in memory, ready for you to use.",
    "tutorial_c9201f5cc910e6fa29ca3304fee066a1": "Beautiful URLs",
    "tutorial_1fec206e257daffc0d5b007cdfd72e72": "We'll use pretty (friendly) URLs for this tutorial. Friendly URLs are better for SEO as well as being easy for users to remember. Phalcon supports rewrite modules provided by the most popular web servers. Making your application's URLs friendly is not a requirement and you can just as easily develop without them.",
    "tutorial_0a2bafae2f2945e3d51e54c2cb96a16c": "In this example we'll use the rewrite module for Apache. Let's create a couple of rewrite rules in the /tutorial/.htaccess file:",
    "tutorial_01919fda1bcf16efef7a53cd304cef25": "All requests to the project will be rewritten to the public/ directory making it the document root. This step ensures that the internal project folders remain hidden from public viewing and thus eliminates security threats of this kind.",
    "tutorial_8c4cb378ab50e4fb92587f3b8459b2fb": "The second set of rules will check if the requested file exists and, if it does, it doesn't have to be rewritten by the web server module:",
    "tutorial_e942a5f80992ee93b462ea2482b2afc5": "Bootstrap",
    "tutorial_aebd8b2ff258a0ae81307e715cb76197": "The first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.",
    "tutorial_4e04bc143fc46769f56e4ce0ad9bcfd2": "The tutorial/public/index.php file should look like:",
    "tutorial_a03eb182a7972d89257df899a9e4893e": "Register an autoloader",
    "tutorial_446a265dc67feeb5747918302f071767": "Create a DI",
    "tutorial_b2c341141b8e4ea7f05673ec24bc33a4": "Setup the view component",
    "tutorial_dde6aea21ee4354fac975e3a53f8c93e": "Setup a base URI so that all generated URIs include the \"tutorial\" folder",
    "tutorial_6e390072cbe16eea871f567953e9ed8f": "Handle the request",
    "tutorial_adfc9fa0f9bf18986bec56424adfc389": "Autoloaders",
    "tutorial_308de505979c88301dc76dab7905de5b": "The first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component Phalcon\\\\Loader.",
    "tutorial_bea35d534246978a6e020a6d7f5803f3": "With it, we can load classes using various strategies but for this example we have chosen to locate classes based on predefined directories:",
    "tutorial_f0f4e1a66ec21c03b055d8e501cb4fa7": "Dependency Management",
    "tutorial_860a7ed52147d82b4589219e54d068f0": "A very important concept that must be understood when working with Phalcon is its :1:. It may sound complex but is actually very simple and practical.",
    "tutorial_35de02fc6f0f765eb64a8c213b2695dd": "A service container is a bag where we globally store the services that our application will use to function. Each time the framework requires a component, it will ask the container using an agreed upon name for the service. Since Phalcon is a highly decoupled framework, Phalcon\\\\DI acts as glue facilitating the integration of the different components achieving their work together in a transparent manner.",
    "tutorial_b10343867d5a38ecabb698a8d89077c2": "In the next part, we register the \"view\" service indicating the directory where the framework will find the views files. As the views do not correspond to classes, they cannot be charged with an autoloader.",
    "tutorial_54b32d459a9b3b57d1404dcb59734101": "Services can be registered in several ways, but for our tutorial we'll use an :1::",
    "tutorial_2fa24b32d87705508df644418a1f0c40": "Next we register a base URI so that all URIs generated by Phalcon include the \"tutorial\" folder we setup earlier. This will become important later on in this tutorial when we use the class :1: to generate a hyperlink.",
    "tutorial_6a03823c97626be953b1e72793b46c33": "In the last part of this file, we find :1:. Its purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.",
    "tutorial_ea446940ef9793df0a8c379dccd7e357": "As you can see, the bootstrap file is very short and we do not need to include any additional files. We have set ourselves a flexible MVC application in less than 30 lines of code.",
    "tutorial_8ca989fe8012615fbfff3eae4fa94e0e": "Creating a Controller",
    "tutorial_c20772bfe84aac26eb561e3cbb13d636": "By default Phalcon will look for a controller named \"Index\". It is the starting point when no controller or action has been passed in the request. The index controller (app/controllers/IndexController.php) looks like:",
    "tutorial_87a0fd97020586b8d3ea50d9a80b5966": "The controller classes must have the suffix \"Controller\" and controller actions must have the suffix \"Action\". If you access the application from your browser, you should see something like this:",
    "tutorial_a0eaaf846c3bcd2d9077c39874eaf46d": "Congratulations, you're flying with Phalcon!",
    "tutorial_cf5eb363412ee2010ef114fd5786aa7e": "Sending output to a view",
    "tutorial_339029b02b632c371d94ba2aebd0756e": "Sending output to the screen from the controller is at times necessary but not desirable as most purists in the MVC community will attest. Everything must be passed to the view that is responsible for outputting data on screen. Phalcon will look for a view with the same name as the last executed action inside a directory named as the last executed controller. In our case (app/views/index/index.phtml):",
    "tutorial_acc613471f1f1f8c8d40573a8655a821": "Our controller (app/controllers/IndexController.php) now has an empty action definition:",
    "tutorial_d99e70949cc78eb3ca77eb0de64f1e1d": "The browser output should remain the same. The :1: static component is automatically created when the action execution has ended. Learn more about :2: .",
    "tutorial_c60c8e77213c05815057aebb475194ec": "Designing a sign up form",
    "tutorial_55841a53ac2ee2c9420c8d664a04df95": "Now we will change the index.phtml view file, to add a link to a new controller named \"signup\". The goal is to allow users to sign up within our application.",
    "tutorial_00c68781ce1f57f729e14511d21210e0": "The generated HTML code displays an anchor (\"a\") HTML tag linking to a new controller:",
    "tutorial_e344ac99aac31560af177fc001e82872": "To generate the tag we use the class :1:. This is a utility class that allows us to build HTML tags with framework conventions in mind. A more detailed article regarding HTML generation can be :2:",
    "tutorial_96c5338c6359b3dd55fb6e81befe2739": "Here is the Signup controller (app/controllers/SignupController.php):",
    "tutorial_974c0b1cc84d10d4fdf4f0c71a705e97": "The empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):",
    "tutorial_f037b090c33d60731430464d96e62e07": "Viewing the form in your browser will show something like this:",
    "tutorial_025dbc566325d89aca099fac244edae7": "The Phalcon\\\\Tag::form method receives only one parameter for instance, a relative uri to a controller/action in the application.",
    "tutorial_61b7c804bb7efcfcabdcaeff61da855d": "By clicking the \"Send\" button, you will notice an exception thrown from the framework, indicating that we are missing the \"register\" action in the controller \"signup\". Our public/index.php file throws this exception:",
    "tutorial_ddde1aec1f283152d2b26374920da4ca": "    PhalconException: Action \"register\" was not found on controller \"signup\"",
    "tutorial_50b8655eb688bc4fd616fe4cd490c7d3": "Implementing that method will remove the exception:",
    "tutorial_a485ff15835fc97acf6d435e9dc2c714": "If you click the \"Send\" button again, you will see a blank page. The name and email input provided by the user should be stored in a database. According to MVC guidelines, database interactions must be done through models so as to ensure clean object-oriented code.",
    "tutorial_0199fa0781bc2af2736301fc88a34dff": "Creating a Model",
    "tutorial_d83190abfc28016cd871726d2d6a760b": "Phalcon brings the first ORM for PHP entirely written in C-language. Instead of increasing the complexity of development, it simplifies it.",
    "tutorial_c9a7ff2f489fe74a934e87905cf1053a": "Before creating our first model, we need to create a database table outside of Phalcon to map it to. A simple table to store registered users can be defined like this:",
    "tutorial_8bf8e13170a848eba43fd0cbd1f511ea": "A model should be located in the app/models directory (app/models/Users.php). The model maps to the \"users\" table:",
    "tutorial_862828392de7bf95c93884e331aeb4c9": "Setting a Database Connection",
    "tutorial_113f938008170c70ac87517a5716d95b": "In order to be able to use a database connection and subsequently access data through our models, we need to specify it in our bootstrap process. A database connection is just another service that our application has that can be used for several components:",
    "tutorial_748cc1e41c403cd76458fba2c9792f85": "Setup the database service",
    "tutorial_1437da6e511407a3142304855b3e3fb2": "With the correct database parameters, our models are ready to work and interact with the rest of the application.",
    "tutorial_5d444f51481baf36231e6a4e185a8158": "Storing data using models",
    "tutorial_8f44876d9d106d13cbeda0fd65a260d5": "Receiving data from the form and storing them in the table is the next step.",
    "tutorial_165a70665697d1966f0c513b23093766": "Store and check for errors",
    "tutorial_2b27fa2286c04daecdf3262e3d65d3b4": "We then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling save() will store the data in the database for that record. The save() method returns a boolean value which indicates whether the storing of the data was successful or not.",
    "tutorial_4eeecf37adf3f1d3d88107a6e24c97d8": "The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the save method.",
    "tutorial_f2796cda2b6284d9e5dc8902fac3a87c": "Additional validation happens automatically on fields that are defined as not null (required). If we don't enter any of the required fields in the sign up form our screen will look like this:",
    "tutorial_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tutorial_ac62b9a74c27c662143e17d4072c0e4c": "This is a very simple tutorial and as you can see, it's easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!",
    "tutorial_caf1e6f2f68b381886575c075f1fb61b": "Sample Applications",
    "tutorial_e69c20c6aafef23fa8314a4414be15b7": "The following Phalcon-powered applications are also available, providing more complete examples:",
    "tutorial_212058a3389c140598ce012e7c8ce8f4": ":1:: Invoice generation application. Allows for management of products, companies, product types. etc.",
    "tutorial_c4b2e92effe49a1cf9b1f7bd1b527977": ":1:: Multilingual and advanced routing application",
    "tutorial_b7b28b19d11d307b1bb3a3ad39c02dcb": ":3:: A showcase of music albums, handling big sets of data with :1: and using :2: as template engine",
    "tutorial_dec744a23bdfa610e6334732b2f4544a": ":1:: A simple and clean forum",
    "unit-testing_93c36b818e7a033e49bcfca15cf4a457": "Unit testing",
    "unit-testing_913bdc0bf8890f572477f716921bce6f": "Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.",
    "unit-testing_a374e53efc365f0011a90be76a2011f1": "Integrating PHPunit with phalcon",
    "unit-testing_9ee5e794b8771e2e59d55108fc06a51c": "If you don't already have phpunit installed, you can do it by using the following composer command:",
    "unit-testing_cfb67edd8028fccf1890a9e61996576f": "or by manually adding it to composer.json:",
    "unit-testing_7158fa84941c11d4c263ca6f70ec9b55": "Or if you don't have composer you can install phpunit via pear:",
    "unit-testing_01b882fdd393c5cf8f49db9c45d0c429": "Once phpunit is installed create a directory called 'tests' in your root directory:",
    "unit-testing_5e798a26464742bf1b4d0853b3714cbb": "Next, we need a 'helper' file to bootstrap the application for unit testing.",
    "unit-testing_2fbbf0b2ba6267b9e8972743c9ecb0de": "The PHPunit helper file",
    "unit-testing_542e5c5081d63b58ac3a10408c0a248f": "A helper file is required to bootstrap the application for running the tests. We have prepared a sample file. Put the file in your tests/ directory as TestHelper.php.",
    "unit-testing_00ac09769e1af2648931a185f1775955": "required for phalcon/incubator",
    "unit-testing_479a204750c7d5981daed72ca69a78a2": "use the application autoloader to autoload the classes",
    "unit-testing_8f0283e06cded3c28aa083c40e16ad2b": "autoload the dependencies found in composer",
    "unit-testing_14ae3487ceb261a5061f7a58b5b34bc3": "add any needed services to the DI here",
    "unit-testing_1bc7cf965b5ce77251227ee6e93e3e42": "Should you need to test any components from your own library, add them to the autoloader or use the autoloader from your main application.",
    "unit-testing_8cfec838da9bf8556c3d57fd17a80857": "To help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ https://github.com/phalcon/incubator.",
    "unit-testing_9a6558d79099380d81048ef8b2584c86": "You can use the incubator library by adding it as a dependency:",
    "unit-testing_f29e2c3667fd0cc18fcab99af326c9b5": "You can also clone the repository using the repo link above.",
    "unit-testing_f0e7d1800e89c826c992746b97d2f9ce": "PHPunit.xml file",
    "unit-testing_f54691d838d46e24cb3f8f16922dfef5": "Now, create a phpunit file:",
    "unit-testing_c5eced327019c69c1a195cef8ae7de44": "Modify the phpunit.xml to fit your needs and save it in tests/.",
    "unit-testing_103d5109169bc994b7d042bbb413abf5": "This will run any tests under the tests/ directory.",
    "unit-testing_2f3d3e7963ba338498e407db381b4865": "Sample unit test",
    "unit-testing_2d9ec2e85445092d5f8854cdfc0e9927": "To run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.",
    "unit-testing_88347cd5b1e7bc9a380a67423710c883": "This example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.",
    "unit-testing_16fdcc6f360acf6eebaa9f05c3a97677": "First create a base unit test called UnitTestCase.php in your /tests directory:",
    "unit-testing_459c631d8fcd2d9dad5a04feb8db4a2a": "Load any additional services that might be required during testing",
    "unit-testing_1b15f5a55e08aba69442e11350b90cf9": "get any DI components here. If you have a config, be sure to pass it to the parent",
    "unit-testing_0bc81d8cc49b179612c2eb74ec6fa64b": "It's always a good idea to separate your Unit tests in namespaces. For this test we will create the namespace 'Test'. So create a file called \\tests\\Test\\UnitTest.php:",
    "unit-testing_be4b3f760e54f265726e3bc674f4432a": "Now when you execute 'phpunit' in your command-line from the \\tests directory you will get the following output:",
    "unit-testing_bb89d76991e8b5db2aadbbe88424cbb9": "Now you can start building your unit tests. You can view a good guide here (we also recommend reading the PHPunit documentation if you're not familiar with PHPunit):",
    "url_ed236d03ec3edd1f8e21243f33a3d69a": "Generating URLs and Paths",
    "url_3985fcf30af8470b326c4128948ce37c": ":1: is the component responsible of generate urls in a Phalcon application. It's capable of produce independent urls based on routes.",
    "url_68b8722ef7564d65fa4a9ed509690f52": "Setting a base URI",
    "url_ce8911656909797c0f7cfdd8650db8bc": "Depending of which directory of your document root your application is installed, it may have a base uri or not.",
    "url_1d5e74ff02459454bd68d8addd28a2d7": "For example, if your document root is /var/www/htdocs and your application is installed in /var/www/htdocs/invo then your baseUri will be /invo/. If you are using a VirtualHost or your application is installed on the document root, then your baseUri is /. Execute the following code to know the base uri detected by Phalcon:",
    "url_75aca106f3cfa3b32ae8ca3ca717e72d": "By default, Phalcon automatically may detect your baseUri, but if you want to increase the performance of your application is recommended setting up it manually:",
    "url_c17f15740b429bfa48aa04f3d7b46b6b": "Setting a relative base URI",
    "url_1b6850414fe016e6b7bcc0975688e434": "Setting a full domain as base URI",
    "url_16b2458da6a88dbf842ecaf98a9c0799": "Usually, this component must be registered in the Dependency Injector container, so you can set up it there:",
    "url_2f1af28e614976174560c19d608f2b30": "Generating URIs",
    "url_6ceb5ad349a020c2d651901ef0007c04": "If you are using the :1: with its default behavior. Your application is able to match routes based on the following pattern: /:controller/:action/:params. Accordingly it is easy to create routes that satisfy that pattern (or any other pattern defined in the router) passing a string to the method \"get\":",
    "url_844faad4ac343c10f1c849720a37d7ac": "Note that isn't necessary to prepend the base uri. If you have named routes you can easily change it creating it dynamically. For Example if you have the following route:",
    "url_95e0dc4052583f7ec7119bf377a7e581": "A URL can be generated in the following way:",
    "url_6f0aecd30d615e06077ae4e785812b7b": "This produces: /blog/2012/01/some-blog-post",
    "url_11b9173b9cb6348134181f0b0d2c37bb": "Producing URLs without Mod-Rewrite",
    "url_37df3ff3aa072c2251501097b64e80bf": "You can use this component also to create urls without mod-rewrite:",
    "url_935fc536f68caebf9c9faf63e4559b7f": "Pass the URI in $_GET[\"_url\"]",
    "url_b879417b4817eea81c28c7a6402aa074": "This produce: /invo/index.php?_url=/products/save",
    "url_3e1ff6aff3ea47fe0dfb9bcf8c571a40": "You can also use $_SERVER[\"REQUEST_URI\"]:",
    "url_0cefbeb70df9035bd4a81aef37f37aac": "Pass the URI using $_SERVER[\"REQUEST_URI\"]",
    "url_64f135d7cb051d65eefc0a808e0e42a7": "In this case, it's necessary to manually handle the required URI in the Router:",
    "url_4822e91785d2fa3e605512148232f114": "... define routes",
    "url_83cb5acbb2c739341716699cb5bc09ed": "The produced routes would look like:",
    "url_7504bcfefab476c8ec86bd902a64a612": "This produce: /invo/index.php/products/save",
    "url_85f519884f68b0fc2ce37a5a7fb3c9b3": "Producing URLs from Volt",
    "url_87db31c993564f594288f7af54b06a86": "The function \"url\" is available in volt to generate URLs using this component:",
    "url_6c18d17ad2db305abcc46c92691abb52": "Generate static routes:",
    "url_7f68eed15a0101a787422e177b90b8fb": "Static vs. Dynamic Uris",
    "url_80bb958627f146f8ba26b15d8d8c54fa": "This component allow you to set up a different base uri for static resources in the application:",
    "url_d2169d8236878569814560a7f750afde": "Dynamic URIs are",
    "url_bec86b0c6304d0b51011148525a6edb8": "Static resources go through a CDN",
    "validation_c81f893f5539efed7a6b2aae2d783e35": "Validation",
    "validation_df9655796647575843a59b2aaa288feb": "Phalcon\\\\Validation is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.",
    "validation_09046bd05925c7ff83bddee4094d745a": "The following example shows its basic usage:",
    "validation_8119eaef07bf942b708b8da28ae405ac": "The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.",
    "validation_3093b0011464d4bd39869dbdc5a8689c": "Initializing Validation",
    "validation_d086513db60a7c3e4d84f23a05e52c24": "Validation chains can be initialized in a direct manner by just adding validators to the Phalcon\\\\Validation object. You can put your validations in a separate file for better re-use code and organization:",
    "validation_533a67e85a7f17b61b21cb88a9e1f07c": "Validators",
    "validation_1b1888abf001898488a01251b441c267": "Phalcon exposes a set of built-in validators for this component:",
    "validation_fd4983df29ddaf7800070ffeec35afe0": "Additional validators can be created by the developer. The following example explains how to create a validator for this component:",
    "validation_6fbfb65077407a190ad22e8e77664ac2": "It is important that validators return a valid boolean value indicating if the validation was successful or not.",
    "validation_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "validation_025092c74cf3eac36210de122720cf4b": ":1: has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the validation processes.",
    "validation_c2207d0096c2817a5a69f0dfb16f314f": "Each message consists of an instance of the class :1:. The set of messages generated can be retrieved with the getMessages() method. Each message provides extended information like the attribute that generated the message or the message type:",
    "validation_aa193b670cd59296d6003822c817edba": "The getMessages() method can be overridden in a validation class to replace/translate the default messages generated by the validators:",
    "validation_8a7d25a8a7f1e5b02b927a37b57351d9": "Or you can pass a 'message' parameter to change the default message in each validator:",
    "validation_052c3afa0415b025bc6d86d5f3490223": "By default, 'getMessages' returns all the messages generated during validation. You can filter messages for a specific field using the 'filter' method:",
    "validation_d260a18b544978c7f97b844025954db4": "Filter only the messages generated for the field 'name'",
    "validation_3d8f66bb7ca87432cb0e3125363aa301": "Filtering of Data",
    "validation_507eaf899079c0b1f652ad21b5e36385": "Data can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.",
    "validation_35fa191bb4e9b7e286f1b860019edaa7": "Filter any extra space",
    "validation_839737867781eaea4b36c49d0d1641e7": "Filtering and sanitizing is performed using the :1:: component. You can add more filters to this component or use the built-in ones.",
    "validation_ff1d08a3b2570996565ef460daea6026": "Validation Events",
    "validation_b1f211a73fad538fa52a2eabf8250f3b": "When validations are organized in classes, you can implement the 'beforeValidation' and 'afterValidation' methods to perform additional checks, filters, clean-up, etc. If 'beforeValidation' method returns false the validation is automatically cancelled:",
    "validation_cde6f56c01569b440032e464aad1e292": "... add additional messages or perform more validations",
    "validation_54e3ab73caaa54617147ed87e52d7d39": "Cancelling Validations",
    "validation_9880d3237fc267dac86acd10f9425f79": "By default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:",
    "validation_467ddfc7beb4e277ae522fc4663aab79": "The first validator has the option 'cancelOnFail' with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.",
    "validation_c9189a5d2d769d96466c62617e4f90d0": "If you are creating custom validators you can dynamically stop the validation chain by setting the 'cancelOnFail' option:",
    "views_7a9935583e6231cd508cd510f32d5668": "Using Views",
    "views_ef03b15f3a9b49a6b4bb80a813368996": "Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.",
    "views_17d77a719ddbd45d2f4bbc7715716450": "The :1: and :2: are responsible for the managing the view layer of your MVC application.",
    "views_003b14d6a910d6e7ddfee381215bb477": "Integrating Views with Controllers",
    "views_dab1c1ef07dda71358c3a6ef720f6bd3": "Phalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL *http://127.0.0.1/blog/posts/show/301*, Phalcon will parse the URL as follows:",
    "views_1c93242edb5cbc8541a88534f9e9af2b": "The dispatcher will look for a \"PostsController\" and its action \"showAction\". A simple controller file for this example:",
    "views_9470bcb7969c37437876c883f4ccbf2e": "Pass the $postId parameter to the view",
    "views_13c164b379d9671d82a101615ab15151": "The setVar allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the $postId parameter to the respective view template.",
    "views_f529f7a38f66822c201c7a2c549408ec": "Hierarchical Rendering",
    "views_2f21f1561bbd4020a45d46f76fefd9aa": ":1: supports a hierarchy of files and is the default component for view rendering in Phalcon. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.",
    "views_177194bd199b8ca419afc6285ed8638b": "This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is  *app/views* then view component will find automatically for these 3 view files.",
    "views_40c229f1a7c8b8128422cb417c95ca94": "You are not required to implement all of the files mentioned above. :1: will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:",
    "views_b321993985d76a08d546f9a7901b3c6d": "Note the lines where the method *$this->getContent()* was called. This method instructs :1: on where to inject the contents of the previous view executed in the hierarchy. For the example above, the output will be:",
    "views_700f6830c6aa8391f780e3bcb9dae968": "The generated HTML by the request will be:",
    "views_10b460a3de8edd71111332979572dd63": "Using Templates",
    "views_702573dde40111cb422cdded5cac3d40": "Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.",
    "views_898645782f156716701c064f59d9f5d9": "The final output will be the following:",
    "views_a4fd48f24a2c518d5b180c6a6d4a79d1": "Control Rendering Levels",
    "views_21a08cde76073183153e0c02dc43cf90": "As seen above, :1: supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method Phalcon\\Mvc\\\\View::setRenderLevel() offers this functionality.",
    "views_d356d43561f53deaf77231c50250ff8d": "This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.",
    "views_69556848484583057eaea03c03fb80ad": "This is an Ajax response so it doesn't generate any kind of view",
    "views_ccd904c46c82c80680ca9c9d083b2c26": "Shows only the view related to the action",
    "views_0b574a66e81e62ab465902f178ed6a92": "The available render levels are:",
    "views_9ff639be8370b38960cba777a5babc2e": "Disabling render levels",
    "views_31dd34b13e62e822e96a8dc3d89402f7": "You can permanently or temporarily disable render levels. A level could be permanently disabled if it isn't used at all in the whole application:",
    "views_8a19e228d9648c03f52e155849ccb474": "Disable several levels",
    "views_c857045014ddf4562dba50c87b7c7389": "Or disable temporarily in some part of the application:",
    "views_086c3b4119cecbc37ccd78bb3629dd47": "Picking Views",
    "views_c6e2d02b8e6136be2851ff89c37f992a": "As mentioned above, when :1: is managed by :2: the view rendered is the one related with the last controller and action executed. You could override this by using the Phalcon\\\\Mvc\\\\View::pick() method:",
    "views_6be201e49f95681b28b4b8caebe8039d": "Pick \"views-dir/products/search\" as view to render",
    "views_3027740efabd889a595106ce8345eb46": "Pick \"views-dir/products/list\" as view to render",
    "views_0efce5c37e4d187ce85e1c900ab2b4ab": "Disabling the view",
    "views_29f0d82a073cc35519b6e8961d07c490": "If your controller doesn't produce any output in the view (or not even have one) you may disable the view component avoiding unnecessary processing:",
    "views_71390553b9d22d273547f8c8bd331230": "Close session",
    "views_ba4993bcf124a622dbc56d4ec4e985c1": "An HTTP Redirect",
    "views_5cd03e89f27efcddc38775afcc436058": "Disable the view to avoid rendering",
    "views_3cb08bf1a7d4bac0f47363c79fa3be2c": "You can return a 'response' object to avoid disable the view manually:",
    "views_e3a9349e409d158182f3e861c8e8e012": "Simple Rendering",
    "views_f35015ff07641703b167a1739b147a02": ":1: is an alternative component to :2:. It keeps most of the philosophy of :2: but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.",
    "views_c914389eac07b146045365bfe9b43ae6": "This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as :1: and others.",
    "views_abf8ed7d7ae41822d01a13c9c81be2da": "The default component must be replaced in the service container:",
    "views_ebd95f0288cd6070a75a3a30a7dec279": "Automatic rendering must be disabled in :1: (if needed):",
    "views_398368acf874ef364deacc01fa8ed4e3": "To render a view it's necessary to call the render method explicitly indicating the relative path to the view you want to display:",
    "views_5c4407c96cb0f2eecce688cab8d1ca03": "Render 'views-dir/index.phtml'",
    "views_0f7b4bbca2c93378a1aa7cf98e9b2cf7": "Render 'views-dir/posts/show.phtml'",
    "views_79265c8524e7b5114cd5e687af08b4d0": "Render 'views-dir/index.phtml' passing variables",
    "views_89c608e63ddbc3945c96da96dc91d96b": "Render 'views-dir/posts/show.phtml' passing variables",
    "views_83809746bd6d1d7960195e86f68c8da8": "Using Partials",
    "views_75f86de4abb898efbb5e31d807256244": "Partial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.",
    "views_f71fd72a447e6a2ffb2643169ff2ecfb": "One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that your code can be more easily understood. For example, you might have a view that looks like this:",
    "views_67c57e6e7f34e628e2f23b32b066d174": "Method partial() does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:",
    "views_fbe970c3f88ead32c74db6ae1f24455c": "Transfer values from the controller to views",
    "views_11f4881c15938974d44b6e7514313340": ":1: is available in each controller using the view variable ($this->view). You can use that object to set variables directly to the view from a controller action by using the setVar() method.",
    "views_65b786df8771cf9936638d9359806813": "Pass all the posts to the views",
    "views_d00977d07ccc6a00491968a1b998ed50": "Using the magic setter",
    "views_ba577bfcc4105ad93b10817126a7fce8": "Passing more than one variable at the same time",
    "views_5b0db7a17988863f0629d6ef359a5120": "A variable with the name of the first parameter of setVar() will be created in the view, ready to be used. The variable can be of any type, from a simple string, integer etc. variable to a more complex structure such as array, collection etc.",
    "views_9b5dfc6e03f2e4c7ce50d991756ca24f": "Using models in the view layer",
    "views_712a47a1ca2d73af8f82fe973cc57808": "Application models are always available at the view layer. The :1: will instantiate them at runtime automatically:",
    "views_32d287c9930a183a4f900372280abba6": "Although you may perform model manipulation operations such as insert() or update() in the view layer, it is not recommended since it is not possible to forward the execution flow to another controller in the case of an error or an exception.",
    "views_e2809b8367f23b279052a0c57a34b5ac": "Caching View Fragments",
    "views_b2c5981e85b422752e6f5a8234e49b37": "Sometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. :1: offers caching a part or the whole rendered output to increase performance.",
    "views_a18793af605d23cb8e61ce44de8f6524": ":1: integrates with :2: to provide an easier way to cache output fragments. You could manually set the cache handler or set a global handler:",
    "views_9aae4a6bf5e94dfa08a45a805e449b34": "Cache the view using the default settings",
    "views_3f06ec587eeeb185b749837fa4e46e18": "Cache this view for 1 hour",
    "views_78ca43a465c9e94695d57562ffb8c505": "Cache this view for 1 day with the key \"resume-cache\"",
    "views_38213376f90ef4d88c04f2ac0c0edc5f": "Passing a custom service",
    "views_f090ddab8a4c1433924b1b348ef399d1": "When we do not define a key to the cache, the component automatically creates one doing a :1: to view name is currently rendered. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.",
    "views_f888bb1a09ced9103b2fa1bf171f4eeb": "When the View component needs to cache something it will request a cache service to the services container. The service name convention for this service is \"viewCache\":",
    "views_fa2501fd9d459e571d983c8ef7bb5457": "Set the views cache service",
    "views_83b746e3e149c65f5d387ee018ce18e1": "Cache data for one day by default",
    "views_27c9c860a0e993fc9cd8fe1f98c2dd13": "Memcached connection settings",
    "views_5594ea8d99fb14da5c5c94f61150a4f0": "When using view caching is also useful to prevent that controllers perform the processes that produce the data to be displayed in the views.",
    "views_789fb11f699927f5cbb50cddddfc9227": "To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:",
    "views_f4122bc44873ef6d1c814a89bb4e7875": "Check whether the cache with key \"downloads\" exists or has expired",
    "views_01427910082957d63f852a031133d0e4": "Query the latest downloads",
    "views_f800c653d3ea4100de3ff811ebeea38e": "Enable the cache with the same key \"downloads\"",
    "views_9d7f5c5fad64a539b7d9e2f14b189916": "The :1: is an example of implementing the caching of fragments.",
    "views_6e5a69a8dd70f8d2cd5e2ae15b313263": "Template Engines",
    "views_8436fbc2a35e8ace44ce7683ffff75cb": "Template Engines helps designers to create views without use a complicated syntax. Phalcon includes a powerful and fast templating engine called :1:.",
    "views_4889731af0682a0ff001941c53287b7f": "Additionally, :1: allows you to use other template engines instead of plain PHP or Volt.",
    "views_d30b9918e0dd94497b8f8e10fa02a03e": "Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application are using.",
    "views_033f4b37a8ab437c02d21fb2b200c4d9": "If an external template engine is used, :1: provides exactly the same view hierarchy and it's still possible to access the API inside these templates with a little more effort.",
    "views_36a82d83487a4e3f40f2064c8ea7324f": "This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let's see how to do that integration.",
    "views_39112bd6a8127139d0a52a91360e0188": "Creating your own Template Engine Adapter",
    "views_51eeef9ead467502cae8fc7f197f246a": "There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.",
    "views_06f80f0eb563b269df8884b213cd7994": "A template engine adapter is a class that acts as bridge between :1: and the template engine itself. Usually it only needs two methods implemented: __construct() and render(). The first one receives the :1: instance that creates the engine adapter and the DI container used by the application.",
    "views_3e008dba1ca8514936e032d7fada3007": "The method render() accepts an absolute path to the view file and the view parameters set using $this->view->setVar(). You could read or require it when it's necessary.",
    "views_553f0c688023f26caf45bf60b1e83a13": "Initialize here the adapter",
    "views_4170a1870bc2b6a842ac64d63e928050": "Access view",
    "views_4d5b9ed94de45affdd2318cf390fed58": "Access options",
    "views_3ab78eb524cbb6e088e6865f6b3e2729": "Render the view",
    "views_cfdbf34effaf9927896f7e8da605aba4": "Changing the Template Engine",
    "views_1979a43a78910f5cc07142f4eed9a1bd": "You can replace or add more a template engine from the controller as follows:",
    "views_9b9d2cb5832b0ac2b118526529c296a7": "Set the engine",
    "views_a70af6f6b3d19f6e1544ec417a5394bf": "Using more than one template engine",
    "views_474201dbdde6d46b8d104b4ed325697e": "You can replace the template engine completely or use more than one template engine at the same time. The method \\Phalcon\\\\Mvc\\\\View::registerEngines() accepts an array containing data that define the template engines. The key of each engine is an extension that aids in distinguishing one from another. Template files related to the particular engine must have those extensions.",
    "views_0cc44f316c50b5aed136241cb094037e": "The order that the template engines are defined with \\Phalcon\\\\Mvc\\\\View::registerEngines() defines the relevance of execution. If :1: finds two views with the same name but different extensions, it will only render the first one.",
    "views_eed56c16c3fd884a52e645a2764469d8": "If you want to register a template engine or a set of them for each request in the application. You could register it when the view service is created:",
    "views_c9c2415fac9c89e078730c5f75953e9b": "Setting up the view component",
    "views_dc195d80c7c8b4f181529b79237443e5": "A trailing directory separator is required",
    "views_7649f99d9c471d16ff7db8f1c71fd7c0": "There are adapters available for several template engines on the :1:",
    "views_c7ee7944a5606c39612539a861cac009": "Injecting services in View",
    "views_2ec521a259f67d7ede50c9df2312ec77": "Every view executed is included inside a :1: instance, providing easy access to the application's service container.",
    "views_d0a80f72e3b2fa16960b55573362eb7d": "The following example shows how to write a jQuery :2: using a url with the framework conventions. The service \"url\" (usually :1:) is injected in the view by accessing a property with the same name:",
    "views_d3e54f7c04408d6d1a884897bca4169e": "Stand-Alone Component",
    "views_3d46da924d710a41a1e398ffcde2234c": "All the components in Phalcon can be used as *glue* components individually because they are loosely coupled to each other:",
    "views_55c38e733242b57b98320ed2e01d60ed": "Using :1: in a stand-alone mode can be demonstrated below",
    "views_486255d3cb9e7c09557cb1337a0b2d33": "Passing variables to the views, these will be created as local variables",
    "views_59ce96966e8ea7b3f1e65bfb4395322a": "Start the output buffering",
    "views_171c6f9e1616223878805d804ea397f3": "Render all the view hierarchy related to the view products/list.phtml",
    "views_84a791cb36fb4c7899a1a066d193b292": "Finish the output buffering",
    "views_f13eba0f4918c9a0bca147e70fe0279c": "A short syntax is also available:",
    "views_c1ca4e716d9a88ebcca8f7db7cdd0933": "Set any extra options here",
    "views_34a10d520dd11d9adf54cd9c921f0964": "Using :1: in a stand-alone mode can be demonstrated below:",
    "views_e46d27df223d959f57061b90fcdefdca": "Render a view and return its contents as a string",
    "views_d4ed850f254501a2e7c4eacdb100f76d": "Render a view passing parameters",
    "views_296b9f4f4f7b51885c71b3592af71235": "View Events",
    "views_c6a4ae6de7ed5a14215f3044e885e5dd": ":1: and :2: are able to send events to an :3: if it is present. Events are triggered using the type \"view\". Some events when returning boolean false could stop the active operation. The following events are supported:",
    "views_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "views_1d55db2b24319ae2941d54d5b8d5d4a5": "Create an events manager",
    "views_188200bd4a772c505a84a79b119226ca": "Attach a listener for type \"view\"",
    "views_bda634f6269a3a06dd0a40fb4d7ae993": "Bind the eventsManager to the view component",
    "views_1ca1a71f4f5f276064f24f98f4bbcd2e": "The following example shows how to create a plugin that clean/repair the HTML produced by the render process using Tidy_:",
    "volt_571e8bcd0fb45cbd5ba7b65afb1874a2": "Volt: Template Engine",
    "volt_602887edfcc45bcce944deb9fc2309be": "Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.",
    "volt_0c743e0803594efbe6ff61566b75f9ef": "Volt is inspired by Jinja_, originally created by :1:. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt’s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.",
    "volt_c8e0e36307fcd2c5d61b48c9de3d7d94": "Introduction",
    "volt_c8992cedade57d4cdf29fc2cf9404563": "Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:",
    "volt_45c981f6cfc4e37497fa4e9d7a255133": "Activating Volt",
    "volt_a127ba45d4a8a8a2e9eef9430542b4fe": "As other template engines, you may register Volt in the view component, using a new extension or reusing the standard .phtml:",
    "volt_b07ce86350d76294ba3e305d1c6dbe6e": "Registering Volt as template engine",
    "volt_aa14eeb59161107bfd919103ba9240e1": "Use the standard \".phtml\" extension:",
    "volt_b0320f4a950d93f7f09a91c29ce5132b": "Basic Usage",
    "volt_2f1b5c2f3534c62a3dc3282196b93263": "A view consists of Volt code, PHP and HTML. A set of special delimiters is available to enter into Volt mode. {% ... %} is used to execute statements such as for-loops or assign values and {{ ... }}, prints the result of an expression to the template.",
    "volt_4ffce81a2b7bfd57689e79503f201ae4": "Below is a minimal template that illustrates a few basics:",
    "volt_9f7a29f9d928321ecd5a6eac0b6ba071": "Using Phalcon\\\\Mvc\\\\View you can pass variables from the controller to the views. In the above example, three variables were passed to the view: title, menu and post:",
    "volt_c9019da4d8972191e60b297477584b75": "Variables",
    "volt_96bbf01a97ca80f6c209236a02ad816c": "Object variables may have attributes which can be accessed using the syntax: foo.bar. If you are passing arrays, you have to use the square bracket syntax: foo['bar']",
    "volt_c3240673b53669364a902ccbcbbb8ad4": "Filters",
    "volt_ef577735d02c61904e0eb113bc49bcf2": "Variables can be formatted or modified using filters. The pipe operator | is used to apply filters to variables:",
    "volt_23ce658cfe3c5c78e1766cd593ec2dbc": "The following is the list of available built-in filters in Volt:",
    "volt_8ff6794184cb8a0dd75df124bfe57a9d": "Examples:",
    "volt_5c081d944e6f7f7f6c61bcc0a639b48b": "Comments",
    "volt_673b07a8a673a0b45de959a524696e33": "Comments may also be added to a template using the {# ... #} delimiters. All text inside them is just ignored in the final output:",
    "volt_9db4deeb03e5d2de7f9212d5572d19a4": "List of Control Structures",
    "volt_27cd8b5b276dd4e9a96ddeb9af448d47": "Volt provides a set of basic but powerful control structures for use in templates:",
    "volt_62fd3f87581663e4371e40eb51d66e76": "For",
    "volt_dfc11531e4c6065af6db90c0bf559a7a": "Loop over each item in a sequence. The following example shows how to traverse a set of \"robots\" and print his/her name:",
    "volt_584c8e0a99a6c2347bd93aeca5a2f01e": "for-loops can also be nested:",
    "volt_3dad995a8e74e1a64a73ff4064626122": "You can get the element \"keys\" as in the PHP counterpart using the following syntax:",
    "volt_c979b0ff23a64c329e6020e79670ae50": "An \"if\" evaluation can be optionally set:",
    "volt_f39e582b74ae7b0fae814cf758560d1c": "If an 'else' is defined inside the 'for', it will be executed if the expression in the iterator result in zero iterations:",
    "volt_26514764d360f711f12be795a5f242c9": "Alternative syntax:",
    "volt_6e74bbba1b7f688edbce902f37ef8f5c": "Loop Controls",
    "volt_cb6f33544183d282801d26f19ccb1502": "The 'break' and 'continue' statements can be used to exit from a loop or force an iteration in the current block:",
    "volt_959076d2b0beff36ddd17662b927b4f9": "If",
    "volt_f3cbad907c4b8aee67692607530a21b2": "As PHP, an \"if\" statement checks if an expression is evaluated as true or false:",
    "volt_ff2dc016aa61ec8ac0ae29caa27a6ed5": "The else clause is also supported:",
    "volt_ebb7aa5d020ceb3e406fd124cce8637a": "The 'elseif' control flow structure can be used together with if to emulate a 'switch' block:",
    "volt_efa793b5e2da5b64c56a613af1dc1bc8": "Loop Context",
    "volt_8d914b2dc5f95fcf2fc984a83379ce92": "A special variable is available inside 'for' loops providing you information about",
    "volt_e65acd0fd0d03ec2e02d25835e130176": "Assignments",
    "volt_90654b2689e90206e2e44e780e2e7e58": "Variables may be changed in a template using the instruction \"set\":",
    "volt_77922ab3b532acd27ea1577e8fa7b1b1": "Multiple assignments are allowed in the same instruction:",
    "volt_ac7eb0e28ebbd2970e0bc5decd9b856f": "Additionally, you can use compound assignment operators:",
    "volt_b3bb52efc0f44e398f3704c2d355f296": "The following operators are available:",
    "volt_9d0fb94a51e6c917886df9148183fca6": "Expressions",
    "volt_4b639c382d4725994e39c335c6d5b213": "Volt provides a basic set of expression support, including literals and common operators.",
    "volt_ee8dd2766fcb8a457d5b26d2cd68f8a3": "A expression can be evaluated and printed using the '{{' and '}}' delimiters:",
    "volt_67bb9f27cd3e7e4de99a74c9b6b6a549": "If an expression needs to be evaluated without be printed the 'do' statement can be used:",
    "volt_c1c360db85a10f0534261b4002a0a18b": "Literals",
    "volt_8975fdee3cfb0570bd8678b75f6946e8": "The following literals are supported:",
    "volt_71eee481a6c8310dcec0dc7189151d35": "Arrays",
    "volt_6f40ab5ad99ce887bfbdee755f00a03d": "Whether you're using PHP 5.3, 5.4 or 5.5, you can create arrays by enclosing a list of values in square brackets:",
    "volt_4ca697d91e15bb1a10700cd579067f49": "Curly braces also can be used to define arrays or hashes:",
    "volt_f71cfaa0f29dcbf3329bfee182f80554": "Math",
    "volt_4608f8c719712039f57eecfdfc0ab6ad": "You may make calculations in templates using the following operators:",
    "volt_8daa7d30f3cd9a3a4f4be23c9bd7ed9a": "Comparisons",
    "volt_c22664d2a7b40f64b246cb233d00664f": "The following comparison operators are available:",
    "volt_4fe4081cffeaece4d9aecd74b4eb8914": "Logic",
    "volt_162d2ac97f013d264a84a07365114a80": "Logic operators are useful in the \"if\" expression evaluation to combine multiple tests:",
    "volt_93435309515deb73fce1c3d1b568bc92": "Other Operators",
    "volt_0b2bd9c764cd885c45e7a6c0858eb036": "Additional operators seen the following operators are available:",
    "volt_20749e95ee2310631ad2e86488a301b8": "The following example shows how to use operators:",
    "volt_6a2499b69a7e0589ed54afa226c18861": "Tests",
    "volt_b0c360ed172ceffde393b0b4988e8755": "Tests can be used to test if a variable has a valid expected value. The operator \"is\" is used to perform the tests:",
    "volt_8792d66d989effba55c2a8029f73e1ac": "The following built-in tests are available in Volt:",
    "volt_8ebd1e2cfafc15872b017437f8917eb2": "More examples:",
    "volt_83958ae729519ff5491ec0dd9fe759df": "Macros",
    "volt_9ac27aedade0d502a3d25ace895b506d": "Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:",
    "volt_96292b255db8dd893f2454d9d404d0ef": "When calling macros, parameters can be passed by name:",
    "volt_1722014db38e343cdceaa1fa29ce9a8f": "Macros can return values:",
    "volt_3efedb9100e7169c8d720e7c72d7c789": "And receive optional parameters:",
    "volt_37bc16dc011e098a69b4c1ca892ddb12": "Using Tag Helpers",
    "volt_bd9998800f9ac1269410c0b8bada309c": "Volt is highly integrated with :1:, so it's easy to use the helpers provided by that component in a Volt template:",
    "volt_6d029ed559ecc66fe449e9d1476653a0": "The following PHP is generated:",
    "volt_1b3b99f66306629b2e21ef3384dec973": "To call a Phalcon\\\\Tag helper, you only need to call an uncamelized version of the method:",
    "volt_800dd778c0248873014b5d46b6bf8de9": "Functions",
    "volt_8da62e4de22c35c5145389c947a3836e": "The following built-in functions are available in Volt:",
    "volt_e06179c3e64394a27a5d1a1957a16f83": "View Integration",
    "volt_b0ca2ce1f1c6cd73aad03c81e846a485": "Also, Volt is integrated with :1:, you can play with the view hierarchy and include partials as well:",
    "volt_a53a19d535a9faa21843c6cf3748ad7d": "A partial is included in runtime, Volt also provides \"include\", this compiles the content of a view and returns its contents as part of the view which was included:",
    "volt_28a7b018cd0d249f86423536e06961c9": "Include",
    "volt_f227a9159a2de6cdf144f05ad35836f9": "'include' has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it's included. Templates aren't inlined if the 'include' have variables passed with 'with':",
    "volt_bf76ea164e27de7336aaa9146ea1ea05": "Template Inheritance",
    "volt_452075260d726282b3506d29ab4dc91e": "With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define *blocks* than can be overridden by a child template. Let's pretend that we have the following base template:",
    "volt_e27605de512c4520ba4cff8c2360dd7c": "From other template we could extend the base template replacing the blocks:",
    "volt_bb229e12234771d6175e4c357d806936": "Not all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:",
    "volt_6be2debfc1f89c4307f563a5985f71a6": "Multiple Inheritance",
    "volt_171554bc64b2ea7ab5a3c6b34e8f10fe": "Extended templates can extend other templates. The following example illustrates this:",
    "volt_ebae95d6169b5a402e916720cfce3725": "Template \"layout.volt\" extends \"main.volt\"",
    "volt_6f881fe0de2acd261c7325233fac3e6b": "Finally a view that extends \"layout.volt\":",
    "volt_5a40902b0cbd394774f14fc165ad04a1": "Rendering \"index.volt\" produces:",
    "volt_d5ea84676990edc8a9ff87ee9616866a": "Note the call to the function \"super()\". With that function it's possible to render the contents of the parent block.",
    "volt_1530c1d48a32cccf6aee30317cb62004": "As partials, the path set to \"extends\" is a relative path under the current views directory (i.e. app/views/).",
    "volt_33fc9d5ccdfdac6f9b3a6b198c182701": "Autoescape mode",
    "volt_825823aba16d331414c4b6212399156d": "You can enable auto-escaping of all variables printed in a block using the autoescape mode:",
    "volt_b8c97bce4488a1fb733ae5e45de2fb72": "Setting up the Volt Engine",
    "volt_a6e9dbf514ed4b3c2091a71de327231b": "Volt can be configured to alter its default behavior, the following example explain how to do that:",
    "volt_6eb1b0275db340abd7417f83e40fece8": "Register Volt as a service",
    "volt_4cc0afe773f64be53a0dec14d4d624fd": "Register Volt as template engine",
    "volt_b7967d27f624e9c7b4b5b7b66f0cc467": "If you do not want to reuse Volt as a service you can pass an anonymous function to register the engine instead of a service name:",
    "volt_7c198915869603e8c84a190009dacfef": "Register Volt as template engine with an anonymous function",
    "volt_3df2a4fc37af7f679704f2fe71b4ebf8": "set some options here",
    "volt_ce5773f862cbab6b15b61a824f19da36": "The following options are available in Volt:",
    "volt_54ea27e9f7cbb9f7f499526bc0b33dd3": "The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:",
    "volt_4db4ebd567bd7d18ce0179d999e588ac": "Just append the .php extension to the template path",
    "volt_8dab661ce06ac7e9d9fa79268f69238b": "leaving the compiled templates in the same directory",
    "volt_f61b07b90556714f2a151dd18c8c47cc": "​​Recursively create the same structure in another directory",
    "volt_c35aaed9c35a2d5e1e7949c14f87d7da": "Extending Volt",
    "volt_4f614d2e98c02937485f28e55de1ff48": "Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.",
    "volt_3d5f4485a2f56b1d388425052b976315": "The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.",
    "volt_eff81ebb2e4622502c2770ff681205ca": "Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:",
    "volt_f1a88763bba2b44f9c25a709a778aa18": "This binds the function name 'shuffle' in Volt to the PHP function 'str_shuffle'",
    "volt_fd1e231592832bc2a5107f9e237d4f61": "Register the function with an anonymous function. This case we use $resolvedArgs to pass the arguments exactly as were passed in the arguments:",
    "volt_bdb996fcd57717bf161fc97f8b78e04d": "Treat the arguments independently and unresolved:",
    "volt_382b3658a3599ee7466e05218e9ec485": "Resolve the first argument",
    "volt_1752d6ce4e2c6de86227a395c77c3fd8": "Checks if the second argument was passed",
    "volt_160a920bc4968e3cfd622231dde174bc": "Use '10' as default",
    "volt_6f0da7753f00daf5999a4495d6f86816": "Generate the code based on some function availability:",
    "volt_bb8fbd3e074da81e65b6f174515447a2": "Built-in functions can be overridden adding a function with its name:",
    "volt_72c544dbccfac5627f854622d434647a": "Replace built-in function dump",
    "volt_701b73703153b72f1241fb6f987d7971": "A filter has the following form in a template: leftExpr|name(optional-args). Adding new filters is similar as seen with the functions:",
    "volt_3c9486de45f5822473603d9b4d40a5cb": "This creates a filter 'hash' that uses the PHP function 'md5'",
    "volt_a94bf3d5a19e65a73be6d782a90bced2": "Built-in filters can be overridden adding a function with its name:",
    "volt_a7eb88ca5044727dd80b6c2c0a109680": "Replace built-in filter 'capitalize'",
    "volt_b3579f83bd62b25c9709fdbca3bf6161": "Extensions",
    "volt_7bff1818d33f6c3e4ae5bac1041258c1": "With extensions the developer has more flexibility to extend the template engine, and override the compilation of ​a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.",
    "volt_0a168806eb5241d25a16d987d09e9510": "An extension is a class that implements the events triggered by Volt as a method of itself.",
    "volt_b132dbd03fdf508b2f1d210f9a385708": "For example, the class below allows to use any PHP function in Volt:",
    "volt_d5a6d98c9404a6720bce0f4380ef5077": "The above class implements the method 'compileFunction' which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn't return an string the compilation is done using the default behavior provided by the engine.",
    "volt_29ef643fc01fb50deb0745843ae0df21": "The following compilation events are available to be implemented in extensions:",
    "volt_c53d1abf62ee18eb0b40402445443bb6": "Volt extensions must be in registered in the compiler making them available in compile time:",
    "volt_1716b775e668aa844892030c0180b1d2": "Register the extension in the compiler",
    "volt_e2809b8367f23b279052a0c57a34b5ac": "Caching view fragments",
    "volt_a9ac5104121ee701d914b8a21f4295e7": "With Volt it's easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:",
    "volt_b129e2652902c73176aff8e8886377b5": "Setting a specific number of seconds:",
    "volt_e9f47d31e2ad5021e1f9bca72ff49aa9": "Any valid expression can be used as cache key:",
    "volt_fa5c494d6a43bf4695d7f529ef52b144": "The caching is done by the :1: component via the view component. Learn more about how this integration works in the section :2:.",
    "volt_c45c12e738f6cb287f117d8bac15285b": "Inject Services into a Template",
    "volt_ebd73ba8f93a225dbf5dfd764d03ba90": "If a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:",
    "volt_d3e54f7c04408d6d1a884897bca4169e": "Stand-alone component",
    "volt_f060f739765fe9b113aa46c2df47a2d2": "Using Volt in a stand-alone mode can be demonstrated below:",
    "volt_d35206c45f85ed1c51d60b6eeb1788c6": "Create a compiler",
    "volt_1713c75f8f2dc85950bd4f351d4c8526": "Optionally add some options",
    "volt_4036fad262b5149ba792d4e0a2fff044": "Compile a template string returning PHP code",
    "volt_ba9d724e56a24793fa15b9dda9ac73cf": "Compile a template in a file specifying the destination file",
    "volt_b6769e95cd189feb2dc467a58d4e1c5e": "Compile a template in a file based on the options passed to the compiler",
    "volt_7914c55377d1cd19e405d298b74750ed": "Require the compiled templated (optional)",
    "volt_5870a6ba401ea6209ca5e84c6ad172fb": "A bundle for Sublime/Textmate is available :1:",
    "volt_6b26f0d4da1dbb49108d6a4a0016cb70": ":1: is a sample application using Volt as template engine, [:2:]",
    "volt_db7d10291cc0941efd4afbb3c4935bbc": ":1: is running using Volt as template engine, [:2:]",
    "volt_02305dd5dfcd70b0c5cbdf5b1725c2a1": ":1:, the Phalcon's forum, also uses Volt, [:2:]",
    "volt_338b014c4308d54539cc4e6127038193": ":1:, is another sample application that use Volt, [:2:]",
    "volt_b0492394b589b5ff8f6fb98048d65d8f": "External Resources",
    "wamp_1208e8179d40b713ec2bce3fb6d73c1b": "Installation on WAMP",
    "wamp_8d8b360f75ee6ffa84653d9c0858587e": ":1: is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Below are detailed instructions on how to install Phalcon on WampServer for Windows. Using the latest WampServer version is highly recommended.",
    "wamp_6781878c32a5dee1aeaf59c8ed79e10a": "Download the right version of Phalcon",
    "wamp_369c94d451e2358319ed269801f4e5ed": "WAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.",
    "wamp_ead744fad813be334172e04c70d09491": "After download the Phalcon library you will have a zip file like the one shown below:",
    "wamp_0db1319bdc326b865b8f2c9ff6152b45": "Extract the library from the archive to get the Phalcon DLL:",
    "wamp_f6bc8e11127ce83e9da503a2b5bf6e3d": "Copy the file php_phalcon.dll to the PHP extensions. If WAMP is installed in the c:\\\\wamp folder, the extension needs to be in ﻿C:\\\\wamp\\\\bin\\\\php\\\\php5.3.10\\\\ext",
    "wamp_8038675e9b335188a1fe820b481f18a7": "Edit the php.ini file, it is located at ﻿﻿C:\\\\wamp\\\\bin\\\\php\\\\php5.3.10\\\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.",
    "wamp_dd2c47e0478b68866f2853f3ac6016b9": "Also edit another php.ini file, which is located at ﻿﻿﻿C:\\\\wamp\\\\bin\\\\apache\\\\Apache2.2.21\\\\bin\\\\php.ini. Append at the end of the file: extension=php_phalcon.dll and save it.",
    "wamp_2f0f9fc803d746e5a951d5e53eca5630": "Restart the Apache Web Server. Do a single click on the WampServer icon at system tray. Choose \"Restart All Services\" from the pop-up menu. Check out that tray icon will become green again.",
    "wamp_a458c01ca819dfd1ac5874e79d309327": "Open your browser to navigate to http://localhost. The WAMP welcome page will appear. Look at the section \"extensions loaded\" to check if phalcon was loaded.",
    "wamp_5ecec852a15637509d8c8f566dd311f8": "Congrats!, You are now flying with Phalcon.",
    "wamp_7a752ac7821139893d4b7d8eb762a483": "Related Guides",
    "whats-next_ac5979c40cf0f922d23b99b0f63326ef": "Increasing Performance: What's next?",
    "whats-next_4951fecfe8ea04204482ba901a13ac35": "Get faster applications requires refine many aspects: server, client, network, database, web server, static sources, etc. In this chapter we highlight scenarios where you can improve performance and how detect what is really slow in your application.",
    "whats-next_8a5e5cd07086bfd5256478af76a0c9db": "Profile on the Server",
    "whats-next_d499955109185531dee06e38e6371a79": "Each application is different, the permanent profiling is important to understand where performance can be increased. Profiling gives us a real picture on what is really slow and what does not. Profiles can vary between a request and another, so it is important to make enough measurements to make conclusions.",
    "whats-next_5116de9f40ec1c3dd8aafed76c961ba3": "Profiling with XDebug",
    "whats-next_a4925be86d5b8f4d2809c47a6564e026": ":1: provides an easier way to profile PHP applications, just install the extension and enable profiling in the php.ini:",
    "whats-next_b38d10ababd4d8fc1f2ab1d270538b5b": "Using a tool like :1: you can see which functions/methods are slower than others:",
    "whats-next_244719d3a37013227a2f4f2e69954e66": "Profiling with Xhprof",
    "whats-next_988fb6562d947f8da0ae75c1501d0da5": ":1: is another interesting extension to profile PHP applications. Add the following line to the start of the bootstrap file:",
    "whats-next_c3f35ed9003d3e458d7c35470f58797a": "Then at the end of the file save the profiled data:",
    "whats-next_efb07d608d7b87bc1a001af0d1f8a864": "Xhprof provides a built-in html viewer to analize the profiled data:",
    "whats-next_f7dc7675831e283edd54b6e7e3501a7e": "Profiling SQL Statements",
    "whats-next_52ed6613f5a2828779a7c8d3b312fd4c": "Most database systems provide tools to identify slow SQL statements. Detecting and fixing slow queries is very important in order to increase performance in the server side. In the Mysql case, you can use the slow query log to know what SQL queries are taking more time than expected:",
    "whats-next_a32a80fb655426107d82517b69a02162": "Profile on the Client",
    "whats-next_05c5af5d5d4afd8b0aebc3b4a61088ae": "Sometimes we may need to improve the loading of static elements such as images, javascript and css to improve performance. The following tools are useful to detect common bottlenecks in the client side:",
    "whats-next_22c0f83c8d1e0acedd8bee94e7cf349e": "Profile with Chrome/Firefox",
    "whats-next_5540d6acf4174d7778e0a7afe8769dc7": "Most modern browsers have tools to profile the page loading time. In Chrome you can use the web inspector to know how much time is taking the loading of the different resources required by a single page:",
    "whats-next_7d06b0c1d56eb8a4de4749e396711d85": ":1: provides a similar functionality:",
    "whats-next_2bff9cea84721eb4139848329ad036c8": "Yahoo! YSlow",
    "whats-next_2ea565e1bb92397ce43e91584ab8d34f": ":2: analyzes web pages and suggests ways to improve their performance based on a set of :1:",
    "whats-next_22ac3220308de49b56b20e639030771d": "Profile with Speed Tracer",
    "whats-next_d4b0ef7b36a7cbef8cc66960f6955e4a": ":1: is a tool to help you identify and fix performance problems in your web applications. It visualizes metrics that are taken from low level instrumentation points inside of the browser and analyzes them as your application runs. Speed Tracer is available as a Chrome extension and works on all platforms where extensions are currently supported (Windows and Linux).",
    "whats-next_c8aefabe5f595f5a833712a524f40565": "This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.",
    "whats-next_0e3f773cfbd4657074ab27048bbb56a8": "Use a recent PHP version",
    "whats-next_995f284bdefafa3803b23d0f65e6dcfb": "PHP is faster every day, using the latest version improves the performance of your applications and also of Phalcon.",
    "whats-next_d06ae3ababdb7f62581c61f473410f6b": "Use a PHP Bytecode Cache",
    "whats-next_be4aca0e28427136d4df0db25c8b4068": ":1: as many other bytecode caches help an application to reduce the overhead of read, tokenize and parse PHP files in each request. Once the extension is installed use the following setting to enable APC:",
    "whats-next_9bdd7f9dc4aee583ebe2cf085ba01f30": "PHP 5.5 includes a built-in bytecode cache called ZendOptimizer+, this extension is also available for 5.3 and 5.4.",
    "whats-next_8f9d9970427920451acf7c4983e22144": "Do blocking work in the background",
    "whats-next_236c23116970492ef2f675241540f17b": "Process a video, send e-mails, compress a file or an image, etc., are slow tasks that must be processed in background jobs. There are a variety of tools that provide queuing or messaging systems that work well with PHP:",
    "whats-next_31bc881424156d5e7144482cfb01c98f": "Google Page Speed",
    "whats-next_c5b991040c0cf0ab6cc0b5a08a9523a6": "mod_:1: speeds up your site and reduces page load time. This open-source Apache HTTP server module (also available for nginx as ngx_pagespeed) automatically applies web performance best practices to pages, and associated assets (CSS, JavaScript, images) without requiring that you modify your existing content or workflow.",
    "wintools_0d131205dc57ccc6fefd8a1eb760f6fc": "Phalcon Developer Tools on Windows",
    "wintools_eb7803f63ed5a54d112edb052012885b": "These steps will guide you through the process of installing Phalcon Developer Tools for Windows.",
    "wintools_17da86073980dfe20dfa8c157c811998": "Prerequisites",
    "wintools_3912e149b2c9d2a44404800fe8b905b4": "The Phalcon PHP extension is required to run Phalcon Tools. If you haven't installed it yet, please see the :1: section for instructions.",
    "wintools_d779ffb4113a9aa6902414524b888ae6": "Download",
    "wintools_c52ad3c8bfdd468181a9d135893b6e99": "You can download a cross platform package containing the developer tools from the :1: section. Also you can clone it from Github_.",
    "wintools_aed7061f88087f5534673e4af65a7e82": "On the Windows platform, you need to configure the system PATH to include Phalcon tools as well as the PHP executable. If you download the Phalcon tools as a zip archive, extract it on any path of your local drive i.e. *c:\\\\phalcon-tools*. You will need this path in the steps below. Edit the file \"phalcon.bat\" by right clicking on the file and selecting \"Edit\":",
    "wintools_a836c33da29aab779ed188ecead8ce4b": "Change the path to the one you installed the Phalcon tools:",
    "wintools_8acd47a705de08d71975b1b011205192": "Save the changes.",
    "wintools_c3bc2c558cb350d0693d43be98effb9f": "Adding PHP and Tools to your system PATH",
    "wintools_1eede6426becae71e99ea8c079eb8e1b": "Because the scripts are written in PHP, you need to install it on your machine. Depending on your PHP installation, the executable can be located in various places. Search for the file php.exe and copy the path it is located in. For instance, if using the latest WAMP stack, PHP is located in: *C:\\\\wamp\\bin\\\\php\\\\php5.3.10\\\\php.exe*.",
    "wintools_ba6050a7ca38430c2df5dfd6c5b720b0": "From the Windows start menu, right mouse click on the \"My Computer\" icon and select \"Properties\":",
    "wintools_2c16eb8355eb52d8b2ed7b28e2b8b52e": "Click the \"Advanced\" tab and then the button \"Environment Variables\":",
    "wintools_14fa2fc2faa119f4659609fcd0045bd8": "At the bottom, look for the section \"System variables\" and edit the variable \"Path\":",
    "wintools_70496851a33e144fea373c2aaa6a95bb": "Be very careful on this step! You need to append at the end of the long string the path where your php.exe was located and the path where Phalcon tools are installed. Use the \";\" character to separate the different paths in the variable:",
    "wintools_7d4a6198d7d3d87c2a2d457b08e68f66": "Accept the changes made by clicking \"OK\" and close the dialogs opened. From the start menu click on the option \"Run\". If you can't find this option, press \"Windows Key\" + \"R\".",
    "wintools_7187d3ca4387ddf319870b3d98299138": "Type \"cmd\" and press enter to open the windows command line utility:",
    "wintools_78fc4a588dde51bd67beb4afa10812dc": "Type the commands \"php -v\" and \"phalcon\" and you will see something like this:",
    "wintools_01e9aefb62a0345d027bcb8b02bbe10e": "Congratulations you now have Phalcon tools installed!",
    "wintools_7a752ac7821139893d4b7d8eb762a483": "Related Guides",
    "xampp_eda682d3225054770e1557c5c7db9bfd": "Installation on XAMPP",
    "xampp_b70a128300864dd3dae3f396b5ace740": ":1: is an easy to install Apache distribution containing MySQL, PHP and Perl. Once you download XAMPP, all you have to do is extract it and start using it. Below are detailed instructions on how to install Phalcon on XAMPP for Windows. Using the latest XAMPP version is highly recommended.",
    "xampp_6781878c32a5dee1aeaf59c8ed79e10a": "Download the right version of Phalcon",
    "xampp_8f4354ffc1e1b700a2f48b5f5056eb1d": "XAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.",
    "xampp_7d83479b3d39a89f33cc156cc88f273b": "After downloading the Phalcon library you will have a zip file like the one shown below:",
    "xampp_0db1319bdc326b865b8f2c9ff6152b45": "Extract the library from the archive to get the Phalcon DLL:",
    "xampp_4581535224ce2f47e52b99a3e0fff57d": "Copy the file php_phalcon.dll to the PHP extensions. If you have installed XAMPP in the c:\\\\xampp folder, the extension needs to be in c:\\\\xampp\\\\php\\\\ext",
    "xampp_dbb3c2a4d22456151e5a9c3f1bcd19e1": "Edit the php.ini file, it is located at ﻿C:\\\\xampp\\\\php\\\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.",
    "xampp_0503eb0f288cb6ed4160b426d9a7eb01": "Restart the Apache Web Server from the XAMPP Control Center. This will load the new PHP configuration.",
    "xampp_4d3a6772c8eb2181e7cf30f3dd652e9f": "Open your browser to navigate to http://localhost. The XAMPP welcome page will appear. Click on the link phpinfo().",
    "xampp_eb736ce5b9709338224c0eb8d1bd10d7": "phpinfo() will output a significant amount of information on screen about the current state of PHP. Scroll down to check if the phalcon extension has been loaded correctly.",
    "xampp_aeedaf4f1e7bd5b2449f12f993949184": "If you can see the phalcon version in the phpinfo() output, congrats!, You are now flying with Phalcon.",
    "xampp_397ec7a734977da72a84f9587f6d6b59": "Screencast",
    "xampp_dca69f2da70de89989a34bedeeb45daa": "The following screencast is a step by step guide to install Phalcon on Windows:",
    "xampp_7a752ac7821139893d4b7d8eb762a483": "Related Guides"
}